{"version":3,"file":"background.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;AACD;AACA;AACA;AACA,gCAAgC,wBAAwB;AACxD;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,iCAAiC;AACpF;AACA;AACA;AACA;AACA;AACA,2DAA2D,qBAAqB;AAChF;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,mCAAmC,wCAAwC;AAC3E,iBAAiB;AACjB;AACA,mCAAmC,sCAAsC;AACzE,iBAAiB;AACjB,aAAa;AACb;AACA,+BAA+B,sCAAsC;AACrE,aAAa;AACb;AACA;AACA;AACA;AACA,2BAA2B,sDAAsD;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,2BAA2B,2CAA2C;AACtE,SAAS;AACT,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,mBAAmB,EAAC","sources":["webpack://cobra-extension/webpack/bootstrap","webpack://cobra-extension/webpack/runtime/define property getters","webpack://cobra-extension/webpack/runtime/hasOwnProperty shorthand","webpack://cobra-extension/webpack/runtime/make namespace object","webpack://cobra-extension/./src/background.tsx"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Initialize extension when installed\nchrome.runtime.onInstalled.addListener(function () {\n    console.log('Extension installed');\n    // Set up the side panel\n    if (chrome.sidePanel) {\n        chrome.sidePanel.setOptions({\n            enabled: true,\n            path: 'signin.html'\n        });\n    }\n});\n// Handle extension icon clicks\nchrome.action.onClicked.addListener(function (tab) {\n    if (chrome.sidePanel && tab.windowId) {\n        chrome.sidePanel.open({ windowId: tab.windowId }).then(function () {\n            // Ensure we start at the sign-in page\n            chrome.sidePanel.setOptions({\n                path: 'signin.html'\n            });\n        });\n    }\n});\n// Handle messages\nvar messageHandler = function (message, sender, sendResponse) {\n    console.log('Background received message:', message);\n    if (message.type === 'detectPlatform') {\n        var platformMessage = message;\n        // Store the current platform and problem information\n        chrome.storage.local.set({\n            currentPlatform: platformMessage.platform,\n            currentProblem: platformMessage.problemTitle\n        });\n    }\n    if (message.type === 'showHint') {\n        var hintMessage = message;\n        // Handle hint display logic here\n        console.log('Hint:', hintMessage.hint);\n    }\n    if (message.type === 'navigate') {\n        var navMessage_1 = message;\n        console.log('Navigation request received:', navMessage_1);\n        if (chrome.sidePanel) {\n            // First ensure the sidepanel is open\n            // For the Chrome sidePanel API, we must have either a tabId or windowId\n            // Let's try to get the current window if windowId isn't specified\n            var openSidePanel = function () {\n                if (navMessage_1.windowId) {\n                    // If we have a windowId, use it directly\n                    return chrome.sidePanel.open({ windowId: navMessage_1.windowId });\n                }\n                else {\n                    // Otherwise, get the current window and use its id\n                    return chrome.windows.getCurrent().then(function (window) {\n                        if (window.id) {\n                            return chrome.sidePanel.open({ windowId: window.id });\n                        }\n                        throw new Error('Could not determine window ID');\n                    });\n                }\n            };\n            openSidePanel().then(function () {\n                console.log('Side panel opened, setting path to:', navMessage_1.path);\n                // Then set the path to the requested page\n                chrome.sidePanel.setOptions({\n                    path: navMessage_1.path\n                }).then(function () {\n                    console.log('Navigation complete to:', navMessage_1.path);\n                    sendResponse({ success: true, path: navMessage_1.path });\n                }).catch(function (error) {\n                    console.error('Error setting sidepanel path:', error);\n                    sendResponse({ success: false, error: error.message });\n                });\n            }).catch(function (error) {\n                console.error('Error opening sidepanel:', error);\n                sendResponse({ success: false, error: error.message });\n            });\n            return true;\n        }\n        else {\n            console.error('chrome.sidePanel API not available');\n            sendResponse({ success: false, error: 'sidePanel API not available' });\n        }\n    }\n    if (message.type === 'checkAuth') {\n        chrome.storage.local.get(['isAuthenticated'], function (result) {\n            console.log('Auth check result:', result);\n            if (!result.isAuthenticated) {\n                if (chrome.sidePanel) {\n                    chrome.sidePanel.setOptions({\n                        path: 'signin.html'\n                    });\n                }\n            }\n            sendResponse({ isAuthenticated: !!result.isAuthenticated });\n        });\n        return true; // Indicates we'll send a response asynchronously\n    }\n    // Default response for other message types\n    return false;\n};\nchrome.runtime.onMessage.addListener(messageHandler);\n// Export an empty React component to satisfy tsx requirements\nvar BackgroundComponent = function () {\n    // This component doesn't render anything\n    // It's just a wrapper for the background script logic\n    return null;\n};\nexport default BackgroundComponent;\n"],"names":[],"sourceRoot":""}