[
  {
    "Index": 1,
    "Title": "[Two Sum](https://leetcode.com/problems/two-sum/)",
    "Solution": [
      [
        "C++",
        "C++/two-sum.cpp"
      ],
      [
        "Python",
        "Python/two-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2,
    "Title": "[Add Two Numbers](https://leetcode.com/problems/add-two-numbers/)",
    "Solution": [
      [
        "C++",
        "C++/add-two-numbers.cpp"
      ],
      [
        "Python",
        "Python/add-two-numbers.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3,
    "Title": "[Longest Substring Without Repeating Characters](https://leetcode.com/problems/longest-substring-without-repeating-characters/)",
    "Solution": [
      [
        "C++",
        "C++/longest-substring-without-repeating-characters.cpp"
      ],
      [
        "Python",
        "Python/longest-substring-without-repeating-characters.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 4,
    "Title": "[Median of Two Sorted Arrays](https://leetcode.com/problems/median-of-two-sorted-arrays/)",
    "Solution": [
      [
        "C++",
        "C++/median-of-two-sorted-arrays.cpp"
      ],
      [
        "Python",
        "Python/median-of-two-sorted-arrays.py"
      ]
    ],
    "Time": "_O(log(min(m, n)))_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 5,
    "Title": "[Longest Palindromic Substring](https://leetcode.com/problems/longest-palindromic-substring/)",
    "Solution": [
      [
        "C++",
        "C++/longest-palindromic-substring.cpp"
      ],
      [
        "Python",
        "Python/longest-palindromic-substring.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 6,
    "Title": "[ZigZag Conversion](https://leetcode.com/problems/zigzag-conversion/)",
    "Solution": [
      [
        "C++",
        "C++/zigzag-conversion.cpp"
      ],
      [
        "Python",
        "Python/zigzag-conversion.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 7,
    "Title": "[Reverse Integer](https://leetcode.com/problems/reverse-integer/)",
    "Solution": [
      [
        "C++",
        "C++/reverse-integer.cpp"
      ],
      [
        "Python",
        "Python/reverse-integer.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 8,
    "Title": "[String to Integer (atoi)](https://leetcode.com/problems/string-to-integer-atoi/)",
    "Solution": [
      [
        "C++",
        "C++/string-to-integer-atoi.cpp"
      ],
      [
        "Python",
        "Python/string-to-integer-atoi.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 9,
    "Title": "[Palindrome Number](https://leetcode.com/problems/palindrome-number/)",
    "Solution": [
      [
        "C++",
        "C++/palindrome-number.cpp"
      ],
      [
        "Python",
        "Python/palindrome-number.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 10,
    "Title": "[Regular Expression Matching](https://leetcode.com/problems/regular-expression-matching/)",
    "Solution": [
      [
        "Python",
        "Python/regular-expression-matching.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 11,
    "Title": "[Container With Most Water](https://leetcode.com/problems/container-with-most-water/)",
    "Solution": [
      [
        "C++",
        "C++/container-with-most-water.cpp"
      ],
      [
        "Python",
        "Python/container-with-most-water.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 12,
    "Title": "[Integer to Roman](https://leetcode.com/problems/integer-to-roman/)",
    "Solution": [
      [
        "C++",
        "C++/integer-to-roman.cpp"
      ],
      [
        "Python",
        "Python/integer-to-roman.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 13,
    "Title": "[Roman to Integer](https://leetcode.com/problems/roman-to-integer/)",
    "Solution": [
      [
        "C++",
        "C++/roman-to-integer.cpp"
      ],
      [
        "Python",
        "Python/roman-to-integer.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 14,
    "Title": "[Longest Common Prefix](https://leetcode.com/problems/longest-common-prefix/)",
    "Solution": [
      [
        "C++",
        "C++/longest-common-prefix.cpp"
      ],
      [
        "Python",
        "Python/longest-common-prefix.py"
      ]
    ],
    "Time": "_O(n * k)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 15,
    "Title": "[3 Sum](https://leetcode.com/problems/3sum/)",
    "Solution": [
      [
        "C++",
        "C++/3sum.cpp"
      ],
      [
        "Python",
        "Python/3sum.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 16,
    "Title": "[3 Sum Closest](https://leetcode.com/problems/3sum-closest/)",
    "Solution": [
      [
        "C++",
        "C++/3sum-closest.cpp"
      ],
      [
        "Python",
        "Python/3sum-closest.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 17,
    "Title": "[Letter Combinations of a Phone Number](https://leetcode.com/problems/letter-combinations-of-a-phone-number/)",
    "Solution": [
      [
        "C++",
        "C++/letter-combinations-of-a-phone-number.cpp"
      ],
      [
        "Python",
        "Python/letter-combinations-of-a-phone-number.py"
      ]
    ],
    "Time": "_O(n * 4^n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 18,
    "Title": "[4 Sum](https://leetcode.com/problems/4sum/)",
    "Solution": [
      [
        "C++",
        "C++/4sum.cpp"
      ],
      [
        "Python",
        "Python/4sum.py"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 19,
    "Title": "[Remove Nth Node From End of List](https://leetcode.com/problems/remove-nth-node-from-end-of-list/)",
    "Solution": [
      [
        "C++",
        "C++/remove-nth-node-from-end-of-list.cpp"
      ],
      [
        "Python",
        "Python/remove-nth-node-from-end-of-list.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 20,
    "Title": "[Valid Parentheses](https://leetcode.com/problems/valid-parentheses/)",
    "Solution": [
      [
        "C++",
        "C++/valid-parentheses.cpp"
      ],
      [
        "Python",
        "Python/valid-parentheses.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 21,
    "Title": "[Merge Two Sorted Lists](https://leetcode.com/problems/merge-two-sorted-lists/)",
    "Solution": [
      [
        "C++",
        "C++/merge-two-sorted-lists.cpp"
      ],
      [
        "Python",
        "Python/merge-two-sorted-lists.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 22,
    "Title": "[Generate Parentheses](https://leetcode.com/problems/generate-parentheses/)",
    "Solution": [
      [
        "C++",
        "C++/generate-parentheses.cpp"
      ],
      [
        "Python",
        "Python/generate-parentheses.py"
      ]
    ],
    "Time": "_O(4^n / n^(3/2))_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 23,
    "Title": "[Merge k Sorted Lists](https://leetcode.com/problems/merge-k-sorted-lists/)",
    "Solution": [
      [
        "C++",
        "C++/merge-k-sorted-lists.cpp"
      ],
      [
        "Python",
        "Python/merge-k-sorted-lists.py"
      ]
    ],
    "Time": "_O(nlogk)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 24,
    "Title": "[Swap Nodes in Pairs](https://leetcode.com/problems/swap-nodes-in-pairs/)",
    "Solution": [
      [
        "C++",
        "C++/swap-nodes-in-pairs.cpp"
      ],
      [
        "Python",
        "Python/swap-nodes-in-pairs.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 25,
    "Title": "[Reverse Nodes in k-Group](https://leetcode.com/problems/reverse-nodes-in-k-group/)",
    "Solution": [
      [
        "C++",
        "C++/reverse-nodes-in-k-group.cpp"
      ],
      [
        "Python",
        "Python/reverse-nodes-in-k-group.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 26,
    "Title": "[Remove Duplicates from Sorted Array](https://leetcode.com/problems/remove-duplicates-from-sorted-array/)",
    "Solution": [
      [
        "C++",
        "C++/remove-duplicates-from-sorted-array.cpp"
      ],
      [
        "Python",
        "Python/remove-duplicates-from-sorted-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 27,
    "Title": "[Remove Element](https://leetcode.com/problems/remove-element/)",
    "Solution": [
      [
        "C++",
        "C++/remove-element.cpp"
      ],
      [
        "Python",
        "Python/remove-element.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 28,
    "Title": "[Implement strStr()](https://leetcode.com/problems/implement-strstr/)",
    "Solution": [
      [
        "C++",
        "C++/implement-strstr.cpp"
      ],
      [
        "Python",
        "Python/implement-strstr.py"
      ]
    ],
    "Time": "_O(n + k)_",
    "Space": "_O(k)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 29,
    "Title": "[Divide Two Integers](https://leetcode.com/problems/divide-two-integers/)",
    "Solution": [
      [
        "C++",
        "C++/divide-two-integers.cpp"
      ],
      [
        "Python",
        "Python/divide-two-integers.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 30,
    "Title": "[Substring with Concatenation of All Words](https://leetcode.com/problems/substring-with-concatenation-of-all-words/)",
    "Solution": [
      [
        "C++",
        "C++/substring-with-concatenation-of-all-words.cpp"
      ],
      [
        "Python",
        "Python/substring-with-concatenation-of-all-words.py"
      ]
    ],
    "Time": "_O((m + n) * k)_",
    "Space": "_O(n * k)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 31,
    "Title": "[Next Permutation](https://leetcode.com/problems/next-permutation/)",
    "Solution": [
      [
        "C++",
        "C++/next-permutation.cpp"
      ],
      [
        "Python",
        "Python/next-permutation.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 32,
    "Title": "[Longest Valid Parentheses](https://leetcode.com/problems/longest-valid-parentheses/)",
    "Solution": [
      [
        "C++",
        "C++/longest-valid-parentheses.cpp"
      ],
      [
        "Python",
        "Python/longest-valid-parentheses.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 33,
    "Title": "[Search in Rotated Sorted Array](https://leetcode.com/problems/search-in-rotated-sorted-array/)",
    "Solution": [
      [
        "C++",
        "C++/search-in-rotated-sorted-array.cpp"
      ],
      [
        "Python",
        "Python/search-in-rotated-sorted-array.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "CTCI"
  },
  {
    "Index": 34,
    "Title": "[Find First and Last Position of Element in Sorted Array](https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/)",
    "Solution": [
      [
        "C++",
        "C++/find-first-and-last-position-of-element-in-sorted-array.cpp"
      ],
      [
        "Python",
        "Python/find-first-and-last-position-of-element-in-sorted-array.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 35,
    "Title": "[Search Insert Position](https://leetcode.com/problems/search-insert-position/)",
    "Solution": [
      [
        "C++",
        "C++/search-insert-position.cpp"
      ],
      [
        "Python",
        "Python/search-insert-position.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 36,
    "Title": "[Valid Sudoku](https://leetcode.com/problems/valid-sudoku/)",
    "Solution": [
      [
        "C++",
        "C++/valid-sudoku.cpp"
      ],
      [
        "Python",
        "Python/valid-sudoku.py"
      ]
    ],
    "Time": "_O(9^2)_",
    "Space": "_O(9)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 37,
    "Title": "[Sudoku Solver](https://leetcode.com/problems/sudoku-solver/)",
    "Solution": [
      [
        "Python",
        "Python/sudoku-solver.py"
      ]
    ],
    "Time": "_O((9!)^9)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 38,
    "Title": "[Count and Say](https://leetcode.com/problems/count-and-say/)",
    "Solution": [
      [
        "C++",
        "C++/count-and-say.cpp"
      ],
      [
        "Python",
        "Python/count-and-say.py"
      ]
    ],
    "Time": "_O(n * 2^n)_",
    "Space": "_O(2^n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 39,
    "Title": "[Combination Sum](https://leetcode.com/problems/combination-sum/)",
    "Solution": [
      [
        "Python",
        "Python/combination-sum.py"
      ]
    ],
    "Time": "_O(k * n^k)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 40,
    "Title": "[Combination Sum II](https://leetcode.com/problems/combination-sum-ii/)",
    "Solution": [
      [
        "Python",
        "Python/combination-sum-ii.py"
      ]
    ],
    "Time": "_O(k * C(n, k))_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 41,
    "Title": "[First Missing Positive](https://leetcode.com/problems/first-missing-positive/)",
    "Solution": [
      [
        "C++",
        "C++/first-missing-positive.cpp"
      ],
      [
        "Python",
        "Python/first-missing-positive.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 42,
    "Title": "[Trapping Rain Water](https://leetcode.com/problems/trapping-rain-water/)",
    "Solution": [
      [
        "C++",
        "C++/trapping-rain-water.cpp"
      ],
      [
        "Python",
        "Python/trapping-rain-water.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 43,
    "Title": "[Multiply Strings](https://leetcode.com/problems/multiply-strings/)",
    "Solution": [
      [
        "C++",
        "C++/multiply-strings.cpp"
      ],
      [
        "Python",
        "Python/multiply-strings.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 44,
    "Title": "[Wildcard Matching](https://leetcode.com/problems/wildcard-matching/)",
    "Solution": [
      [
        "Python",
        "Python/wildcard-matching.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 45,
    "Title": "[Jump Game II](https://leetcode.com/problems/jump-game-ii/)",
    "Solution": [
      [
        "Python",
        "Python/jump-game-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 46,
    "Title": "[Permutations](https://leetcode.com/problems/permutations/)",
    "Solution": [
      [
        "Python",
        "Python/permutations.py"
      ]
    ],
    "Time": "_O(n * n!)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 47,
    "Title": "[Permutations II](https://leetcode.com/problems/permutations-ii/)",
    "Solution": [
      [
        "Python",
        "Python/permutations-ii.py"
      ]
    ],
    "Time": "_O(n * n!)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 48,
    "Title": "[Rotate Image](https://leetcode.com/problems/rotate-image/)",
    "Solution": [
      [
        "C++",
        "C++/rotate-image.cpp"
      ],
      [
        "Python",
        "Python/rotate-image.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 49,
    "Title": "[Group Anagrams](https://leetcode.com/problems/group-anagrams/)",
    "Solution": [
      [
        "C++",
        "C++/group-anagrams.cpp"
      ],
      [
        "Python",
        "Python/group-anagrams.py"
      ]
    ],
    "Time": "_O(n * glogg)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 50,
    "Title": "[Pow(x, n)](https://leetcode.com/problems/powx-n/)",
    "Solution": [
      [
        "C++",
        "C++/powx-n.cpp"
      ],
      [
        "Python",
        "Python/powx-n.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 51,
    "Title": "[N-Queens](https://leetcode.com/problems/n-queens/)",
    "Solution": [
      [
        "Python",
        "Python/n-queens.py"
      ]
    ],
    "Time": "_O(n^2 * n!)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 52,
    "Title": "[N-Queens-II](https://leetcode.com/problems/n-queens-ii/)",
    "Solution": [
      [
        "Python",
        "Python/n-queens-ii.py"
      ]
    ],
    "Time": "_O(n!)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 53,
    "Title": "[Maximum Subarray](https://leetcode.com/problems/maximum-subarray/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-subarray.cpp"
      ],
      [
        "Python",
        "Python/maximum-subarray.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 54,
    "Title": "[Spiral Matrix](https://leetcode.com/problems/spiral-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/spiral-matrix.cpp"
      ],
      [
        "Python",
        "Python/spiral-matrix.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 55,
    "Title": "[Jump Game](https://leetcode.com/problems/jump-game/)",
    "Solution": [
      [
        "C++",
        "C++/jump-game.cpp"
      ],
      [
        "Python",
        "Python/jump-game.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 56,
    "Title": "[Merge Intervals](https://leetcode.com/problems/merge-intervals/)",
    "Solution": [
      [
        "C++",
        "C++/merge-intervals.cpp"
      ],
      [
        "Python",
        "Python/merge-intervals.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 57,
    "Title": "[Insert Interval](https://leetcode.com/problems/insert-interval/)",
    "Solution": [
      [
        "C++",
        "C++/insert-interval.cpp"
      ],
      [
        "Python",
        "Python/insert-interval.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 58,
    "Title": "[Length of Last Word](https://leetcode.com/problems/length-of-last-word/)",
    "Solution": [
      [
        "C++",
        "C++/length-of-last-word.cpp"
      ],
      [
        "Python",
        "Python/length-of-last-word.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 59,
    "Title": "[Spiral Matrix II](https://leetcode.com/problems/spiral-matrix-ii/)",
    "Solution": [
      [
        "C++",
        "C++/spiral-matrix-ii.cpp"
      ],
      [
        "Python",
        "Python/spiral-matrix-ii.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 60,
    "Title": "[Permutation Sequence](https://leetcode.com/problems/permutation-sequence/)",
    "Solution": [
      [
        "C++",
        "C++/permutation-sequence.cpp"
      ],
      [
        "Python",
        "Python/permutation-sequence.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 61,
    "Title": "[Rotate List](https://leetcode.com/problems/rotate-list/)",
    "Solution": [
      [
        "C++",
        "C++/rotate-list.cpp"
      ],
      [
        "Python",
        "Python/rotate-list.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 62,
    "Title": "[Unique Paths](https://leetcode.com/problems/unique-paths/)",
    "Solution": [
      [
        "Python",
        "Python/unique-paths.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 63,
    "Title": "[Unique Paths II](https://leetcode.com/problems/unique-paths-ii/)",
    "Solution": [
      [
        "Python",
        "Python/unique-paths-ii.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 64,
    "Title": "[Minimum Path Sum](https://leetcode.com/problems/minimum-path-sum/)",
    "Solution": [
      [
        "Python",
        "Python/minimum-path-sum.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 65,
    "Title": "[Valid Number](https://leetcode.com/problems/valid-number/)",
    "Solution": [
      [
        "C++",
        "C++/valid-number.cpp"
      ],
      [
        "Python",
        "Python/valid-number.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 66,
    "Title": "[Plus One](https://leetcode.com/problems/plus-one/)",
    "Solution": [
      [
        "C++",
        "C++/plus-one.cpp"
      ],
      [
        "Python",
        "Python/plus-one.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 67,
    "Title": "[Add Binary](https://leetcode.com/problems/add-binary/)",
    "Solution": [
      [
        "C++",
        "C++/add-binary.cpp"
      ],
      [
        "Python",
        "Python/add-binary.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 68,
    "Title": "[Text Justification](https://leetcode.com/problems/text-justification/)",
    "Solution": [
      [
        "C++",
        "C++/text-justification.cpp"
      ],
      [
        "Python",
        "Python/text-justification.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 69,
    "Title": "[Sqrt(x)](https://leetcode.com/problems/sqrtx/)",
    "Solution": [
      [
        "C++",
        "C++/sqrtx.cpp"
      ],
      [
        "Python",
        "Python/sqrtx.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 70,
    "Title": "[Climbing Stairs](https://leetcode.com/problems/climbing-stairs/)",
    "Solution": [
      [
        "C++",
        "C++/climbing-stairs.cpp"
      ],
      [
        "Python",
        "Python/climbing-stairs.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 71,
    "Title": "[Simplify Path](https://leetcode.com/problems/simplify-path/)",
    "Solution": [
      [
        "C++",
        "C++/simplify-path.cpp"
      ],
      [
        "Python",
        "Python/simplify-path.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 72,
    "Title": "[Edit Distance](https://leetcode.com/problems/edit-distance/)",
    "Solution": [
      [
        "Python",
        "Python/edit-distance.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 73,
    "Title": "[Set Matrix Zeroes](https://leetcode.com/problems/set-matrix-zeroes/)",
    "Solution": [
      [
        "C++",
        "C++/set-matrix-zeroes.cpp"
      ],
      [
        "Python",
        "Python/set-matrix-zeroes.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 74,
    "Title": "[Search a 2D Matrix](https://leetcode.com/problems/search-a-2d-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/search-a-2d-matrix.cpp"
      ],
      [
        "Python",
        "Python/search-a-2d-matrix.py"
      ]
    ],
    "Time": "_O(logm + logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 75,
    "Title": "[Sort Colors](https://leetcode.com/problems/sort-colors/)",
    "Solution": [
      [
        "C++",
        "C++/sort-colors.cpp"
      ],
      [
        "Python",
        "Python/sort-colors.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 76,
    "Title": "[Minimum Window Substring](https://leetcode.com/problems/minimum-window-substring/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-window-substring.cpp"
      ],
      [
        "Python",
        "Python/minimum-window-substring.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(k)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 77,
    "Title": "[Combinations](https://leetcode.com/problems/combinations/)",
    "Solution": [
      [
        "C++",
        "C++/combinations.cpp"
      ],
      [
        "Python",
        "Python/combinations.py"
      ]
    ],
    "Time": "_O(O(k * C(n, k)))_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 78,
    "Title": "[Subsets](https://leetcode.com/problems/subsets/)",
    "Solution": [
      [
        "C++",
        "C++/subsets.cpp"
      ],
      [
        "Python",
        "Python/subsets.py"
      ]
    ],
    "Time": "_O(n * 2^n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 79,
    "Title": "[Word Search](https://leetcode.com/problems/word-search/)",
    "Solution": [
      [
        "C++",
        "C++/word-search.cpp"
      ],
      [
        "Python",
        "Python/word-search.py"
      ]
    ],
    "Time": "_O(m * n * 3^l)_",
    "Space": "_O(l)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 80,
    "Title": "[Remove Duplicates from Sorted Array II](https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/)",
    "Solution": [
      [
        "C++",
        "C++/remove-duplicates-from-sorted-array-ii.cpp"
      ],
      [
        "Python",
        "Python/remove-duplicates-from-sorted-array-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 81,
    "Title": "[Search in Rotated Sorted Array II](https://leetcode.com/problems/search-in-rotated-sorted-array-ii/)",
    "Solution": [
      [
        "C++",
        "C++/search-in-rotated-sorted-array-ii.cpp"
      ],
      [
        "Python",
        "Python/search-in-rotated-sorted-array-ii.py"
      ]
    ],
    "Time": "_O(logn)_ ~ _O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "CTCI"
  },
  {
    "Index": 82,
    "Title": "[Remove Duplicates from Sorted List II](https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/)",
    "Solution": [
      [
        "C++",
        "C++/remove-duplicates-from-sorted-list-ii.cpp"
      ],
      [
        "Python",
        "Python/remove-duplicates-from-sorted-list-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 83,
    "Title": "[Remove Duplicates from Sorted List](https://leetcode.com/problems/remove-duplicates-from-sorted-list/)",
    "Solution": [
      [
        "C++",
        "C++/remove-duplicates-from-sorted-list.cpp"
      ],
      [
        "Python",
        "Python/remove-duplicates-from-sorted-list.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 84,
    "Title": "[Largest Rectangle in Histogram](https://leetcode.com/problems/largest-rectangle-in-histogram/)",
    "Solution": [
      [
        "C++",
        "C++/largest-rectangle-in-histogram.cpp"
      ],
      [
        "Python",
        "Python/largest-rectangle-in-histogram.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 85,
    "Title": "[Maximal Rectangle](https://leetcode.com/problems/maximal-rectangle/)",
    "Solution": [
      [
        "C++",
        "C++/maximal-rectangle.cpp"
      ],
      [
        "Python",
        "Python/maximal-rectangle.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "EPI"
  },
  {
    "Index": 86,
    "Title": "[Partition List](https://leetcode.com/problems/partition-list/)",
    "Solution": [
      [
        "C++",
        "C++/partition-list.cpp"
      ],
      [
        "Python",
        "Python/partition-list.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 87,
    "Title": "[Scramble String](https://leetcode.com/problems/scramble-string/)",
    "Solution": [
      [
        "Python",
        "Python/scramble-string.py"
      ]
    ],
    "Time": "_O(n^4)_",
    "Space": "_O(n^3)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 88,
    "Title": "[Merge Sorted Array](https://leetcode.com/problems/merge-sorted-array/)",
    "Solution": [
      [
        "C++",
        "C++/merge-sorted-array.cpp"
      ],
      [
        "Python",
        "Python/merge-sorted-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 89,
    "Title": "[Gray Code](https://leetcode.com/problems/gray-code/)",
    "Solution": [
      [
        "C++",
        "C++/gray-code.cpp"
      ],
      [
        "Python",
        "Python/gray-code.py"
      ]
    ],
    "Time": "_O(2^n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 90,
    "Title": "[Subsets II](https://leetcode.com/problems/subsets-ii/)",
    "Solution": [
      [
        "C++",
        "C++/subsets-ii.cpp"
      ],
      [
        "Python",
        "Python/subsets-ii.py"
      ]
    ],
    "Time": "_O(n * 2^n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 91,
    "Title": "[Decode Ways](https://leetcode.com/problems/decode-ways/)",
    "Solution": [
      [
        "C++",
        "Python/decode-ways.cpp"
      ],
      [
        "Python",
        "Python/decode-ways.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 92,
    "Title": "[Reverse Linked List II](https://leetcode.com/problems/reverse-linked-list-ii/)",
    "Solution": [
      [
        "C++",
        "C++/reverse-linked-list-ii.cpp"
      ],
      [
        "Python",
        "Python/reverse-linked-list-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 93,
    "Title": "[Restore IP Addresses](https://leetcode.com/problems/restore-ip-addresses/)",
    "Solution": [
      [
        "Python",
        "Python/restore-ip-addresses.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 94,
    "Title": "[Binary Tree Inorder Traversal](https://leetcode.com/problems/binary-tree-inorder-traversal/)",
    "Solution": [
      [
        "C++",
        "C++/binary-tree-inorder-traversal.cpp"
      ],
      [
        "Python",
        "Python/binary-tree-inorder-traversal.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "`Morris Traversal`"
  },
  {
    "Index": 95,
    "Title": "[Unique Binary Search Trees II](https://leetcode.com/problems/unique-binary-search-trees-ii/)",
    "Solution": [
      [
        "C++",
        "C++/unique-binary-search-trees-ii.cpp"
      ],
      [
        "Python",
        "Python/unique-binary-search-trees-ii.py"
      ]
    ],
    "Time": "_O(4^n / n^(3/2)_",
    "Space": "_O(4^n / n^(3/2)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 96,
    "Title": "[Unique Binary Search Trees](https://leetcode.com/problems/unique-binary-search-trees/)",
    "Solution": [
      [
        "Python",
        "Python/unique-binary-search-trees.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 97,
    "Title": "[Interleaving String](https://leetcode.com/problems/interleaving-string/)",
    "Solution": [
      [
        "Python",
        "Python/interleaving-string.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 98,
    "Title": "[Validate Binary Search Tree](https://leetcode.com/problems/validate-binary-search-tree/)",
    "Solution": [
      [
        "C++",
        "C++/validate-binary-search-tree.cpp"
      ],
      [
        "Python",
        "Python/validate-binary-search-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 99,
    "Title": "[Recover Binary Search Tree](https://leetcode.com/problems/recover-binary-search-tree/)",
    "Solution": [
      [
        "C++",
        "C++/recover-binary-search-tree.cpp"
      ],
      [
        "Python",
        "Python/recover-binary-search-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 100,
    "Title": "[Same Tree](https://leetcode.com/problems/same-tree/)",
    "Solution": [
      [
        "C++",
        "C++/same-tree.cpp"
      ],
      [
        "Python",
        "Python/same-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 101,
    "Title": "[Symmetric Tree](https://leetcode.com/problems/symmetric-tree/)",
    "Solution": [
      [
        "C++",
        "C++/symmetric-tree.cpp"
      ],
      [
        "Python",
        "Python/symmetric-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 102,
    "Title": "[Binary Tree Level Order Traversal](https://leetcode.com/problems/binary-tree-level-order-traversal/)",
    "Solution": [
      [
        "C++",
        "C++/binary-tree-level-order-traversal.cpp"
      ],
      [
        "Python",
        "Python/binary-tree-level-order-traversal.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 103,
    "Title": "[Binary Tree Zigzag Level Order Traversal](https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/)",
    "Solution": [
      [
        "Python",
        "Python/binary-tree-zigzag-level-order-traversal.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 104,
    "Title": "[Maximum Depth of Binary Tree](https://leetcode.com/problems/maximum-depth-of-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-depth-of-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/maximum-depth-of-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 105,
    "Title": "[Construct Binary Tree from Preorder and Inorder Traversal](https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/)",
    "Solution": [
      [
        "C++",
        "C++/construct-binary-tree-from-preorder-and-inorder-traversal.cpp"
      ],
      [
        "Python",
        "Python/construct-binary-tree-from-preorder-and-inorder-traversal.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 106,
    "Title": "[Construct Binary Tree from Inorder and Postorder Traversal](https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/)",
    "Solution": [
      [
        "C++",
        "C++/construct-binary-tree-from-inorder-and-postorder-traversal.cpp"
      ],
      [
        "Python",
        "Python/construct-binary-tree-from-inorder-and-postorder-traversal.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 107,
    "Title": "[Binary Tree Level Order Traversal II](https://leetcode.com/problems/binary-tree-level-order-traversal-ii/)",
    "Solution": [
      [
        "C++",
        "C++/binary-tree-level-order-traversal-ii.cpp"
      ],
      [
        "Python",
        "Python/binary-tree-level-order-traversal-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 108,
    "Title": "[Convert Sorted Array to Binary Search Tree](https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/)",
    "Solution": [
      [
        "C++",
        "C++/convert-sorted-array-to-binary-search-tree.cpp"
      ],
      [
        "Python",
        "Python/convert-sorted-array-to-binary-search-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(logn)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 109,
    "Title": "[Convert Sorted List to Binary Search Tree](https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/)",
    "Solution": [
      [
        "C++",
        "C++/convert-sorted-list-to-binary-search-tree.cpp"
      ],
      [
        "Python",
        "Python/convert-sorted-list-to-binary-search-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(logn)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 110,
    "Title": "[Balanced Binary Tree](https://leetcode.com/problems/balanced-binary-tree/)",
    "Solution": [
      [
        "Python",
        "Python/balanced-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 111,
    "Title": "[Minimum Depth of Binary Tree](https://leetcode.com/problems/minimum-depth-of-binary-tree/)",
    "Solution": [
      [
        "Python",
        "Python/minimum-depth-of-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 112,
    "Title": "[Path Sum](https://leetcode.com/problems/path-sum/)",
    "Solution": [
      [
        "Python",
        "Python/path-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 113,
    "Title": "[Path Sum II](https://leetcode.com/problems/path-sum-ii/)",
    "Solution": [
      [
        "Python",
        "Python/path-sum-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 114,
    "Title": "[Flatten Binary Tree to Linked List](https://leetcode.com/problems/flatten-binary-tree-to-linked-list/)",
    "Solution": [
      [
        "Python",
        "Python/flatten-binary-tree-to-linked-list.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 115,
    "Title": "[Distinct Subsequences](https://leetcode.com/problems/distinct-subsequences/)",
    "Solution": [
      [
        "Python",
        "Python/distinct-subsequences.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 116,
    "Title": "[Populating Next Right Pointers in Each Node](https://leetcode.com/problems/populating-next-right-pointers-in-each-node/)",
    "Solution": [
      [
        "Python",
        "Python/populating-next-right-pointers-in-each-node.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 117,
    "Title": "[Populating Next Right Pointers in Each Node II](https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/)",
    "Solution": [
      [
        "Python",
        "Python/populating-next-right-pointers-in-each-node-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 118,
    "Title": "[Pascal's Triangle](https://leetcode.com/problems/pascals-triangle/)",
    "Solution": [
      [
        "C++",
        "C++/pascals-triangle.cpp"
      ],
      [
        "Python",
        "Python/pascals-triangle.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 119,
    "Title": "[Pascal's Triangle II](https://leetcode.com/problems/pascals-triangle-ii/)",
    "Solution": [
      [
        "C++",
        "C++/pascals-triangle-ii.cpp"
      ],
      [
        "Python",
        "Python/pascals-triangle-ii.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 120,
    "Title": "[Triangle](https://leetcode.com/problems/triangle/)",
    "Solution": [
      [
        "Python",
        "Python/triangle.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 121,
    "Title": "[Best Time to Buy and Sell Stock](https://leetcode.com/problems/best-time-to-buy-and-sell-stock/)",
    "Solution": [
      [
        "C++",
        "C++/best-time-to-buy-and-sell-stock.cpp"
      ],
      [
        "Python",
        "Python/best-time-to-buy-and-sell-stock.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 122,
    "Title": "[Best Time to Buy and Sell Stock II](https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/)",
    "Solution": [
      [
        "C++",
        "C++/best-time-to-buy-and-sell-stock-ii.cpp"
      ],
      [
        "Python",
        "Python/best-time-to-buy-and-sell-stock-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 123,
    "Title": "[Best Time to Buy and Sell Stock III](https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/)",
    "Solution": [
      [
        "Python",
        "Python/best-time-to-buy-and-sell-stock-iii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 124,
    "Title": "[Binary Tree Maximum Path Sum](https://leetcode.com/problems/binary-tree-maximum-path-sum/)",
    "Solution": [
      [
        "C++",
        "C++/binary-tree-maximum-path-sum.cpp"
      ],
      [
        "Python",
        "Python/binary-tree-maximum-path-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 125,
    "Title": "[Valid Palindrome](https://leetcode.com/problems/valid-palindrome/)",
    "Solution": [
      [
        "C++",
        "C++/valid-palindrome.cpp"
      ],
      [
        "Python",
        "Python/valid-palindrome.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 126,
    "Title": "[Word Ladder II](https://leetcode.com/problems/word-ladder-ii/)",
    "Solution": [
      [
        "C++",
        "C++/word-ladder-ii.cpp"
      ],
      [
        "Python",
        "Python/word-ladder-ii.py"
      ]
    ],
    "Time": "_O(b^(d/2))_",
    "Space": "_O(w * l)_",
    "Difficulty": "Hard",
    "Tag": "CTCI"
  },
  {
    "Index": 127,
    "Title": "[Word Ladder](https://leetcode.com/problems/word-ladder/)",
    "Solution": [
      [
        "C++",
        "C++/word-ladder.cpp"
      ],
      [
        "Python",
        "Python/word-ladder.py"
      ]
    ],
    "Time": "_O(b^(d/2))_",
    "Space": "_O(w * l)_",
    "Difficulty": "Medium",
    "Tag": "CTCI"
  },
  {
    "Index": 128,
    "Title": "[Longest Consecutive Sequence](https://leetcode.com/problems/longest-consecutive-sequence/)",
    "Solution": [
      [
        "C++",
        "C++/longest-consecutive-sequence.cpp"
      ],
      [
        "Python",
        "Python/longest-consecutive-sequence.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 129,
    "Title": "[Sum Root to Leaf Numbers](https://leetcode.com/problems/sum-root-to-leaf-numbers/)",
    "Solution": [
      [
        "Python",
        "Python/sum-root-to-leaf-numbers.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 130,
    "Title": "[Surrounded Regions](https://leetcode.com/problems/surrounded-regions/)",
    "Solution": [
      [
        "C++",
        "C++/surrounded-regions.cpp"
      ],
      [
        "Python",
        "Python/surrounded-regions.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 131,
    "Title": "[Palindrome Partitioning](https://leetcode.com/problems/palindrome-partitioning/)",
    "Solution": [
      [
        "Python",
        "Python/palindrome-partitioning.py"
      ]
    ],
    "Time": "_O(n^2)_ ~ _O(2^n)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 132,
    "Title": "[Palindrome Partitioning II](https://leetcode.com/problems/palindrome-partitioning-ii/)",
    "Solution": [
      [
        "Python",
        "Python/palindrome-partitioning-ii.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 133,
    "Title": "[Clone Graph](https://leetcode.com/problems/clone-graph/)",
    "Solution": [
      [
        "Python",
        "Python/clone-graph.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 134,
    "Title": "[Gas Station](https://leetcode.com/problems/gas-station/)",
    "Solution": [
      [
        "Python",
        "Python/gas-station.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 135,
    "Title": "[Candy](https://leetcode.com/problems/candy/)",
    "Solution": [
      [
        "C++",
        "C++/candy.cpp"
      ],
      [
        "Python",
        "Python/candy.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 136,
    "Title": "[Single Number](https://leetcode.com/problems/single-number/)",
    "Solution": [
      [
        "C++",
        "C++/single-number.cpp"
      ],
      [
        "Python",
        "Python/single-number.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 137,
    "Title": "[Single Number II](https://leetcode.com/problems/single-number-ii/)",
    "Solution": [
      [
        "C++",
        "C++/single-number-ii.cpp"
      ],
      [
        "Python",
        "Python/single-number-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 138,
    "Title": "[Copy List with Random Pointer](https://leetcode.com/problems/copy-list-with-random-pointer/)",
    "Solution": [
      [
        "C++",
        "C++/copy-list-with-random-pointer.cpp"
      ],
      [
        "Python",
        "Python/copy-list-with-random-pointer.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 139,
    "Title": "[Word Break](https://leetcode.com/problems/word-break/)",
    "Solution": [
      [
        "C++",
        "C++/word-break.cpp"
      ],
      [
        "Python",
        "Python/word-break.py"
      ]
    ],
    "Time": "_O(n * l^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 140,
    "Title": "[Word Break II](https://leetcode.com/problems/word-break-ii/)",
    "Solution": [
      [
        "C++",
        "C++/word-break-ii.cpp"
      ],
      [
        "Python",
        "Python/word-break-ii.py"
      ]
    ],
    "Time": "_O(n * l^2 + n * r)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 141,
    "Title": "[Linked List Cycle](https://leetcode.com/problems/linked-list-cycle/)",
    "Solution": [
      [
        "C++",
        "C++/linked-list-cycle.cpp"
      ],
      [
        "Python",
        "Python/linked-list-cycle.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 142,
    "Title": "[Linked List Cycle II](https://leetcode.com/problems/linked-list-cycle-ii/)",
    "Solution": [
      [
        "C++",
        "C++/linked-list-cycle-ii.cpp"
      ],
      [
        "Python",
        "Python/linked-list-cycle-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 143,
    "Title": "[Reorder List](https://leetcode.com/problems/reorder-list/)",
    "Solution": [
      [
        "C++",
        "C++/reorder-list.cpp"
      ],
      [
        "Python",
        "Python/reorder-list.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 144,
    "Title": "[Binary Tree Preorder Traversal](https://leetcode.com/problems/binary-tree-preorder-traversal/)",
    "Solution": [
      [
        "C++",
        "C++/binary-tree-preorder-traversal.cpp"
      ],
      [
        "Python",
        "Python/binary-tree-preorder-traversal.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 145,
    "Title": "[Binary Tree Postorder Traversal](https://leetcode.com/problems/binary-tree-postorder-traversal/)",
    "Solution": [
      [
        "C++",
        "C++/binary-tree-postorder-traversal.cpp"
      ],
      [
        "Python",
        "Python/binary-tree-postorder-traversal.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 146,
    "Title": "[LRU Cache](https://leetcode.com/problems/lru-cache/)",
    "Solution": [
      [
        "C++",
        "C++/lru-cache.cpp"
      ],
      [
        "Python",
        "Python/lru-cache.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(k)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 147,
    "Title": "[Insertion Sort List](https://leetcode.com/problems/insertion-sort-list/)",
    "Solution": [
      [
        "C++",
        "C++/insertion-sort-list.cpp"
      ],
      [
        "Python",
        "Python/insertion-sort-list.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 148,
    "Title": "[Sort List](https://leetcode.com/problems/sort-list/)",
    "Solution": [
      [
        "C++",
        "C++/sort-list.cpp"
      ],
      [
        "Python",
        "Python/sort-list.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(logn)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 149,
    "Title": "[Max Points on a Line](https://leetcode.com/problems/max-points-on-a-line/)",
    "Solution": [
      [
        "C++",
        "C++/max-points-on-a-line.cpp"
      ],
      [
        "Python",
        "Python/max-points-on-a-line.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 150,
    "Title": "[Evaluate Reverse Polish Notation](https://leetcode.com/problems/evaluate-reverse-polish-notation/)",
    "Solution": [
      [
        "C++",
        "C++/evaluate-reverse-polish-notation.cpp"
      ],
      [
        "Python",
        "Python/evaluate-reverse-polish-notation.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 151,
    "Title": "[Reverse Words in a String](https://leetcode.com/problems/reverse-words-in-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/reverse-words-in-a-string.cpp"
      ],
      [
        "Python",
        "Python/reverse-words-in-a-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 152,
    "Title": "[Maximum Product Subarray](https://leetcode.com/problems/maximum-product-subarray/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-product-subarray.cpp"
      ],
      [
        "Python",
        "Python/maximum-product-subarray.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 153,
    "Title": "[Find Minimum in Rotated Sorted Array](https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/)",
    "Solution": [
      [
        "C++",
        "C++/find-minimum-in-rotated-sorted-array.cpp"
      ],
      [
        "Python",
        "Python/find-minimum-in-rotated-sorted-array.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 154,
    "Title": "[Find Minimum in Rotated Sorted Array II](https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/)",
    "Solution": [
      [
        "C++",
        "C++/find-minimum-in-rotated-sorted-array-ii.cpp"
      ],
      [
        "Python",
        "Python/find-minimum-in-rotated-sorted-array-ii.py"
      ]
    ],
    "Time": "_O(logn)_ ~ _O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 155,
    "Title": "[Min Stack](https://leetcode.com/problems/min-stack/)",
    "Solution": [
      [
        "C++",
        "C++/min-stack.cpp"
      ],
      [
        "Python",
        "Python/min-stack.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 156,
    "Title": "[Binary Tree Upside Down](https://leetcode.com/problems/binary-tree-upside-down/)",
    "Solution": [
      [
        "Python",
        "Python/binary-tree-upside-down.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 157,
    "Title": "[Read N Characters Given Read4](https://leetcode.com/problems/read-n-characters-given-read4/)",
    "Solution": [
      [
        "C++",
        "C++/read-n-characters-given-read4.cpp"
      ],
      [
        "Python",
        "Python/read-n-characters-given-read4.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒"
  },
  {
    "Index": 158,
    "Title": "[Read N Characters Given Read4 II - Call multiple times](https://leetcode.com/problems/read-n-characters-given-read4-ii-call-multiple-times/)",
    "Solution": [
      [
        "C++",
        "C++/read-n-characters-given-read4-ii-call-multiple-times.cpp"
      ],
      [
        "Python",
        "Python/read-n-characters-given-read4-ii-call-multiple-times.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 159,
    "Title": "[Longest Substring with At Most Two Distinct Characters](https://leetcode.com/problems/longest-substring-with-at-most-two-distinct-characters/)",
    "Solution": [
      [
        "C++",
        "C++/longest-substring-with-at-most-two-distinct-characters.cpp"
      ],
      [
        "Python",
        "Python/longest-substring-with-at-most-two-distinct-characters.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 160,
    "Title": "[Intersection of Two Linked Lists](https://leetcode.com/problems/intersection-of-two-linked-lists/)",
    "Solution": [
      [
        "C++",
        "C++/intersection-of-two-linked-lists.cpp"
      ],
      [
        "Python",
        "Python/intersection-of-two-linked-lists.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 161,
    "Title": "[One Edit Distance](https://leetcode.com/problems/one-edit-distance/)",
    "Solution": [
      [
        "C++",
        "C++/one-edit-distance.cpp"
      ],
      [
        "Python",
        "Python/one-edit-distance.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 162,
    "Title": "[Find Peak Element](https://leetcode.com/problems/find-peak-element/)",
    "Solution": [
      [
        "C++",
        "C++/find-peak-element.cpp"
      ],
      [
        "Python",
        "Python/find-peak-element.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 163,
    "Title": "[Missing Ranges](https://leetcode.com/problems/missing-ranges/)",
    "Solution": [
      [
        "C++",
        "C++/missing-ranges.cpp"
      ],
      [
        "Python",
        "Python/missing-ranges.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 164,
    "Title": "[Maximum Gap](https://leetcode.com/problems/maximum-gap/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-gap.cpp"
      ],
      [
        "Python",
        "Python/maximum-gap.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 165,
    "Title": "[Compare Version Numbers](https://leetcode.com/problems/compare-version-numbers/)",
    "Solution": [
      [
        "C++",
        "C++/compare-version-numbers.cpp"
      ],
      [
        "Python",
        "Python/compare-version-numbers.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 166,
    "Title": "[Fraction to Recurring Decimal](https://leetcode.com/problems/fraction-to-recurring-decimal/)",
    "Solution": [
      [
        "C++",
        "C++/fraction-to-recurring-decimal.cpp"
      ],
      [
        "Python",
        "Python/fraction-to-recurring-decimal.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 167,
    "Title": "[Two Sum II - Input array is sorted](https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/)",
    "Solution": [
      [
        "C++",
        "C++/two-sum-ii-input-array-is-sorted.cpp"
      ],
      [
        "Python",
        "Python/two-sum-ii-input-array-is-sorted.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 168,
    "Title": "[Excel Sheet Column Title](https://leetcode.com/problems/excel-sheet-column-title/)",
    "Solution": [
      [
        "C++",
        "C++/excel-sheet-column-title.cpp"
      ],
      [
        "Python",
        "Python/excel-sheet-column-title.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 169,
    "Title": "[Majority Element](https://leetcode.com/problems/majority-element/)",
    "Solution": [
      [
        "C++",
        "C++/majority-element.cpp"
      ],
      [
        "Python",
        "Python/majority-element.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 170,
    "Title": "[Two Sum III - Data structure design](https://leetcode.com/problems/two-sum-iii-data-structure-design/)",
    "Solution": [
      [
        "C++",
        "C++/two-sum-iii-data-structure-design.cpp"
      ],
      [
        "Python",
        "Python/two-sum-iii-data-structure-design.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒"
  },
  {
    "Index": 171,
    "Title": "[Excel Sheet Column Number](https://leetcode.com/problems/excel-sheet-column-number/)",
    "Solution": [
      [
        "C++",
        "C++/excel-sheet-column-number.cpp"
      ],
      [
        "Python",
        "Python/excel-sheet-column-number.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 172,
    "Title": "[Factorial Trailing Zeroes](https://leetcode.com/problems/factorial-trailing-zeroes/)",
    "Solution": [
      [
        "C++",
        "C++/factorial-trailing-zeroes.cpp"
      ],
      [
        "Python",
        "Python/factorial-trailing-zeroes.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 173,
    "Title": "[Binary Search Tree Iterator](https://leetcode.com/problems/binary-search-tree-iterator/)",
    "Solution": [
      [
        "C++",
        "C++/binary-search-tree-iterator.cpp"
      ],
      [
        "Python",
        "Python/binary-search-tree-iterator.py"
      ]
    ],
    "Time": "_O(1)_, amortized",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 174,
    "Title": "[Dungeon Game](https://leetcode.com/problems/dungeon-game/)",
    "Solution": [
      [
        "Python",
        "Python/dungeon-game.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 175,
    "Title": "[Combine Two Tables](https://leetcode.com/problems/combine-two-tables/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/combine-two-tables.sql"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 176,
    "Title": "[Second Highest Salary](https://leetcode.com/problems/second-highest-salary/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/second-highest-salary.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 177,
    "Title": "[Nth Highest Salary](https://leetcode.com/problems/nth-highest-salary/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/nth-highest-salary.sql"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 178,
    "Title": "[Rank Scores](https://leetcode.com/problems/rank-scores/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/rank-scores.sql"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 179,
    "Title": "[Largest Number](https://leetcode.com/problems/largest-number/)",
    "Solution": [
      [
        "C++",
        "C++/largest-number.cpp"
      ],
      [
        "Python",
        "Python/largest-number.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 180,
    "Title": "[Consecutive Numbers](https://leetcode.com/problems/consecutive-numbers/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/consecutive-numbers.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 181,
    "Title": "[Employees Earning More Than Their Managers](https://leetcode.com/problems/employees-earning-more-than-their-managers/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/employees-earning-more-than-their-managers.sql"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 182,
    "Title": "[Duplicate Emails](https://leetcode.com/problems/duplicate-emails/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/duplicate-emails.sql"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 183,
    "Title": "[Customers Who Never Order](https://leetcode.com/problems/customers-who-never-order/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/customers-who-never-order.sql"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 184,
    "Title": "[Department Highest Salary](https://leetcode.com/problems/department-highest-salary/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/department-highest-salary.sql"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 185,
    "Title": "[Department Top Three Salaries](https://leetcode.com/problems/department-top-three-salaries/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/department-top-three-salaries.sql"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 186,
    "Title": "[Reverse Words in a String II](https://leetcode.com/problems/reverse-words-in-a-string-ii/)",
    "Solution": [
      [
        "C++",
        "C++/reverse-words-in-a-string-ii.cpp"
      ],
      [
        "Python",
        "Python/reverse-words-in-a-string-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 187,
    "Title": "[Repeated DNA Sequences](https://leetcode.com/problems/repeated-dna-sequences/)",
    "Solution": [
      [
        "Python",
        "Python/repeated-dna-sequences.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 188,
    "Title": "[Best Time to Buy and Sell Stock IV](https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/)",
    "Solution": [
      [
        "C++",
        "C++/best-time-to-buy-and-sell-stock-iv.cpp"
      ],
      [
        "Python",
        "Python/best-time-to-buy-and-sell-stock-iv.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 189,
    "Title": "[Rotate Array](https://leetcode.com/problems/rotate-array/)",
    "Solution": [
      [
        "C++",
        "C++/rotate-array.cpp"
      ],
      [
        "Python",
        "Python/rotate-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 190,
    "Title": "[Reverse Bits](https://leetcode.com/problems/reverse-bits/)",
    "Solution": [
      [
        "C++",
        "C++/reverse-bits.cpp"
      ],
      [
        "Python",
        "Python/reverse-bits.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 191,
    "Title": "[Number of 1 Bits](https://leetcode.com/problems/number-of-1-bits/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-1-bits.cpp"
      ],
      [
        "Python",
        "Python/number-of-1-bits.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 192,
    "Title": "[Word Frequency](https://leetcode.com/problems/word-frequency/)",
    "Solution": [
      [
        "Shell",
        "Shell/word-frequency.sh"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 193,
    "Title": "[Valid Phone Numbers](https://leetcode.com/problems/valid-phone-numbers/)",
    "Solution": [
      [
        "Shell",
        "Shell/valid-phone-numbers.sh"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 194,
    "Title": "[Transpose File](https://leetcode.com/problems/transpose-file/)",
    "Solution": [
      [
        "Shell",
        "Shell/transpose-file.sh"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 195,
    "Title": "[Tenth Line](https://leetcode.com/problems/tenth-line/)",
    "Solution": [
      [
        "Shell",
        "Shell/tenth-line.sh"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 196,
    "Title": "[Delete Duplicate Emails](https://leetcode.com/problems/delete-duplicate-emails/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/delete-duplicate-emails.sql"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 197,
    "Title": "[Rising Temperature](https://leetcode.com/problems/rising-temperature/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/rising-temperature.sql"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 198,
    "Title": "[House Robber](https://leetcode.com/problems/house-robber/)",
    "Solution": [
      [
        "C++",
        "C++/house-robber.cpp"
      ],
      [
        "Python",
        "Python/house-robber.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 199,
    "Title": "[Binary Tree Right Side View](https://leetcode.com/problems/binary-tree-right-side-view/)",
    "Solution": [
      [
        "Python",
        "Python/binary-tree-right-side-view.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 200,
    "Title": "[Number of Islands](https://leetcode.com/problems/number-of-islands/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-islands.cpp"
      ],
      [
        "Python",
        "Python/number-of-islands.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 201,
    "Title": "[Bitwise AND of Numbers Range](https://leetcode.com/problems/bitwise-and-of-numbers-range/)",
    "Solution": [
      [
        "C++",
        "C++/bitwise-and-of-numbers-range.cpp"
      ],
      [
        "Python",
        "Python/bitwise-and-of-numbers-range.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 202,
    "Title": "[Happy Number](https://leetcode.com/problems/happy-number/)",
    "Solution": [
      [
        "C++",
        "C++/happy-number.cpp"
      ],
      [
        "Python",
        "Python/happy-number.py"
      ]
    ],
    "Time": "_O(k)_",
    "Space": "_O(k)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 203,
    "Title": "[Remove Linked List Elements](https://leetcode.com/problems/remove-linked-list-elements/)",
    "Solution": [
      [
        "C++",
        "C++/remove-linked-list-elements.cpp"
      ],
      [
        "Python",
        "Python/remove-linked-list-elements.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 204,
    "Title": "[Count Primes](https://leetcode.com/problems/count-primes/)",
    "Solution": [
      [
        "C++",
        "C++/count-primes.cpp"
      ],
      [
        "Python",
        "Python/count-primes.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 205,
    "Title": "[Isomorphic Strings](https://leetcode.com/problems/isomorphic-strings/)",
    "Solution": [
      [
        "C++",
        "C++/isomorphic-strings.cpp"
      ],
      [
        "Python",
        "Python/isomorphic-strings.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 206,
    "Title": "[Reverse Linked List](https://leetcode.com/problems/reverse-linked-list/)",
    "Solution": [
      [
        "C++",
        "C++/reverse-linked-list.cpp"
      ],
      [
        "Python",
        "Python/reverse-linked-list.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 207,
    "Title": "[Course Schedule](https://leetcode.com/problems/course-schedule/)",
    "Solution": [
      [
        "C++",
        "C++/course-schedule.cpp"
      ],
      [
        "Python",
        "Python/course-schedule.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "V\\",
    "Difficulty": "+ \\",
    "Tag": "E\\",
    "Note": ")_"
  },
  {
    "Index": 208,
    "Title": "[Implement Trie (Prefix Tree)](https://leetcode.com/problems/implement-trie-prefix-tree/)",
    "Solution": [
      [
        "C++",
        "C++/implement-trie-prefix-tree.cpp"
      ],
      [
        "Python",
        "Python/implement-trie-prefix-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 209,
    "Title": "[Minimum Size Subarray Sum](https://leetcode.com/problems/minimum-size-subarray-sum/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-size-subarray-sum.cpp"
      ],
      [
        "Python",
        "Python/minimum-size-subarray-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 210,
    "Title": "[Course Schedule II](https://leetcode.com/problems/course-schedule-ii/)",
    "Solution": [
      [
        "C++",
        "C++/course-schedule-ii.cpp"
      ],
      [
        "Python",
        "Python/course-schedule-ii.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "V\\",
    "Difficulty": "+ \\",
    "Tag": "E\\",
    "Note": ")_"
  },
  {
    "Index": 211,
    "Title": "[Add and Search Word - Data structure design](https://leetcode.com/problems/add-and-search-word-data-structure-design/)",
    "Solution": [
      [
        "C++",
        "C++/add-and-search-word-data-structure-design.cpp"
      ],
      [
        "Python",
        "Python/add-and-search-word-data-structure-design.py"
      ]
    ],
    "Time": "_O(min(n, h))_",
    "Space": "_O(min(n, h))_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 212,
    "Title": "[Word Search II](https://leetcode.com/problems/word-search-ii/)",
    "Solution": [
      [
        "C++",
        "C++/word-search-ii.cpp"
      ],
      [
        "Python",
        "Python/word-search-ii.py"
      ]
    ],
    "Time": "_O(m * n * 3^h)_",
    "Space": "_O(t)_",
    "Difficulty": "Hard",
    "Tag": "LintCode"
  },
  {
    "Index": 213,
    "Title": "[House Robber II](https://leetcode.com/problems/house-robber-ii/)",
    "Solution": [
      [
        "C++",
        "C++/house-robber-ii.cpp"
      ],
      [
        "Python",
        "Python/house-robber-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 214,
    "Title": "[Shortest Palindrome](https://leetcode.com/problems/shortest-palindrome/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-palindrome.cpp"
      ],
      [
        "Python",
        "Python/shortest-palindrome.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 215,
    "Title": "[Kth Largest Element in an Array](https://leetcode.com/problems/kth-largest-element-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/kth-largest-element-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/kth-largest-element-in-an-array.py"
      ]
    ],
    "Time": "_O(n)_ on average",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "EPI"
  },
  {
    "Index": 216,
    "Title": "[Combination Sum III](https://leetcode.com/problems/combination-sum-iii/)",
    "Solution": [
      [
        "C++",
        "C++/combination-sum-iii.cpp"
      ],
      [
        "Python",
        "Python/combination-sum-iii.py"
      ]
    ],
    "Time": "_O(k * C(n, k))_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 217,
    "Title": "[Contains Duplicate](https://leetcode.com/problems/contains-duplicate/)",
    "Solution": [
      [
        "C++",
        "C++/contains-duplicate.cpp"
      ],
      [
        "Python",
        "Python/contains-duplicate.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 218,
    "Title": "[The Skyline Problem](https://leetcode.com/problems/the-skyline-problem/)",
    "Solution": [
      [
        "C++",
        "C++/the-skyline-problem.cpp"
      ],
      [
        "Python",
        "Python/the-skyline-problem.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Sort, BST"
  },
  {
    "Index": 219,
    "Title": "[Contains Duplicate II](https://leetcode.com/problems/contains-duplicate-ii/)",
    "Solution": [
      [
        "C++",
        "C++/contains-duplicate-ii.cpp"
      ],
      [
        "Python",
        "Python/contains-duplicate-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 220,
    "Title": "[Contains Duplicate III](https://leetcode.com/problems/contains-duplicate-iii/)",
    "Solution": [
      [
        "C++",
        "C++/contains-duplicate-iii.cpp"
      ],
      [
        "Python",
        "Python/contains-duplicate-iii.py"
      ]
    ],
    "Time": "_O(nlogk)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 221,
    "Title": "[Maximal Square](https://leetcode.com/problems/maximal-square/)",
    "Solution": [
      [
        "C++",
        "C++/maximal-square.cpp"
      ],
      [
        "Python",
        "Python/maximal-square.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "EPI"
  },
  {
    "Index": 222,
    "Title": "[Count Complete Tree Nodes](https://leetcode.com/problems/count-complete-tree-nodes/)",
    "Solution": [
      [
        "C++",
        "C++/count-complete-tree-nodes.cpp"
      ],
      [
        "Python",
        "Python/count-complete-tree-nodes.py"
      ]
    ],
    "Time": "_O((logn)^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 223,
    "Title": "[Rectangle Area](https://leetcode.com/problems/rectangle-area/)",
    "Solution": [
      [
        "C++",
        "C++/rectangle-area.cpp"
      ],
      [
        "Python",
        "Python/rectangle-area.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 224,
    "Title": "[Basic Calculator](https://leetcode.com/problems/basic-calculator/)",
    "Solution": [
      [
        "C++",
        "C++/basic-calculator.cpp"
      ],
      [
        "Python",
        "Python/basic-calculator.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 225,
    "Title": "[Implement Stack using Queues](https://leetcode.com/problems/implement-stack-using-queues/)",
    "Solution": [
      [
        "C++",
        "C++/implement-stack-using-queues.cpp"
      ],
      [
        "Python",
        "Python/implement-stack-using-queues.py"
      ]
    ],
    "Time": "push: _O(n)_, pop: _O(1)_, top: _O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 226,
    "Title": "[Invert Binary Tree](https://leetcode.com/problems/invert-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/invert-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/invert-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_, _O(w)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 227,
    "Title": "[Basic Calculator II](https://leetcode.com/problems/basic-calculator-ii/)",
    "Solution": [
      [
        "C++",
        "C++/basic-calculator-ii.cpp"
      ],
      [
        "Python",
        "Python/basic-calculator-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 228,
    "Title": "[Summary Ranges](https://leetcode.com/problems/summary-ranges/)",
    "Solution": [
      [
        "C++",
        "C++/summary-ranges.cpp"
      ],
      [
        "Python",
        "Python/summary-ranges.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 229,
    "Title": "[Majority Element II](https://leetcode.com/problems/majority-element-ii/)",
    "Solution": [
      [
        "C++",
        "C++/majority-element-ii.cpp"
      ],
      [
        "Python",
        "Python/majority-element-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 230,
    "Title": "[Kth Smallest Element in a BST](https://leetcode.com/problems/kth-smallest-element-in-a-bst/)",
    "Solution": [
      [
        "C++",
        "C++/kth-smallest-element-in-a-bst.cpp"
      ],
      [
        "Python",
        "Python/kth-smallest-element-in-a-bst.py"
      ]
    ],
    "Time": "_O(max(h, k))_",
    "Space": "_O(min(h, k))_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 231,
    "Title": "[Power of Two](https://leetcode.com/problems/power-of-two/)",
    "Solution": [
      [
        "C++",
        "C++/power-of-two.cpp"
      ],
      [
        "Python",
        "Python/power-of-two.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "LintCode"
  },
  {
    "Index": 232,
    "Title": "[Implement Queue using Stacks](https://leetcode.com/problems/implement-queue-using-stacks/)",
    "Solution": [
      [
        "C++",
        "C++/implement-queue-using-stacks.cpp"
      ],
      [
        "Python",
        "Python/implement-queue-using-stacks.py"
      ]
    ],
    "Time": "_O(1), amortized_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "EPI, LintCode"
  },
  {
    "Index": 233,
    "Title": "[Number of Digit One](https://leetcode.com/problems/number-of-digit-one/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-digit-one.cpp"
      ],
      [
        "Python",
        "Python/number-of-digit-one.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": "CTCI, LintCode"
  },
  {
    "Index": 234,
    "Title": "[Palindrome Linked List](https://leetcode.com/problems/palindrome-linked-list/)",
    "Solution": [
      [
        "C++",
        "C++/palindrome-linked-list.cpp"
      ],
      [
        "Python",
        "Python/palindrome-linked-list.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 235,
    "Title": "[Lowest Common Ancestor of a Binary Search Tree](https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/)",
    "Solution": [
      [
        "C++",
        "C++/lowest-common-ancestor-of-a-binary-search-tree.cpp"
      ],
      [
        "Python",
        "Python/lowest-common-ancestor-of-a-binary-search-tree.py"
      ]
    ],
    "Time": "_O(h)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "EPI"
  },
  {
    "Index": 236,
    "Title": "[Lowest Common Ancestor of a Binary Tree](https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/lowest-common-ancestor-of-a-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/lowest-common-ancestor-of-a-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": "EPI"
  },
  {
    "Index": 237,
    "Title": "[Delete Node in a Linked List](https://leetcode.com/problems/delete-node-in-a-linked-list/)",
    "Solution": [
      [
        "C++",
        "C++/delete-node-in-a-linked-list.cpp"
      ],
      [
        "Python",
        "Python/delete-node-in-a-linked-list.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "LintCode"
  },
  {
    "Index": 238,
    "Title": "[Product of Array Except Self](https://leetcode.com/problems/product-of-array-except-self/)",
    "Solution": [
      [
        "C++",
        "C++/product-of-array-except-self.cpp"
      ],
      [
        "Python",
        "Python/product-of-array-except-self.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "LintCode"
  },
  {
    "Index": 239,
    "Title": "[Sliding Window Maximum](https://leetcode.com/problems/sliding-window-maximum/)",
    "Solution": [
      [
        "C++",
        "C++/sliding-window-maximum.cpp"
      ],
      [
        "Python",
        "Python/sliding-window-maximum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(k)_",
    "Difficulty": "Hard",
    "Tag": "EPI, LintCode",
    "Note": "Mono Deque"
  },
  {
    "Index": 240,
    "Title": "[Search a 2D Matrix II](https://leetcode.com/problems/search-a-2d-matrix-ii/)",
    "Solution": [
      [
        "C++",
        "C++/search-a-2d-matrix-ii.cpp"
      ],
      [
        "Python",
        "Python/search-a-2d-matrix-ii.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "EPI, LintCode"
  },
  {
    "Index": 241,
    "Title": "[Different Ways to Add Parentheses](https://leetcode.com/problems/different-ways-to-add-parentheses/)",
    "Solution": [
      [
        "C++",
        "C++/different-ways-to-add-parentheses.cpp"
      ],
      [
        "Python",
        "Python/different-ways-to-add-parentheses.py"
      ]
    ],
    "Time": "_O(n * 4^n / n^(3/2))_",
    "Space": "_O(n * 4^n / n^(3/2))_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 242,
    "Title": "[Valid Anagram](https://leetcode.com/problems/valid-anagram/)",
    "Solution": [
      [
        "C++",
        "C++/valid-anagram.cpp"
      ],
      [
        "Python",
        "Python/valid-anagram.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "LintCode"
  },
  {
    "Index": 243,
    "Title": "[Shortest Word Distance](https://leetcode.com/problems/shortest-word-distance/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-word-distance.cpp"
      ],
      [
        "Python",
        "Python/shortest-word-distance.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 244,
    "Title": "[Shortest Word Distance II](https://leetcode.com/problems/shortest-word-distance-ii/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-word-distance-ii.cpp"
      ],
      [
        "Python",
        "Python/shortest-word-distance-ii.py"
      ]
    ],
    "Time": "ctor: _O(n)_, lookup: _O(a + b)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 245,
    "Title": "[Shortest Word Distance III](https://leetcode.com/problems/shortest-word-distance-iii/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-word-distance-iii.cpp"
      ],
      [
        "Python",
        "Python/shortest-word-distance-iii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 246,
    "Title": "[Strobogrammatic Number](https://leetcode.com/problems/strobogrammatic-number/)",
    "Solution": [
      [
        "C++",
        "C++/strobogrammatic-number.cpp"
      ],
      [
        "Python",
        "Python/strobogrammatic-number.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 247,
    "Title": "[Strobogrammatic Number II](https://leetcode.com/problems/strobogrammatic-number-ii/)",
    "Solution": [
      [
        "C++",
        "C++/strobogrammatic-number-ii.cpp"
      ],
      [
        "Python",
        "Python/strobogrammatic-number-ii.py"
      ]
    ],
    "Time": "_O(n * 5^(n/2))_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 248,
    "Title": "[Strobogrammatic Number III](https://leetcode.com/problems/strobogrammatic-number-iii/)",
    "Solution": [
      [
        "C++",
        "C++/strobogrammatic-number-iii.cpp"
      ],
      [
        "Python",
        "Python/strobogrammatic-number-iii.py"
      ]
    ],
    "Time": "_O(5^(n/2))_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 249,
    "Title": "[Group Shifted Strings](https://leetcode.com/problems/group-shifted-strings/)",
    "Solution": [
      [
        "C++",
        "C++/group-shifted-strings.cpp"
      ],
      [
        "Python",
        "Python/group-shifted-strings.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 250,
    "Title": "[Count Univalue Subtrees](https://leetcode.com/problems/count-univalue-subtrees)",
    "Solution": [
      [
        "C++",
        "C++/count-univalue-subtrees.cpp"
      ],
      [
        "Python",
        "Python/count-univalue-subtrees.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 251,
    "Title": "[Flatten 2D Vector](https://leetcode.com/problems/flatten-2d-vector/)",
    "Solution": [
      [
        "C++",
        "C++/flatten-2d-vector.cpp"
      ],
      [
        "Python",
        "Python/flatten-2d-vector.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 252,
    "Title": "[Meeting Rooms](https://leetcode.com/problems/meeting-rooms/)",
    "Solution": [
      [
        "C++",
        "C++/meeting-rooms.cpp"
      ],
      [
        "Python",
        "Python/meeting-rooms.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 253,
    "Title": "[Meeting Rooms II](https://leetcode.com/problems/meeting-rooms-ii/)",
    "Solution": [
      [
        "C++",
        "C++/meeting-rooms-ii.cpp"
      ],
      [
        "Python",
        "Python/meeting-rooms-ii.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 254,
    "Title": "[Factor Combinations](https://leetcode.com/problems/factor-combinations/)",
    "Solution": [
      [
        "C++",
        "C++/factor-combinations.cpp"
      ],
      [
        "Python",
        "Python/factor-combinations.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(logn)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 255,
    "Title": "[Verify Preorder Sequence in Binary Search Tree](https://leetcode.com/problems/verify-preorder-sequence-in-binary-search-tree/)",
    "Solution": [
      [
        "C++",
        "C++/verify-preorder-sequence-in-binary-search-tree.cpp"
      ],
      [
        "Python",
        "Python/verify-preorder-sequence-in-binary-search-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 256,
    "Title": "[Paint House](https://leetcode.com/problems/paint-house/)",
    "Solution": [
      [
        "C++",
        "C++/paint-house.cpp"
      ],
      [
        "Python",
        "Python/paint-house.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 257,
    "Title": "[Binary Tree Paths](https://leetcode.com/problems/binary-tree-paths/)",
    "Solution": [
      [
        "C++",
        "C++/binary-tree-paths.cpp"
      ],
      [
        "Python",
        "Python/binary-tree-paths.py"
      ]
    ],
    "Time": "_O(n * h)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 258,
    "Title": "[Add Digits](https://leetcode.com/problems/add-digits/)",
    "Solution": [
      [
        "C++",
        "C++/add-digits.cpp"
      ],
      [
        "Python",
        "Python/add-digits.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 259,
    "Title": "[3Sum Smaller](https://leetcode.com/problems/3sum-smaller/)",
    "Solution": [
      [
        "C++",
        "C++/3sum-smaller.cpp"
      ],
      [
        "Python",
        "Python/3sum-smaller.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒, LintCode"
  },
  {
    "Index": 260,
    "Title": "[Single Number III](https://leetcode.com/problems/single-number-iii/)",
    "Solution": [
      [
        "C++",
        "C++/single-number-iii.cpp"
      ],
      [
        "Python",
        "Python/single-number-iii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 261,
    "Title": "[Graph Valid Tree](https://leetcode.com/problems/graph-valid-tree/)",
    "Solution": [
      [
        "C++",
        "C++/graph-valid-tree.cpp"
      ],
      [
        "Python",
        "Python/graph-valid-tree.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "V\\",
    "Difficulty": "+ \\",
    "Tag": "E\\",
    "Note": ")_"
  },
  {
    "Index": 262,
    "Title": "[Trips and Users](https://leetcode.com/problems/trips-and-users/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/trips-and-users.sql"
      ]
    ],
    "Time": "_O((t * u) + tlogt)_",
    "Space": "_O(t)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 263,
    "Title": "[Ugly Number](https://leetcode.com/problems/ugly-number/)",
    "Solution": [
      [
        "C++",
        "C++/ugly-number.cpp"
      ],
      [
        "Python",
        "Python/ugly-number.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 264,
    "Title": "[Ugly Number II](https://leetcode.com/problems/ugly-number-ii/)",
    "Solution": [
      [
        "C++",
        "C++/ugly-number-ii.cpp"
      ],
      [
        "Python",
        "Python/ugly-number-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "CTCI, LintCode",
    "Note": "BST, Heap"
  },
  {
    "Index": 265,
    "Title": "[Paint House II](https://leetcode.com/problems/paint-house-ii/)",
    "Solution": [
      [
        "C++",
        "C++/paint-house-ii.cpp"
      ],
      [
        "Python",
        "Python/paint-house-ii.py"
      ]
    ],
    "Time": "_O(n * k)_",
    "Space": "_O(k)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 266,
    "Title": "[Palindrome Permutation](https://leetcode.com/problems/palindrome-permutation/)",
    "Solution": [
      [
        "C++",
        "C++/palindrome-permutation.cpp"
      ],
      [
        "Python",
        "Python/palindrome-permutation.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 267,
    "Title": "[Palindrome Permutation II](https://leetcode.com/problems/palindrome-permutation-ii/)",
    "Solution": [
      [
        "C++",
        "C++/palindrome-permutation-ii.cpp"
      ],
      [
        "Python",
        "Python/palindrome-permutation-ii.py"
      ]
    ],
    "Time": "_O(n * n!)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 268,
    "Title": "[Missing Number](https://leetcode.com/problems/missing-number/)",
    "Solution": [
      [
        "C++",
        "C++/missing-number.cpp"
      ],
      [
        "Python",
        "Python/missing-number.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "LintCode",
    "Note": 0
  },
  {
    "Index": 269,
    "Title": "[Alien Dictionary](https://leetcode.com/problems/alien-dictionary/)",
    "Solution": [
      [
        "C++",
        "C++/alien-dictionary.cpp"
      ],
      [
        "Python",
        "Python/alien-dictionary.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Topological Sort, BFS, DFS"
  },
  {
    "Index": 270,
    "Title": "[Closest Binary Search Tree Value](https://leetcode.com/problems/closest-binary-search-tree-value/)",
    "Solution": [
      [
        "C++",
        "C++/closest-binary-search-tree-value.cpp"
      ],
      [
        "Python",
        "Python/closest-binary-search-tree-value.py"
      ]
    ],
    "Time": "_O(h)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒"
  },
  {
    "Index": 271,
    "Title": "[Encode and Decode Strings](https://leetcode.com/problems/encode-and-decode-strings/)",
    "Solution": [
      [
        "C++",
        "C++/encode-and-decode-strings.cpp"
      ],
      [
        "Python",
        "Python/encode-and-decode-strings.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 272,
    "Title": "[Closest Binary Search Tree Value II](https://leetcode.com/problems/closest-binary-search-tree-value-ii/)",
    "Solution": [
      [
        "C++",
        "C++/closest-binary-search-tree-value-ii.cpp"
      ],
      [
        "Python",
        "Python/closest-binary-search-tree-value-ii.py"
      ]
    ],
    "Time": "_O(h + k)_",
    "Space": "_O(h)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 273,
    "Title": "[Integer to English Words](https://leetcode.com/problems/integer-to-english-words/)",
    "Solution": [
      [
        "C++",
        "C++/integer-to-english-words.cpp"
      ],
      [
        "Python",
        "Python/integer-to-english-words.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 274,
    "Title": "[H-Index](https://leetcode.com/problems/h-index/)",
    "Solution": [
      [
        "C++",
        "C++/h-index.cpp"
      ],
      [
        "Python",
        "Python/h-index.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Counting Sort"
  },
  {
    "Index": 275,
    "Title": "[H-Index II](https://leetcode.com/problems/h-index-ii/)",
    "Solution": [
      [
        "C++",
        "C++/h-index-ii.cpp"
      ],
      [
        "Python",
        "Python/h-index-ii.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Binary Search"
  },
  {
    "Index": 276,
    "Title": "[Paint Fence](https://leetcode.com/problems/paint-fence/)",
    "Solution": [
      [
        "C++",
        "C++/paint-fence.cpp"
      ],
      [
        "Python",
        "Python/paint-fence.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 277,
    "Title": "[Find the Celebrity](https://leetcode.com/problems/find-the-celebrity/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-celebrity.cpp"
      ],
      [
        "Python",
        "Python/find-the-celebrity.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒, EPI",
    "Note": 0
  },
  {
    "Index": 278,
    "Title": "[First Bad Version](https://leetcode.com/problems/first-bad-version/)",
    "Solution": [
      [
        "C++",
        "C++/first-bad-version.cpp"
      ],
      [
        "Python",
        "Python/first-bad-version.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "LintCode",
    "Note": 0
  },
  {
    "Index": 279,
    "Title": "[Perfect Squares](https://leetcode.com/problems/perfect-squares/)",
    "Solution": [
      [
        "C++",
        "C++/perfect-squares.cpp"
      ],
      [
        "Python",
        "Python/perfect-squares.py"
      ]
    ],
    "Time": "_O(n * sqrt(n))_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Hash"
  },
  {
    "Index": 280,
    "Title": "[Wiggle Sort](https://leetcode.com/problems/wiggle-sort/)",
    "Solution": [
      [
        "C++",
        "C++/wiggle-sort.cpp"
      ],
      [
        "Python",
        "Python/wiggle-sort.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 281,
    "Title": "[Zigzag Iterator](https://leetcode.com/problems/zigzag-iterator/)",
    "Solution": [
      [
        "C++",
        "C++/zigzag-iterator.cpp"
      ],
      [
        "Python",
        "Python/zigzag-iterator.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 282,
    "Title": "[Expression Add Operators](https://leetcode.com/problems/expression-add-operators/)",
    "Solution": [
      [
        "C++",
        "C++/expression-add-operators.cpp"
      ],
      [
        "Python",
        "Python/expression-add-operators.py"
      ]
    ],
    "Time": "_O(4^n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 283,
    "Title": "[Move Zeroes](https://leetcode.com/problems/move-zeroes/)",
    "Solution": [
      [
        "C++",
        "C++/move-zeroes.cpp"
      ],
      [
        "Python",
        "Python/move-zeroes.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 284,
    "Title": "[Peeking Iterator](https://leetcode.com/problems/peeking-iterator/)",
    "Solution": [
      [
        "C++",
        "C++/peeking-iterator.cpp"
      ],
      [
        "Python",
        "Python/peeking-iterator.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 285,
    "Title": "[Inorder Successor in BST](https://leetcode.com/problems/inorder-successor-in-bst/)",
    "Solution": [
      [
        "C++",
        "C++/inorder-successor-in-bst.cpp"
      ],
      [
        "Python",
        "Python/inorder-successor-in-bst.py"
      ]
    ],
    "Time": "_O(h)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 286,
    "Title": "[Walls and Gates](https://leetcode.com/problems/walls-and-gates/)",
    "Solution": [
      [
        "C++",
        "C++/walls-and-gates.cpp"
      ],
      [
        "Python",
        "Python/walls-and-gates.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(g)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 287,
    "Title": "[Find the Duplicate Number](https://leetcode.com/problems/find-the-duplicate-number/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-duplicate-number.cpp"
      ],
      [
        "Python",
        "Python/find-the-duplicate-number.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Binary Search, Two Pointers"
  },
  {
    "Index": 288,
    "Title": "[Unique Word Abbreviation](https://leetcode.com/problems/unique-word-abbreviation/)",
    "Solution": [
      [
        "C++",
        "C++/unique-word-abbreviation.cpp"
      ],
      [
        "Python",
        "Python/unique-word-abbreviation.py"
      ]
    ],
    "Time": "ctor: _O(n)_, lookup: _O(1)_",
    "Space": "_O(k)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 289,
    "Title": "[Game of Life](https://leetcode.com/problems/game-of-life/)",
    "Solution": [
      [
        "C++",
        "C++/game-of-life.cpp"
      ],
      [
        "Python",
        "Python/game-of-life.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 290,
    "Title": "[Word Pattern](https://leetcode.com/problems/word-pattern/)",
    "Solution": [
      [
        "C++",
        "C++/word-pattern.cpp"
      ],
      [
        "Python",
        "Python/word-pattern.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(c)_",
    "Difficulty": "Easy",
    "Tag": "variant of [Isomorphic Strings](https://leetcode.com/problems/isomorphic-strings/)",
    "Note": 0
  },
  {
    "Index": 291,
    "Title": "[Word Pattern II](https://leetcode.com/problems/word-pattern-ii/)",
    "Solution": [
      [
        "C++",
        "C++/word-pattern-ii.cpp"
      ],
      [
        "Python",
        "Python/word-pattern-ii.py"
      ]
    ],
    "Time": "_O(n * C(n - 1, c - 1))_",
    "Space": "_O(n + c)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 292,
    "Title": "[Nim Game](https://leetcode.com/problems/nim-game/)",
    "Solution": [
      [
        "C++",
        "C++/nim-game.cpp"
      ],
      [
        "Python",
        "Python/nim-game.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "LintCode",
    "Note": 0
  },
  {
    "Index": 293,
    "Title": "[Flip Game](https://leetcode.com/problems/flip-game/)",
    "Solution": [
      [
        "C++",
        "C++/flip-game.cpp"
      ],
      [
        "Python",
        "Python/flip-game.py"
      ]
    ],
    "Time": "_O(n * (c+1))_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 294,
    "Title": "[Flip Game II](https://leetcode.com/problems/flip-game-ii/)",
    "Solution": [
      [
        "C++",
        "C++/flip-game-ii.cpp"
      ],
      [
        "Python",
        "Python/flip-game-ii.py"
      ]
    ],
    "Time": "_O(n + c^2)_",
    "Space": "_O(c)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "DP, Hash, `Sprague-Grundy Theorem`"
  },
  {
    "Index": 295,
    "Title": "[Find Median from Data Stream](https://leetcode.com/problems/find-median-from-data-stream/)",
    "Solution": [
      [
        "C++",
        "C++/find-median-from-data-stream.cpp"
      ],
      [
        "Python",
        "Python/find-median-from-data-stream.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "EPI, LintCode",
    "Note": "BST, Heap"
  },
  {
    "Index": 296,
    "Title": "[Best Meeting Point](https://leetcode.com/problems/best-meeting-point/)",
    "Solution": [
      [
        "C++",
        "C++/best-meeting-point.cpp"
      ],
      [
        "Python",
        "Python/best-meeting-point.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 297,
    "Title": "[Serialize and Deserialize Binary Tree](https://leetcode.com/problems/serialize-and-deserialize-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/serialize-and-deserialize-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/serialize-and-deserialize-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Hard",
    "Tag": "LintCode"
  },
  {
    "Index": 298,
    "Title": "[Binary Tree Longest Consecutive Sequence](https://leetcode.com/problems/binary-tree-longest-consecutive-sequence/)",
    "Solution": [
      [
        "C++",
        "C++/binary-tree-longest-consecutive-sequence.cpp"
      ],
      [
        "Python",
        "Python/binary-tree-longest-consecutive-sequence.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 299,
    "Title": "[Bulls and Cows](https://leetcode.com/problems/bulls-and-cows/)",
    "Solution": [
      [
        "C++",
        "C++/bulls-and-cows.cpp"
      ],
      [
        "Python",
        "Python/bulls-and-cows.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 300,
    "Title": "[Longest Increasing Subsequence](https://leetcode.com/problems/longest-increasing-subsequence/)",
    "Solution": [
      [
        "C++",
        "C++/longest-increasing-subsequence.cpp"
      ],
      [
        "Python",
        "Python/longest-increasing-subsequence.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "CTCI, LintCode",
    "Note": "Binary Search, BIT, Fenwick Tree, Segment Tree, DP"
  },
  {
    "Index": 301,
    "Title": "[Remove Invalid Parentheses](https://leetcode.com/problems/remove-invalid-parentheses/)",
    "Solution": [
      [
        "C++",
        "C++/remove-invalid-parentheses.cpp"
      ],
      [
        "Python",
        "Python/remove-invalid-parentheses.py"
      ]
    ],
    "Time": "_O(C(n, c))_",
    "Space": "_O(c)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 302,
    "Title": "[Smallest Rectangle Enclosing Black Pixels](https://leetcode.com/problems/smallest-rectangle-enclosing-black-pixels/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-rectangle-enclosing-black-pixels.cpp"
      ],
      [
        "Python",
        "Python/smallest-rectangle-enclosing-black-pixels.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 303,
    "Title": "[Range Sum Query - Immutable](https://leetcode.com/problems/range-sum-query-immutable/)",
    "Solution": [
      [
        "C++",
        "C++/range-sum-query-immutable.cpp"
      ],
      [
        "Python",
        "Python/range-sum-query-immutable.py"
      ]
    ],
    "Time": "ctor: _O(n)_, lookup: _O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 304,
    "Title": "[Range Sum Query 2D - Immutable](https://leetcode.com/problems/range-sum-query-2d-immutable/)",
    "Solution": [
      [
        "C++",
        "C++/range-sum-query-2d-immutable.cpp"
      ],
      [
        "Python",
        "Python/range-sum-query-2d-immutable.py"
      ]
    ],
    "Time": "ctor: _O(m * n)_, lookup: _O(1)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 305,
    "Title": "[Number of Islands II](https://leetcode.com/problems/number-of-islands-ii/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-islands-ii.cpp"
      ],
      [
        "Python",
        "Python/number-of-islands-ii.py"
      ]
    ],
    "Time": "_O(k)_",
    "Space": "_O(k)_",
    "Difficulty": "Hard",
    "Tag": "LintCode, 🔒"
  },
  {
    "Index": 306,
    "Title": "[Addictive Number](https://leetcode.com/problems/additive-number/)",
    "Solution": [
      [
        "C++",
        "C++/additive-number.cpp"
      ],
      [
        "Python",
        "Python/additive-number.py"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 307,
    "Title": "[Range Sum Query - Mutable](https://leetcode.com/problems/range-sum-query-mutable/)",
    "Solution": [
      [
        "C++",
        "C++/range-sum-query-mutable.cpp"
      ],
      [
        "Python",
        "Python/range-sum-query-mutable.py"
      ]
    ],
    "Time": "ctor: _O(n)_, update: _O(logn)_, query:  _O(logn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "LintCode"
  },
  {
    "Index": 308,
    "Title": "[Range Sum Query 2D - Mutable](https://leetcode.com/problems/range-sum-query-2d-mutable/)",
    "Solution": [
      [
        "C++",
        "C++/range-sum-query-2d-mutable.cpp"
      ],
      [
        "Python",
        "Python/range-sum-query-2d-mutable.py"
      ]
    ],
    "Time": "ctor: _O(m * n)_, update: _O(logm * logn)_, query:  _O(logm * logn)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 309,
    "Title": "[Best Time to Buy and Sell Stock with Cooldown](https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/)",
    "Solution": [
      [
        "C++",
        "C++/best-time-to-buy-and-sell-stock-with-cooldown.cpp"
      ],
      [
        "Python",
        "Python/best-time-to-buy-and-sell-stock-with-cooldown.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 310,
    "Title": "[Minimum Height Trees](https://leetcode.com/problems/minimum-height-trees/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-height-trees.cpp"
      ],
      [
        "Python",
        "Python/minimum-height-trees.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 311,
    "Title": "[Sparse Matrix Multiplication](https://leetcode.com/problems/sparse-matrix-multiplication/)",
    "Solution": [
      [
        "C++",
        "C++/sparse-matrix-multiplication.cpp"
      ],
      [
        "Python",
        "Python/sparse-matrix-multiplication.py"
      ]
    ],
    "Time": "_O(m * n * l)_",
    "Space": "_O(m * l)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 312,
    "Title": "[Burst Balloons](https://leetcode.com/problems/burst-balloons/)",
    "Solution": [
      [
        "C++",
        "C++/burst-balloons.cpp"
      ],
      [
        "Python",
        "Python/burst-balloons.py"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 313,
    "Title": "[Super Ugly Number](https://leetcode.com/problems/super-ugly-number/)",
    "Solution": [
      [
        "C++",
        "C++/super-ugly-number.cpp"
      ],
      [
        "Python",
        "Python/super-ugly-number.py"
      ]
    ],
    "Time": "_O(n * k)_",
    "Space": "_O(n + k)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "BST, Heap"
  },
  {
    "Index": 314,
    "Title": "[Binary Tree Vertical Order Traversal](https://leetcode.com/problems/binary-tree-vertical-order-traversal/)",
    "Solution": [
      [
        "C++",
        "C++/binary-tree-vertical-order-traversal.cpp"
      ],
      [
        "Python",
        "Python/binary-tree-vertical-order-traversal.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 315,
    "Title": "[Count of Smaller Numbers After Self](https://leetcode.com/problems/count-of-smaller-numbers-after-self/)",
    "Solution": [
      [
        "C++",
        "C++/count-of-smaller-numbers-after-self.cpp"
      ],
      [
        "Python",
        "Python/count-of-smaller-numbers-after-self.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "LintCode",
    "Note": "BST, BIT, Fenwick Tree, Divide and Conquer, Merge Sort"
  },
  {
    "Index": 316,
    "Title": "[Remove Duplicate Letters](https://leetcode.com/problems/remove-duplicate-letters/)",
    "Solution": [
      [
        "C++",
        "C++/remove-duplicate-letters.cpp"
      ],
      [
        "Python",
        "Python/remove-duplicate-letters.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Mono Stack"
  },
  {
    "Index": 317,
    "Title": "[Shortest Distance from All Buildings](https://leetcode.com/problems/shortest-distance-from-all-buildings/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-distance-from-all-buildings.cpp"
      ],
      [
        "Python",
        "Python/shortest-distance-from-all-buildings.py"
      ]
    ],
    "Time": "_O(k * m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 318,
    "Title": "[Maximum Product of Word Lengths](https://leetcode.com/problems/maximum-product-of-word-lengths/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-product-of-word-lengths.cpp"
      ],
      [
        "Python",
        "Python/maximum-product-of-word-lengths.py"
      ]
    ],
    "Time": "_O(n)_ ~ _O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Bit Manipulation, Counting Sort, Pruning"
  },
  {
    "Index": 319,
    "Title": "[Bulb Switcher](https://leetcode.com/problems/bulb-switcher/)",
    "Solution": [
      [
        "C++",
        "C++/bulb-switcher.cpp"
      ],
      [
        "Python",
        "Python/bulb-switcher.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 320,
    "Title": "[Generalized Abbreviation](https://leetcode.com/problems/generalized-abbreviation/)",
    "Solution": [
      [
        "C++",
        "C++/generalized-abbreviation.cpp"
      ],
      [
        "Python",
        "Python/generalized-abbreviation.py"
      ]
    ],
    "Time": "_O(n * 2^n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 321,
    "Title": "[Create Maximum Number](https://leetcode.com/problems/create-maximum-number/)",
    "Solution": [
      [
        "C++",
        "C++/create-maximum-number.cpp"
      ],
      [
        "Python",
        "Python/create-maximum-number.py"
      ]
    ],
    "Time": "_O(k * (m + n + k))_ ~ _O(k * (m + n + k^2))_",
    "Space": "_O(m + n + k^2)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Delete Digits](http://www.lintcode.com/en/problem/delete-digits/)"
  },
  {
    "Index": 322,
    "Title": "[Coin Change](https://leetcode.com/problems/coin-change/)",
    "Solution": [
      [
        "C++",
        "C++/coin-change.cpp"
      ],
      [
        "Python",
        "Python/coin-change.py"
      ]
    ],
    "Time": "_O(n * k)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 323,
    "Title": "[Number of Connected Components in an Undirected Graph](https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-connected-components-in-an-undirected-graph.cpp"
      ],
      [
        "Python",
        "Python/number-of-connected-components-in-an-undirected-graph.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 324,
    "Title": "[Wiggle Sort II](https://leetcode.com/problems/wiggle-sort-ii/)",
    "Solution": [
      [
        "C++",
        "C++/wiggle-sort-ii.cpp"
      ],
      [
        "Python",
        "Python/wiggle-sort-ii.py"
      ]
    ],
    "Time": "_O(n)_  on average",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Sort Colors](https://leetcode.com/problems/sort-colors/)",
    "Note": "Quick Select, Tri Partition"
  },
  {
    "Index": 325,
    "Title": "[Maximum Size Subarray Sum Equals k](https://leetcode.com/problems/maximum-size-subarray-sum-equals-k/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-size-subarray-sum-equals-k.cpp"
      ],
      [
        "Python",
        "Python/maximum-size-subarray-sum-equals-k.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 326,
    "Title": "[Power of Three](https://leetcode.com/problems/power-of-three/)",
    "Solution": [
      [
        "C++",
        "C++/power-of-three.cpp"
      ],
      [
        "Python",
        "Python/power-of-three.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 327,
    "Title": "[Count of Range Sum](https://leetcode.com/problems/count-of-range-sum/)",
    "Solution": [
      [
        "C++",
        "C++/count-of-range-sum.cpp"
      ],
      [
        "Python",
        "Python/count-of-range-sum.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 328,
    "Title": "[Odd Even Linked List](https://leetcode.com/problems/odd-even-linked-list/)",
    "Solution": [
      [
        "C++",
        "C++/odd-even-linked-list.cpp"
      ],
      [
        "Python",
        "Python/odd-even-linked-list.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 329,
    "Title": "[Longest Increasing Path in a Matrix](https://leetcode.com/problems/longest-increasing-path-in-a-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/longest-increasing-path-in-a-matrix.cpp"
      ],
      [
        "Python",
        "Python/longest-increasing-path-in-a-matrix.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "DFS, Topological Sort"
  },
  {
    "Index": 330,
    "Title": "[Patching Array](https://leetcode.com/problems/patching-array/)",
    "Solution": [
      [
        "C++",
        "C++/patching-array.cpp"
      ],
      [
        "Python",
        "Python/patching-array.py"
      ]
    ],
    "Time": "_O(s + logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 331,
    "Title": "[Verify Preorder Serialization of a Binary Tree](https://leetcode.com/problems/verify-preorder-serialization-of-a-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/verify-preorder-serialization-of-a-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/verify-preorder-serialization-of-a-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 332,
    "Title": "[Reconstruct Itinerary](https://leetcode.com/problems/reconstruct-itinerary/)",
    "Solution": [
      [
        "C++",
        "C++/reconstruct-itinerary.cpp"
      ],
      [
        "Python",
        "Python/reconstruct-itinerary.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "V\\",
    "Difficulty": "+ \\",
    "Tag": "E\\",
    "Note": "log\\"
  },
  {
    "Index": 333,
    "Title": "[Largest BST Subtree](https://leetcode.com/problems/largest-bst-subtree/)",
    "Solution": [
      [
        "C++",
        "C++/largest-bst-subtree.cpp"
      ],
      [
        "Python",
        "Python/largest-bst-subtree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 334,
    "Title": "[Increasing Triplet Subsequence](https://leetcode.com/problems/increasing-triplet-subsequence/)",
    "Solution": [
      [
        "C++",
        "C++/increasing-triplet-subsequence.cpp"
      ],
      [
        "Python",
        "Python/increasing-triplet-subsequence.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 335,
    "Title": "[Self Crossing](https://leetcode.com/problems/self-crossing/)",
    "Solution": [
      [
        "C++",
        "C++/self-crossing.cpp"
      ],
      [
        "Python",
        "Python/self-crossing.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 336,
    "Title": "[Palindrome Pairs](https://leetcode.com/problems/palindrome-pairs/)",
    "Solution": [
      [
        "C++",
        "C++/palindrome-pairs.cpp"
      ],
      [
        "Python",
        "Python/palindrome-pairs.py"
      ]
    ],
    "Time": "_O(n * k^2)_",
    "Space": "_O(n * k)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 337,
    "Title": "[House Robber III](https://leetcode.com/problems/house-robber-iii/)",
    "Solution": [
      [
        "C++",
        "C++/house-robber-iii.cpp"
      ],
      [
        "Python",
        "Python/house-robber-iii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 338,
    "Title": "[Counting Bits](https://leetcode.com/problems/counting-bits/)",
    "Solution": [
      [
        "C++",
        "C++/counting-bits.cpp"
      ],
      [
        "Python",
        "Python/counting-bits.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 339,
    "Title": "[Nested List Weight Sum](https://leetcode.com/problems/nested-list-weight-sum/)",
    "Solution": [
      [
        "C++",
        "C++/nested-list-weight-sum.cpp"
      ],
      [
        "Python",
        "Python/nested-list-weight-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 340,
    "Title": "[Longest Substring with At Most K Distinct Characters](https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/)",
    "Solution": [
      [
        "C++",
        "C++/longest-substring-with-at-most-k-distinct-characters.cpp"
      ],
      [
        "Python",
        "Python/longest-substring-with-at-most-k-distinct-characters.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 341,
    "Title": "[Flatten Nested List Iterator](https://leetcode.com/problems/flatten-nested-list-iterator/)",
    "Solution": [
      [
        "C++",
        "C++/flatten-nested-list-iterator.cpp"
      ],
      [
        "Python",
        "Python/flatten-nested-list-iterator.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Iterator"
  },
  {
    "Index": 342,
    "Title": "[Power of Four](https://leetcode.com/problems/power-of-four/)",
    "Solution": [
      [
        "C++",
        "C++/power-of-four.cpp"
      ],
      [
        "Python",
        "Python/power-of-four.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 343,
    "Title": "[Integer Break](https://leetcode.com/problems/integer-break/)",
    "Solution": [
      [
        "C++",
        "C++/integer-break.cpp"
      ],
      [
        "Python",
        "Python/integer-break.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Tricky, DP"
  },
  {
    "Index": 344,
    "Title": "[Reverse String](https://leetcode.com/problems/reverse-string/)",
    "Solution": [
      [
        "C++",
        "C++/reverse-string.cpp"
      ],
      [
        "Python",
        "Python/reverse-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 345,
    "Title": "[Reverse Vowels of a String](https://leetcode.com/problems/reverse-vowels-of-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/reverse-vowels-of-a-string.cpp"
      ],
      [
        "Python",
        "Python/reverse-vowels-of-a-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 346,
    "Title": "[Moving Average from Data Stream](https://leetcode.com/problems/moving-average-from-data-stream/)",
    "Solution": [
      [
        "C++",
        "C++/moving-average-from-data-stream.cpp"
      ],
      [
        "Python",
        "Python/moving-average-from-data-stream.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(w)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 347,
    "Title": "[Top K Frequent Elements](https://leetcode.com/problems/top-k-frequent-elements/)",
    "Solution": [
      [
        "C++",
        "C++/top-k-frequent-elements.cpp"
      ],
      [
        "Python",
        "Python/top-k-frequent-elements.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Quick Select, Heap, Bucket Sort"
  },
  {
    "Index": 348,
    "Title": "[Design Tic-Tac-Toe](https://leetcode.com/problems/design-tic-tac-toe/)",
    "Solution": [
      [
        "C++",
        "C++/design-tic-tac-toe.cpp"
      ],
      [
        "Python",
        "Python/design-tic-tac-toe.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 349,
    "Title": "[Intersection of Two Arrays](https://leetcode.com/problems/intersection-of-two-arrays/)",
    "Solution": [
      [
        "C++",
        "C++/intersection-of-two-arrays.cpp"
      ],
      [
        "Python",
        "Python/intersection-of-two-arrays.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(min(m, n))_",
    "Difficulty": "Easy",
    "Tag": "EPI"
  },
  {
    "Index": 350,
    "Title": "[Intersection of Two Arrays II](https://leetcode.com/problems/intersection-of-two-arrays-ii/)",
    "Solution": [
      [
        "C++",
        "C++/intersection-of-two-arrays-ii.cpp"
      ],
      [
        "Python",
        "Python/intersection-of-two-arrays-ii.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "EPI"
  },
  {
    "Index": 351,
    "Title": "[Android Unlock Patterns](https://leetcode.com/problems/android-unlock-patterns/)",
    "Solution": [
      [
        "C++",
        "C++/android-unlock-patterns.cpp"
      ],
      [
        "Python",
        "Python/android-unlock-patterns.py"
      ]
    ],
    "Time": "_O(9^2 * 2^9)_",
    "Space": "_O(9 * 2^9)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Backtracking"
  },
  {
    "Index": 352,
    "Title": "[Data Stream as Disjoint Intervals](https://leetcode.com/problems/data-stream-as-disjoint-intervals/)",
    "Solution": [
      [
        "C++",
        "C++/data-stream-as-disjoint-intervals.cpp"
      ],
      [
        "Python",
        "Python/data-stream-as-disjoint-intervals.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 353,
    "Title": "[Design Snake Game](https://leetcode.com/problems/design-snake-game/)",
    "Solution": [
      [
        "C++",
        "C++/design-snake-game.cpp"
      ],
      [
        "Python",
        "Python/design-snake-game.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(s)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Deque"
  },
  {
    "Index": 354,
    "Title": "[Russian Doll Envelopes](https://leetcode.com/problems/russian-doll-envelopes/)",
    "Solution": [
      [
        "C++",
        "C++/russian-doll-envelopes.cpp"
      ],
      [
        "Python",
        "Python/russian-doll-envelopes.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 355,
    "Title": "[Design Twitter](https://leetcode.com/problems/design-twitter/)",
    "Solution": [
      [
        "C++",
        "C++/design-twitter.cpp"
      ],
      [
        "Python",
        "Python/design-twitter.py"
      ]
    ],
    "Time": "_O(u + klogk)_",
    "Space": "_O(t + f)_",
    "Difficulty": "Medium",
    "Tag": "LintCode",
    "Note": "Heap"
  },
  {
    "Index": 356,
    "Title": "[Line Reflection](https://leetcode.com/problems/line-reflection/)",
    "Solution": [
      [
        "C++",
        "C++/line-reflection.cpp"
      ],
      [
        "Python",
        "Python/line-reflection.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Hash, Two Pointers"
  },
  {
    "Index": 357,
    "Title": "[Count Numbers with Unique Digits](https://leetcode.com/problems/count-numbers-with-unique-digits/)",
    "Solution": [
      [
        "C++",
        "C++/count-numbers-with-unique-digits.cpp"
      ],
      [
        "Python",
        "Python/count-numbers-with-unique-digits.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Backtracking, Math"
  },
  {
    "Index": 358,
    "Title": "[Rearrange String k Distance Apart](https://leetcode.com/problems/rearrange-string-k-distance-apart/)",
    "Solution": [
      [
        "C++",
        "C++/rearrange-string-k-distance-apart.cpp"
      ],
      [
        "Python",
        "Python/rearrange-string-k-distance-apart.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(c)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Greedy, Heap"
  },
  {
    "Index": 359,
    "Title": "[Logger Rate Limiter](https://leetcode.com/problems/logger-rate-limiter/)",
    "Solution": [
      [
        "C++",
        "C++/logger-rate-limiter.cpp"
      ],
      [
        "Python",
        "Python/logger-rate-limiter.py"
      ]
    ],
    "Time": "_O(1), amortized_",
    "Space": "_O(k)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": "Deque"
  },
  {
    "Index": 360,
    "Title": "[Sort Transformed Array](https://leetcode.com/problems/sort-transformed-array/)",
    "Solution": [
      [
        "C++",
        "C++/sort-transformed-array.cpp"
      ],
      [
        "Python",
        "Python/sort-transformed-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 361,
    "Title": "[Bomb Enemy](https://leetcode.com/problems/bomb-enemy/)",
    "Solution": [
      [
        "C++",
        "C++/bomb-enemy.cpp"
      ],
      [
        "Python",
        "Python/bomb-enemy.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 362,
    "Title": "[Design Hit Counter](https://leetcode.com/problems/design-hit-counter/)",
    "Solution": [
      [
        "C++",
        "C++/design-hit-counter.cpp"
      ],
      [
        "Python",
        "Python/design-hit-counter.py"
      ]
    ],
    "Time": "_O(1), amortized_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Deque"
  },
  {
    "Index": 363,
    "Title": "[Max Sum of Rectangle No Larger Than K](https://leetcode.com/problems/max-sum-of-sub-matrix-no-larger-than-k/)",
    "Solution": [
      [
        "C++",
        "C++/max-sum-of-sub-matrix-no-larger-than-k.cpp"
      ],
      [
        "Python",
        "Python/max-sum-of-sub-matrix-no-larger-than-k.py"
      ]
    ],
    "Time": "_O(min(m, n)^2 * max(m, n) * logn(max(m, n)))_",
    "Space": "_O(max(m, n))_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 364,
    "Title": "[Nested List Weight Sum II](https://leetcode.com/problems/nested-list-weight-sum-ii/)",
    "Solution": [
      [
        "C++",
        "C++/nested-list-weight-sum-ii.cpp"
      ],
      [
        "Python",
        "Python/nested-list-weight-sum-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 365,
    "Title": "[Water and Jug Problem](https://leetcode.com/problems/water-and-jug-problem/)",
    "Solution": [
      [
        "C++",
        "C++/water-and-jug-problem.cpp"
      ],
      [
        "Python",
        "Python/water-and-jug-problem.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "`Bézout's identity`"
  },
  {
    "Index": 366,
    "Title": "[Find Leaves of Binary Tree](https://leetcode.com/problems/find-leaves-of-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/find-leaves-of-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/find-leaves-of-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 367,
    "Title": "[Valid Perfect Square](https://leetcode.com/problems/valid-perfect-square/)",
    "Solution": [
      [
        "C++",
        "C++/valid-perfect-square.cpp"
      ],
      [
        "Python",
        "Python/valid-perfect-square.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 368,
    "Title": "[Largest Divisible Subset](https://leetcode.com/problems/largest-divisible-subset/)",
    "Solution": [
      [
        "C++",
        "C++/largest-divisible-subset.cpp"
      ],
      [
        "Python",
        "Python/largest-divisible-subset.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 369,
    "Title": "[Plus One Linked List](https://leetcode.com/problems/plus-one-linked-list/)",
    "Solution": [
      [
        "C++",
        "C++/plus-one-linked-list.cpp"
      ],
      [
        "Python",
        "Python/plus-one-linked-list.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Two Pointers"
  },
  {
    "Index": 370,
    "Title": "[Range Addition](https://leetcode.com/problems/range-addition/)",
    "Solution": [
      [
        "C++",
        "C++/range-addition.cpp"
      ],
      [
        "Python",
        "Python/range-addition.py"
      ]
    ],
    "Time": "_O(k + n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 371,
    "Title": "[Sum of Two Integers](https://leetcode.com/problems/sum-of-two-integers/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-two-integers.cpp"
      ],
      [
        "Python",
        "Python/sum-of-two-integers.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "LintCode"
  },
  {
    "Index": 372,
    "Title": "[Super Pow](https://leetcode.com/problems/super-pow/)",
    "Solution": [
      [
        "C++",
        "C++/super-pow.cpp"
      ],
      [
        "Python",
        "Python/super-pow.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 373,
    "Title": "[Find K Pairs with Smallest Sums](https://leetcode.com/problems/find-k-pairs-with-smallest-sums/)",
    "Solution": [
      [
        "C++",
        "C++/find-k-pairs-with-smallest-sums.cpp"
      ],
      [
        "Python",
        "Python/find-k-pairs-with-smallest-sums.py"
      ]
    ],
    "Time": "_O(k * log(min(n, m, k)))_",
    "Space": "_O(min(n, m, k))_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 374,
    "Title": "[Guess Number Higher or Lower](https://leetcode.com/problems/guess-number-higher-or-lower/)",
    "Solution": [
      [
        "C++",
        "C++/guess-number-higher-or-lower.cpp"
      ],
      [
        "Python",
        "Python/guess-number-higher-or-lower.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 375,
    "Title": "[Guess Number Higher or Lower II](https://leetcode.com/problems/guess-number-higher-or-lower-ii/)",
    "Solution": [
      [
        "C++",
        "C++/guess-number-higher-or-lower-ii.cpp"
      ],
      [
        "Python",
        "Python/guess-number-higher-or-lower-ii.py"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 376,
    "Title": "[Wiggle Subsequence](https://leetcode.com/problems/wiggle-subsequence/)",
    "Solution": [
      [
        "C++",
        "C++/wiggle-subsequence.cpp"
      ],
      [
        "Python",
        "Python/wiggle-subsequence.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 377,
    "Title": "[Combination Sum IV](https://leetcode.com/problems/combination-sum-iv/)",
    "Solution": [
      [
        "C++",
        "C++/combination-sum-iv.cpp"
      ],
      [
        "Python",
        "Python/combination-sum-iv.py"
      ]
    ],
    "Time": "_O(nlogn + n * t)_",
    "Space": "_O(t)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 378,
    "Title": "[Kth Smallest Element in a Sorted Matrix](https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/kth-smallest-element-in-a-sorted-matrix.cpp"
      ],
      [
        "Python",
        "Python/kth-smallest-element-in-a-sorted-matrix.py"
      ]
    ],
    "Time": "_O(k * log(min(n, m, k)))_",
    "Space": "_O(min(n, m, k))_",
    "Difficulty": "Medium",
    "Tag": "LintCode",
    "Note": 0
  },
  {
    "Index": 379,
    "Title": "[Design Phone Directory](https://leetcode.com/problems/design-phone-directory/)",
    "Solution": [
      [
        "C++",
        "C++/design-phone-directory.cpp"
      ],
      [
        "Python",
        "Python/design-phone-directory.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 380,
    "Title": "[Insert Delete GetRandom O(1)](https://leetcode.com/problems/insert-delete-getrandom-o1/)",
    "Solution": [
      [
        "C++",
        "C++/insert-delete-getrandom-o1.cpp"
      ],
      [
        "Python",
        "Python/insert-delete-getrandom-o1.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 381,
    "Title": "[Insert Delete GetRandom O(1) - Duplicates allowed](https://leetcode.com/problems/insert-delete-getrandom-o1-duplicates-allowed/)",
    "Solution": [
      [
        "C++",
        "C++/insert-delete-getrandom-o1-duplicates-allowed.cpp"
      ],
      [
        "Python",
        "Python/insert-delete-getrandom-o1-duplicates-allowed.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 382,
    "Title": "[Linked List Random Node](https://leetcode.com/problems/linked-list-random-node/)",
    "Solution": [
      [
        "C++",
        "C++/linked-list-random-node.cpp"
      ],
      [
        "Python",
        "Python/linked-list-random-node.py"
      ]
    ],
    "Time": "ctor: _O(n)_<br>getRandom: _O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "`Reservoir Sampling`"
  },
  {
    "Index": 383,
    "Title": "[Ransom Note](https://leetcode.com/problems/ransom-note/)",
    "Solution": [
      [
        "C++",
        "C++/ransom-note.cpp"
      ],
      [
        "Python",
        "Python/ransom-note.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "EPI"
  },
  {
    "Index": 384,
    "Title": "[Shuffle an Array](https://leetcode.com/problems/shuffle-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/shuffle-an-array.cpp"
      ],
      [
        "Python",
        "Python/shuffle-an-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "EPI",
    "Note": 0
  },
  {
    "Index": 385,
    "Title": "[Mini Parser](https://leetcode.com/problems/mini-parser/)",
    "Solution": [
      [
        "C++",
        "C++/mini-parser.cpp"
      ],
      [
        "Python",
        "Python/mini-parser.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 386,
    "Title": "[Lexicographical Numbers](https://leetcode.com/problems/lexicographical-numbers/)",
    "Solution": [
      [
        "C++",
        "C++/lexicographical-numbers.cpp"
      ],
      [
        "Python",
        "Python/lexicographical-numbers.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 387,
    "Title": "[First Unique Character in a String](https://leetcode.com/problems/first-unique-character-in-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/first-unique-character-in-a-string.cpp"
      ],
      [
        "Python",
        "Python/first-unique-character-in-a-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 388,
    "Title": "[Longest Absolute File Path](https://leetcode.com/problems/longest-absolute-file-path/)",
    "Solution": [
      [
        "C++",
        "C++/longest-absolute-file-path.cpp"
      ],
      [
        "Python",
        "Python/longest-absolute-file-path.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(d)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Stack"
  },
  {
    "Index": 389,
    "Title": "[Find the Difference](https://leetcode.com/problems/find-the-difference/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-difference.cpp"
      ],
      [
        "Python",
        "Python/find-the-difference.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 390,
    "Title": "[Elimination Game](https://leetcode.com/problems/elimination-game/)",
    "Solution": [
      [
        "C++",
        "C++/elimination-game.cpp"
      ],
      [
        "Python",
        "Python/elimination-game.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 391,
    "Title": "[Perfect Rectangle](https://leetcode.com/problems/perfect-rectangle/)",
    "Solution": [
      [
        "C++",
        "C++/perfect-rectangle.cpp"
      ],
      [
        "Python",
        "Python/perfect-rectangle.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 392,
    "Title": "[Is Subsequence](https://leetcode.com/problems/is-subsequence/)",
    "Solution": [
      [
        "C++",
        "C++/is-subsequence.cpp"
      ],
      [
        "Python",
        "Python/is-subsequence.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 393,
    "Title": "[UTF-8 Validation](https://leetcode.com/problems/utf-8-validation/)",
    "Solution": [
      [
        "C++",
        "C++/utf-8-validation.cpp"
      ],
      [
        "Python",
        "Python/utf-8-validation.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 394,
    "Title": "[Decode String](https://leetcode.com/problems/decode-string/)",
    "Solution": [
      [
        "C++",
        "C++/decode-string.cpp"
      ],
      [
        "Python",
        "Python/decode-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 395,
    "Title": "[Longest Substring with At Least K Repeating Characters](https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/)",
    "Solution": [
      [
        "C++",
        "C++/longest-substring-with-at-least-k-repeating-characters.cpp"
      ],
      [
        "Python",
        "Python/longest-substring-with-at-least-k-repeating-characters.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 396,
    "Title": "[Rotate Function](https://leetcode.com/problems/rotate-function/)",
    "Solution": [
      [
        "C++",
        "C++/rotate-function.cpp"
      ],
      [
        "Python",
        "Python/rotate-function.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 397,
    "Title": "[Integer Replacement](https://leetcode.com/problems/integer-replacement/)",
    "Solution": [
      [
        "C++",
        "C++/integer-replacement.cpp"
      ],
      [
        "Python",
        "Python/integer-replacement.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 398,
    "Title": "[Random Pick Index](https://leetcode.com/problems/random-pick-index/)",
    "Solution": [
      [
        "C++",
        "C++/random-pick-index.cpp"
      ],
      [
        "Python",
        "Python/random-pick-index.py"
      ]
    ],
    "Time": "ctor: _O(n)_<br>pick: _O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "`Reservoir Sampling`, Hash Table"
  },
  {
    "Index": 399,
    "Title": "[Evaluate Division](https://leetcode.com/problems/evaluate-division/)",
    "Solution": [
      [
        "C++",
        "C++/evaluate-division.cpp"
      ],
      [
        "Python",
        "Python/evaluate-division.py"
      ]
    ],
    "Time": "_O(e + q)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "`Floyd-Warshall Algorithm`, BFS, Union Find"
  },
  {
    "Index": 400,
    "Title": "[Nth Digit](https://leetcode.com/problems/nth-digit/)",
    "Solution": [
      [
        "C++",
        "C++/nth-digit.cpp"
      ],
      [
        "Python",
        "Python/nth-digit.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 401,
    "Title": "[Binary Watch](https://leetcode.com/problems/binary-watch/)",
    "Solution": [
      [
        "C++",
        "C++/binary-watch.cpp"
      ],
      [
        "Python",
        "Python/binary-watch.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 402,
    "Title": "[Remove K Digits](https://leetcode.com/problems/remove-k-digits/)",
    "Solution": [
      [
        "C++",
        "C++/remove-k-digits.cpp"
      ],
      [
        "Python",
        "Python/remove-k-digits.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "LintCode"
  },
  {
    "Index": 403,
    "Title": "[Frog Jump](https://leetcode.com/problems/frog-jump/)",
    "Solution": [
      [
        "C++",
        "C++/frog-jump.cpp"
      ],
      [
        "Python",
        "Python/frog-jump.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 404,
    "Title": "[Sum of Left Leaves](https://leetcode.com/problems/sum-of-left-leaves/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-left-leaves.cpp"
      ],
      [
        "Python",
        "Python/sum-of-left-leaves.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 405,
    "Title": "[Convert a Number to Hexadecimal](https://leetcode.com/problems/convert-a-number-to-hexadecimal/)",
    "Solution": [
      [
        "C++",
        "C++/convert-a-number-to-hexadecimal.cpp"
      ],
      [
        "Python",
        "Python/convert-a-number-to-hexadecimal.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 406,
    "Title": "[Queue Reconstruction by Height](https://leetcode.com/problems/queue-reconstruction-by-height/)",
    "Solution": [
      [
        "C++",
        "C++/queue-reconstruction-by-height.cpp"
      ],
      [
        "Python",
        "Python/queue-reconstruction-by-height.py"
      ]
    ],
    "Time": "_O(n * sqrt(n))_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Tricky"
  },
  {
    "Index": 407,
    "Title": "[Trapping Rain Water II](https://leetcode.com/problems/trapping-rain-water-ii/)",
    "Solution": [
      [
        "C++",
        "C++/trapping-rain-water-ii.cpp"
      ],
      [
        "Python",
        "Python/trapping-rain-water-ii.py"
      ]
    ],
    "Time": "_O(m * n * (logm + logn))_",
    "Space": "_O(m * n)_",
    "Difficulty": "Hard",
    "Tag": "LintCode",
    "Note": 0
  },
  {
    "Index": 408,
    "Title": "[Valid Word Abbreviation](https://leetcode.com/problems/valid-word-abbreviation/)",
    "Solution": [
      [
        "C++",
        "C++/valid-word-abbreviation.cpp"
      ],
      [
        "Python",
        "Python/valid-word-abbreviation.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒"
  },
  {
    "Index": 409,
    "Title": "[Longest Palindrome](https://leetcode.com/problems/longest-palindrome/)",
    "Solution": [
      [
        "C++",
        "C++/longest-palindrome.cpp"
      ],
      [
        "Python",
        "Python/longest-palindrome.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 410,
    "Title": "[Split Array Largest Sum](https://leetcode.com/problems/split-array-largest-sum/)",
    "Solution": [
      [
        "C++",
        "C++/split-array-largest-sum.cpp"
      ],
      [
        "Python",
        "Python/split-array-largest-sum.py"
      ]
    ],
    "Time": "_O(nlogs)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 411,
    "Title": "[Minimum Unique Word Abbreviation](https://leetcode.com/problems/minimum-unique-word-abbreviation/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-unique-word-abbreviation.cpp"
      ],
      [
        "Python",
        "Python/minimum-unique-word-abbreviation.py"
      ]
    ],
    "Time": "_O((d + n) * 2^n)_",
    "Space": "_O(d)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 412,
    "Title": "[Fizz Buzz](https://leetcode.com/problems/fizz-buzz/)",
    "Solution": [
      [
        "C++",
        "C++/fizz-buzz.cpp"
      ],
      [
        "Python",
        "Python/fizz-buzz.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 413,
    "Title": "[Arithmetic Slices](https://leetcode.com/problems/arithmetic-slices/)",
    "Solution": [
      [
        "C++",
        "C++/arithmetic-slices.cpp"
      ],
      [
        "Python",
        "Python/arithmetic-slices.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 414,
    "Title": "[Third Maximum Number](https://leetcode.com/problems/third-maximum-number/)",
    "Solution": [
      [
        "C++",
        "C++/third-maximum-number.cpp"
      ],
      [
        "Python",
        "Python/third-maximum-number.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 415,
    "Title": "[Add Strings](https://leetcode.com/problems/add-strings/)",
    "Solution": [
      [
        "C++",
        "C++/add-strings.cpp"
      ],
      [
        "Python",
        "Python/add-strings.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 416,
    "Title": "[Partition Equal Subset Sum](https://leetcode.com/problems/partition-equal-subset-sum/)",
    "Solution": [
      [
        "C++",
        "C++/partition-equal-subset-sum.cpp"
      ],
      [
        "Python",
        "Python/partition-equal-subset-sum.py"
      ]
    ],
    "Time": "_O(n * s)_",
    "Space": "_O(s)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 417,
    "Title": "[Pacific Atlantic Water Flow](https://leetcode.com/problems/pacific-atlantic-water-flow/)",
    "Solution": [
      [
        "C++",
        "C++/pacific-atlantic-water-flow.cpp"
      ],
      [
        "Python",
        "Python/pacific-atlantic-water-flow.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 418,
    "Title": "[Sentence Screen Fitting](https://leetcode.com/problems/sentence-screen-fitting/)",
    "Solution": [
      [
        "C++",
        "C++/sentence-screen-fitting.cpp"
      ],
      [
        "Python",
        "Python/sentence-screen-fitting.py"
      ]
    ],
    "Time": "_O(r + n * c)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 419,
    "Title": "[Battleships in a Board](https://leetcode.com/problems/battleships-in-a-board/)",
    "Solution": [
      [
        "C++",
        "C++/battleships-in-a-board.cpp"
      ],
      [
        "Python",
        "Python/battleships-in-a-board.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 420,
    "Title": "[Strong Password Checker](https://leetcode.com/problems/strong-password-checker/)",
    "Solution": [
      [
        "C++",
        "C++/strong-password-checker.cpp"
      ],
      [
        "Python",
        "Python/strong-password-checker.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 421,
    "Title": "[Maximum XOR of Two Numbers in an Array](https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-xor-of-two-numbers-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/maximum-xor-of-two-numbers-in-an-array.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(t)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 422,
    "Title": "[Valid Word Square](https://leetcode.com/problems/valid-word-square/)",
    "Solution": [
      [
        "C++",
        "C++/valid-word-square.cpp"
      ],
      [
        "Python",
        "Python/valid-word-square.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 423,
    "Title": "[Reconstruct Original Digits from English](https://leetcode.com/problems/reconstruct-original-digits-from-english/)",
    "Solution": [
      [
        "C++",
        "C++/reconstruct-original-digits-from-english.cpp"
      ],
      [
        "Python",
        "Python/reconstruct-original-digits-from-english.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "[GCJ2016 - Round 1B](https://code.google.com/codejam/contest/11254486/dashboard#s=p0)",
    "Note": 0
  },
  {
    "Index": 424,
    "Title": "[Longest Repeating Character Replacement](https://leetcode.com/problems/longest-repeating-character-replacement/)",
    "Solution": [
      [
        "C++",
        "C++/longest-repeating-character-replacement.cpp"
      ],
      [
        "Python",
        "Python/longest-repeating-character-replacement.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Sliding Window"
  },
  {
    "Index": 425,
    "Title": "[Word Squares](https://leetcode.com/problems/word-squares/)",
    "Solution": [
      [
        "C++",
        "C++/word-squares.cpp"
      ],
      [
        "Python",
        "Python/word-squares.py"
      ]
    ],
    "Time": "_O(n^2 * n!)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 426,
    "Title": "[Convert Binary Search Tree to Sorted Doubly Linked List](https://leetcode.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/)",
    "Solution": [
      [
        "C++",
        "C++/convert-binary-search-tree-to-sorted-doubly-linked-list.cpp"
      ],
      [
        "Python",
        "Python/convert-binary-search-tree-to-sorted-doubly-linked-list.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 427,
    "Title": "[Construct Quad Tree](https://leetcode.com/problems/construct-quad-tree/)",
    "Solution": [
      [
        "C++",
        "C++/construct-quad-tree.cpp"
      ],
      [
        "Python",
        "Python/construct-quad-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 428,
    "Title": "[Serialize and Deserialize N-ary Tree](https://leetcode.com/problems/serialize-and-deserialize-n-ary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/serialize-and-deserialize-n-ary-tree.cpp"
      ],
      [
        "Python",
        "Python/serialize-and-deserialize-n-ary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 429,
    "Title": "[N-ary Tree Level Order Traversal](https://leetcode.com/problems/n-ary-tree-level-order-traversal/)",
    "Solution": [
      [
        "C++",
        "C++/n-ary-tree-level-order-traversal.cpp"
      ],
      [
        "Python",
        "Python/n-ary-tree-level-order-traversal.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(w)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 430,
    "Title": "[Flatten a Multilevel Doubly Linked List](https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list/)",
    "Solution": [
      [
        "C++",
        "C++/flatten-a-multilevel-doubly-linked-list.cpp"
      ],
      [
        "Python",
        "Python/flatten-a-multilevel-doubly-linked-list.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 431,
    "Title": "[Encode N-ary Tree to Binary Tree](https://leetcode.com/problems/encode-n-ary-tree-to-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/encode-n-ary-tree-to-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/encode-n-ary-tree-to-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 432,
    "Title": "[All O\\`one Data Structure](https://leetcode.com/problems/all-oone-data-structure/)",
    "Solution": [
      [
        "C++",
        "C++/all-oone-data-structure.cpp"
      ],
      [
        "Python",
        "Python/all-oone-data-structure.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 433,
    "Title": "[Minimum Genetic Mutation](https://leetcode.com/problems/minimum-genetic-mutation/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-genetic-mutation.cpp"
      ],
      [
        "Python",
        "Python/minimum-genetic-mutation.py"
      ]
    ],
    "Time": "_O(n * b)_",
    "Space": "_O(b)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 434,
    "Title": "[Number of Segments in a String](https://leetcode.com/problems/number-of-segments-in-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-segments-in-a-string.cpp"
      ],
      [
        "Python",
        "Python/number-of-segments-in-a-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 435,
    "Title": "[Non-overlapping Intervals](https://leetcode.com/problems/non-overlapping-intervals/)",
    "Solution": [
      [
        "C++",
        "C++/non-overlapping-intervals.cpp"
      ],
      [
        "Python",
        "Python/non-overlapping-intervals.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 436,
    "Title": "[Find Right Interval](https://leetcode.com/problems/find-right-interval/)",
    "Solution": [
      [
        "C++",
        "C++/find-right-interval.cpp"
      ],
      [
        "Python",
        "Python/find-right-interval.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 437,
    "Title": "[Path Sum III](https://leetcode.com/problems/path-sum-iii/)",
    "Solution": [
      [
        "C++",
        "C++/path-sum-iii.cpp"
      ],
      [
        "Python",
        "Python/path-sum-iii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 438,
    "Title": "[Find All Anagrams in a String](https://leetcode.com/problems/find-all-anagrams-in-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/find-all-anagrams-in-a-string.cpp"
      ],
      [
        "Python",
        "Python/find-all-anagrams-in-a-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 439,
    "Title": "[Ternary Expression Parser](https://leetcode.com/problems/ternary-expression-parser/)",
    "Solution": [
      [
        "C++",
        "C++/ternary-expression-parser.cpp"
      ],
      [
        "Python",
        "Python/ternary-expression-parser.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 440,
    "Title": "[K-th Smallest in Lexicographical Order](https://leetcode.com/problems/k-th-smallest-in-lexicographical-order/)",
    "Solution": [
      [
        "C++",
        "C++/k-th-smallest-in-lexicographical-order.cpp"
      ],
      [
        "Python",
        "Python/k-th-smallest-in-lexicographical-order.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(logn)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 441,
    "Title": "[Arranging Coins](https://leetcode.com/problems/arranging-coins/)",
    "Solution": [
      [
        "C++",
        "C++/arranging-coins.cpp"
      ],
      [
        "Python",
        "Python/arranging-coins.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Binary Search"
  },
  {
    "Index": 442,
    "Title": "[Find All Duplicates in an Array](https://leetcode.com/problems/find-all-duplicates-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/find-all-duplicates-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/find-all-duplicates-in-an-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 443,
    "Title": "[String Compression](https://leetcode.com/problems/string-compression/)",
    "Solution": [
      [
        "C++",
        "C++/string-compression.cpp"
      ],
      [
        "Python",
        "Python/string-compression.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 444,
    "Title": "[Sequence Reconstruction](https://leetcode.com/problems/sequence-reconstruction/)",
    "Solution": [
      [
        "C++",
        "C++/sequence-reconstruction.cpp"
      ],
      [
        "Python",
        "Python/sequence-reconstruction.py"
      ]
    ],
    "Time": "_O(n * s)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Topological Sort"
  },
  {
    "Index": 445,
    "Title": "[Add Two Numbers II](https://leetcode.com/problems/add-two-numbers-ii/)",
    "Solution": [
      [
        "C++",
        "C++/add-two-numbers-ii.cpp"
      ],
      [
        "Python",
        "Python/add-two-numbers-ii.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 446,
    "Title": "[Arithmetic Slices II - Subsequence](https://leetcode.com/problems/arithmetic-slices-ii-subsequence/)",
    "Solution": [
      [
        "C++",
        "C++/arithmetic-slices-ii-subsequence.cpp"
      ],
      [
        "Python",
        "Python/arithmetic-slices-ii-subsequence.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n * d)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 447,
    "Title": "[Number of Boomerangs](https://leetcode.com/problems/number-of-boomerangs/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-boomerangs.cpp"
      ],
      [
        "Python",
        "Python/number-of-boomerangs.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 448,
    "Title": "[Find All Numbers Disappeared in an Array](https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/find-all-numbers-disappeared-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/find-all-numbers-disappeared-in-an-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 449,
    "Title": "[Serialize and Deserialize BST](https://leetcode.com/problems/serialize-and-deserialize-bst/)",
    "Solution": [
      [
        "C++",
        "C++/serialize-and-deserialize-bst.cpp"
      ],
      [
        "Python",
        "Python/serialize-and-deserialize-bst.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 450,
    "Title": "[Delete Node in a BST](https://leetcode.com/problems/delete-node-in-a-bst/)",
    "Solution": [
      [
        "C++",
        "C++/delete-node-in-a-bst.cpp"
      ],
      [
        "Python",
        "Python/delete-node-in-a-bst.py"
      ]
    ],
    "Time": "_O(h)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 451,
    "Title": "[Sort Characters By Frequency](https://leetcode.com/problems/sort-characters-by-frequency/)",
    "Solution": [
      [
        "C++",
        "C++/sort-characters-by-frequency.cpp"
      ],
      [
        "Python",
        "Python/sort-characters-by-frequency.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 452,
    "Title": "[Minimum Number of Arrows to Burst Balloons](https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-arrows-to-burst-balloons.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-arrows-to-burst-balloons.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 453,
    "Title": "[Minimum Moves to Equal Array Elements](https://leetcode.com/problems/minimum-moves-to-equal-array-elements/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-moves-to-equal-array-elements.cpp"
      ],
      [
        "Python",
        "Python/minimum-moves-to-equal-array-elements.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 454,
    "Title": "[4Sum II](https://leetcode.com/problems/4sum-ii/)",
    "Solution": [
      [
        "C++",
        "C++/4sum-ii.cpp"
      ],
      [
        "Python",
        "Python/4sum-ii.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 455,
    "Title": "[Assign Cookies](https://leetcode.com/problems/assign-cookies/)",
    "Solution": [
      [
        "C++",
        "C++/assign-cookies.cpp"
      ],
      [
        "Python",
        "Python/assign-cookies.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 456,
    "Title": "[132 Pattern](https://leetcode.com/problems/132-pattern/)",
    "Solution": [
      [
        "C++",
        "C++/132-pattern.cpp"
      ],
      [
        "Python",
        "Python/132-pattern.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 457,
    "Title": "[Circular Array Loop](https://leetcode.com/problems/circular-array-loop/)",
    "Solution": [
      [
        "C++",
        "C++/circular-array-loop.cpp"
      ],
      [
        "Python",
        "Python/circular-array-loop.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 458,
    "Title": "[Poor Pigs](https://leetcode.com/problems/poor-pigs/)",
    "Solution": [
      [
        "C++",
        "C++/poor-pigs.cpp"
      ],
      [
        "Python",
        "Python/poor-pigs.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 459,
    "Title": "[Repeated Substring Pattern](https://leetcode.com/problems/repeated-substring-pattern/)",
    "Solution": [
      [
        "C++",
        "C++/repeated-substring-pattern.cpp"
      ],
      [
        "Python",
        "Python/repeated-substring-pattern.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "`KMP Algorithm`"
  },
  {
    "Index": 460,
    "Title": "[LFU Cache](https://leetcode.com/problems/lfu-cache/)",
    "Solution": [
      [
        "C++",
        "C++/lfu-cache.cpp"
      ],
      [
        "Python",
        "Python/lfu-cache.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(k)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 461,
    "Title": "[Hamming Distance](https://leetcode.com/problems/hamming-distance/)",
    "Solution": [
      [
        "C++",
        "C++/hamming-distance.cpp"
      ],
      [
        "Python",
        "Python/hamming-distance.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 462,
    "Title": "[Minimum Moves to Equal Array Elements II](https://leetcode.com/problems/minimum-moves-to-equal-array-elements-ii/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-moves-to-equal-array-elements-ii.cpp"
      ],
      [
        "Python",
        "Python/minimum-moves-to-equal-array-elements-ii.py"
      ]
    ],
    "Time": "_O(n)_  on average",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 463,
    "Title": "[Island Perimeter](https://leetcode.com/problems/island-perimeter/)",
    "Solution": [
      [
        "C++",
        "C++/island-perimeter.cpp"
      ],
      [
        "Python",
        "Python/island-perimeter.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Array"
  },
  {
    "Index": 464,
    "Title": "[Can I Win](https://leetcode.com/problems/can-i-win/)",
    "Solution": [
      [
        "C++",
        "C++/can-i-win.cpp"
      ],
      [
        "Python",
        "Python/can-i-win.py"
      ]
    ],
    "Time": "_O(n!)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 465,
    "Title": "[Optimal Account Balancing](https://leetcode.com/problems/optimal-account-balancing/)",
    "Solution": [
      [
        "C++",
        "C++/optimal-account-balancing.cpp"
      ],
      [
        "Python",
        "Python/optimal-account-balancing.py"
      ]
    ],
    "Time": "_O(n * 2^n)_",
    "Space": "_O(2^n)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 466,
    "Title": "[Count The Repetitions](https://leetcode.com/problems/count-the-repetitions/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-repetitions.cpp"
      ],
      [
        "Python",
        "Python/count-the-repetitions.py"
      ]
    ],
    "Time": "_O(s1 * min(s2, n1))_",
    "Space": "_O(s2)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 467,
    "Title": "[Unique Substrings in Wraparound String](https://leetcode.com/problems/unique-substrings-in-wraparound-string/)",
    "Solution": [
      [
        "C++",
        "C++/unique-substrings-in-wraparound-string.cpp"
      ],
      [
        "Python",
        "Python/unique-substrings-in-wraparound-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 468,
    "Title": "[Validate IP Address](https://leetcode.com/problems/validate-ip-address/)",
    "Solution": [
      [
        "C++",
        "C++/validate-ip-address.cpp"
      ],
      [
        "Python",
        "Python/validate-ip-address.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 469,
    "Title": "[Convex Polygon](https://leetcode.com/problems/convex-polygon/)",
    "Solution": [
      [
        "C++",
        "C++/convex-polygon.cpp"
      ],
      [
        "Python",
        "Python/convex-polygon.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 470,
    "Title": "[Implement Rand10() Using Rand7()](https://leetcode.com/problems/implement-rand10-using-rand7/)",
    "Solution": [
      [
        "C++",
        "C++/implement-rand10-using-rand7.cpp"
      ],
      [
        "Python",
        "Python/implement-rand10-using-rand7.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 471,
    "Title": "[Encode String with Shortest Length](https://leetcode.com/problems/encode-string-with-shortest-length/)",
    "Solution": [
      [
        "C++",
        "C++/encode-string-with-shortest-length.cpp"
      ],
      [
        "Python",
        "Python/encode-string-with-shortest-length.py"
      ]
    ],
    "Time": "_O(n^3)_ on average",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 472,
    "Title": "[Concatenated Words](https://leetcode.com/problems/concatenated-words/)",
    "Solution": [
      [
        "C++",
        "C++/concatenated-words.cpp"
      ],
      [
        "Python",
        "Python/concatenated-words.py"
      ]
    ],
    "Time": "_O(n * l^2)_",
    "Space": "_O(n * l)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 473,
    "Title": "[Matchsticks to Square](https://leetcode.com/problems/matchsticks-to-square/)",
    "Solution": [
      [
        "C++",
        "C++/matchsticks-to-square.cpp"
      ],
      [
        "Python",
        "Python/matchsticks-to-square.py"
      ]
    ],
    "Time": "_O(n * s * 2^n)_",
    "Space": "_O(n * (2^n + s))_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 474,
    "Title": "[Ones and Zeroes](https://leetcode.com/problems/ones-and-zeroes/)",
    "Solution": [
      [
        "C++",
        "C++/ones-and-zeroes.cpp"
      ],
      [
        "Python",
        "Python/ones-and-zeroes.py"
      ]
    ],
    "Time": "_O(s * m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 475,
    "Title": "[Heaters](https://leetcode.com/problems/heaters/)",
    "Solution": [
      [
        "C++",
        "C++/heaters.cpp"
      ],
      [
        "Python",
        "Python/heaters.py"
      ]
    ],
    "Time": "_O((m + n) * logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 476,
    "Title": "[Number Complement](https://leetcode.com/problems/number-complement/)",
    "Solution": [
      [
        "C++",
        "C++/number-complement.cpp"
      ],
      [
        "Python",
        "Python/number-complement.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Bit Manipulation"
  },
  {
    "Index": 477,
    "Title": "[Total Hamming Distance](https://leetcode.com/problems/total-hamming-distance/)",
    "Solution": [
      [
        "C++",
        "C++/total-hamming-distance.cpp"
      ],
      [
        "Python",
        "Python/total-hamming-distance.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 478,
    "Title": "[Generate Random Point in a Circle](https://leetcode.com/problems/generate-random-point-in-a-circle/)",
    "Solution": [
      [
        "C++",
        "C++/generate-random-point-in-a-circle.cpp"
      ],
      [
        "Python",
        "Python/generate-random-point-in-a-circle.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 479,
    "Title": "[Largest Palindrome Product](https://leetcode.com/problems/largest-palindrome-product/)",
    "Solution": [
      [
        "C++",
        "C++/largest-palindrome-product.cpp"
      ],
      [
        "Python",
        "Python/largest-palindrome-product.py"
      ]
    ],
    "Time": "_O(n * 10^N)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Math"
  },
  {
    "Index": 480,
    "Title": "[Sliding Window Median](https://leetcode.com/problems/sliding-window-median/)",
    "Solution": [
      [
        "C++",
        "C++/sliding-window-median.cpp"
      ],
      [
        "Python",
        "Python/sliding-window-median.py"
      ]
    ],
    "Time": "_O(nlogk)_",
    "Space": "_O(k)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "BST, Heap"
  },
  {
    "Index": 481,
    "Title": "[Magical String](https://leetcode.com/problems/magical-string/)",
    "Solution": [
      [
        "C++",
        "C++/magical-string.cpp"
      ],
      [
        "Python",
        "Python/magical-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "String"
  },
  {
    "Index": 482,
    "Title": "[License Key Formatting](https://leetcode.com/problems/license-key-formatting/)",
    "Solution": [
      [
        "C++",
        "C++/license-key-formatting.cpp"
      ],
      [
        "Python",
        "Python/license-key-formatting.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 483,
    "Title": "[Smallest Good Base](https://leetcode.com/problems/smallest-good-base/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-good-base.cpp"
      ],
      [
        "Python",
        "Python/smallest-good-base.py"
      ]
    ],
    "Time": "_O(logn * log(logn))_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Math"
  },
  {
    "Index": 484,
    "Title": "[Find Permutation](https://leetcode.com/problems/find-permutation/)",
    "Solution": [
      [
        "C++",
        "C++/find-permutation.cpp"
      ],
      [
        "Python",
        "Python/find-permutation.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 485,
    "Title": "[Max Consecutive Ones](https://leetcode.com/problems/max-consecutive-ones/)",
    "Solution": [
      [
        "C++",
        "C++/max-consecutive-ones.cpp"
      ],
      [
        "Python",
        "Python/max-consecutive-ones.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Array"
  },
  {
    "Index": 486,
    "Title": "[Predict the Winner](https://leetcode.com/problems/predict-the-winner/)",
    "Solution": [
      [
        "C++",
        "C++/predict-the-winner.cpp"
      ],
      [
        "Python",
        "Python/predict-the-winner.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 487,
    "Title": "[Max Consecutive Ones II](https://leetcode.com/problems/max-consecutive-ones-ii/)",
    "Solution": [
      [
        "C++",
        "C++/max-consecutive-ones-ii.cpp"
      ],
      [
        "Python",
        "Python/max-consecutive-ones-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Array"
  },
  {
    "Index": 488,
    "Title": "[Zuma Game](https://leetcode.com/problems/zuma-game/)",
    "Solution": [
      [
        "C++",
        "C++/zuma-game.cpp"
      ],
      [
        "Python",
        "Python/zuma-game.py"
      ]
    ],
    "Time": "_O((b+h) * h!*(b+h-1)!/(b-1)!)_",
    "Space": "_O((b+h) * h!*(b+h-1)!/(b-1)!)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Backtracking"
  },
  {
    "Index": 489,
    "Title": "[Robot Room Cleaner](https://leetcode.com/problems/robot-room-cleaner/)",
    "Solution": [
      [
        "C++",
        "C++/robot-room-cleaner.cpp"
      ],
      [
        "Python",
        "Python/robot-room-cleaner.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 490,
    "Title": "[The Maze](https://leetcode.com/problems/the-maze/)",
    "Solution": [
      [
        "C++",
        "C++/the-maze.cpp"
      ],
      [
        "Python",
        "Python/the-maze.py"
      ]
    ],
    "Time": "_O(max(r, c) * w)_",
    "Space": "_O(w)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 491,
    "Title": "[Increasing Subsequences](https://leetcode.com/problems/increasing-subsequences/)",
    "Solution": [
      [
        "C++",
        "C++/increasing-subsequences.cpp"
      ],
      [
        "Python",
        "Python/increasing-subsequences.py"
      ]
    ],
    "Time": "_O(n * 2^n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Backtracking"
  },
  {
    "Index": 492,
    "Title": "[Construct the Rectangle](https://leetcode.com/problems/construct-the-rectangle/)",
    "Solution": [
      [
        "C++",
        "C++/construct-the-rectangle.cpp"
      ],
      [
        "Python",
        "Python/construct-the-rectangle.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Math"
  },
  {
    "Index": 493,
    "Title": "[Reverse Pairs](https://leetcode.com/problems/reverse-pairs/)",
    "Solution": [
      [
        "C++",
        "C++/reverse-pairscpp"
      ],
      [
        "Python",
        "Python/reverse-pairs.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Sort"
  },
  {
    "Index": 494,
    "Title": "[Target Sum](https://leetcode.com/problems/target-sum/)",
    "Solution": [
      [
        "C++",
        "C++/target-sum.cpp"
      ],
      [
        "Python",
        "Python/target-sum.py"
      ]
    ],
    "Time": "_O(n * S)_",
    "Space": "_O(S)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DP"
  },
  {
    "Index": 495,
    "Title": "[Teemo Attacking](https://leetcode.com/problems/teemo-attacking/)",
    "Solution": [
      [
        "C++",
        "C++/teemo-attacking.cpp"
      ],
      [
        "Python",
        "Python/teemo-attacking.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Array, Simulation"
  },
  {
    "Index": 496,
    "Title": "[Next Greater Element I](https://leetcode.com/problems/next-greater-element-i/)",
    "Solution": [
      [
        "C++",
        "C++/next-greater-element-i.cpp"
      ],
      [
        "Python",
        "Python/next-greater-element-i.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Mono Stack"
  },
  {
    "Index": 497,
    "Title": "[Random Point in Non-overlapping Rectangles](https://leetcode.com/problems/random-point-in-non-overlapping-rectangles/)",
    "Solution": [
      [
        "C++",
        "C++/random-point-in-non-overlapping-rectangles.cpp"
      ],
      [
        "Python",
        "Python/random-point-in-non-overlapping-rectangles.py"
      ]
    ],
    "Time": "ctor: _O(n)_ <br> pick: _O(logn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 498,
    "Title": "[Diagonal Traverse](https://leetcode.com/problems/diagonal-traverse/)",
    "Solution": [
      [
        "C++",
        "C++/diagonal-traverse.cpp"
      ],
      [
        "Python",
        "Python/diagonal-traverse.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Array"
  },
  {
    "Index": 499,
    "Title": "[The Maze III](https://leetcode.com/problems/the-maze-iii/)",
    "Solution": [
      [
        "C++",
        "C++/the-maze-iii.cpp"
      ],
      [
        "Python",
        "Python/the-maze-iii.py"
      ]
    ],
    "Time": "_O(max(r, c) * wlogw)_",
    "Space": "_O(w^2)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 500,
    "Title": "[Keyboard Row](https://leetcode.com/problems/keyboard-row/)",
    "Solution": [
      [
        "C++",
        "C++/keyboard-row.cpp"
      ],
      [
        "Python",
        "Python/keyboard-row.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "String, Hash"
  },
  {
    "Index": 501,
    "Title": "[Find Mode in Binary Search Tree](https://leetcode.com/problems/find-mode-in-binary-search-tree/)",
    "Solution": [
      [
        "C++",
        "C++/find-mode-in-binary-search-tree.cpp"
      ],
      [
        "Python",
        "Python/find-mode-in-binary-search-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Tree, Inorder Traversal"
  },
  {
    "Index": 502,
    "Title": "[IPO](https://leetcode.com/problems/ipo/)",
    "Solution": [
      [
        "C++",
        "C++/ipo.cpp"
      ],
      [
        "Python",
        "Python/ipo.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Heap"
  },
  {
    "Index": 503,
    "Title": "[Next Greater Element II](https://leetcode.com/problems/next-greater-element-ii)",
    "Solution": [
      [
        "C++",
        "C++/next-greater-element-ii.cpp"
      ],
      [
        "Python",
        "Python/next-greater-element-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Mono Stack"
  },
  {
    "Index": 504,
    "Title": "[Base 7](https://leetcode.com/problems/base-7/)",
    "Solution": [
      [
        "C++",
        "C++/base-7.cpp"
      ],
      [
        "Python",
        "Python/base-7.py"
      ]
    ],
    "Time": "_O(n1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Math"
  },
  {
    "Index": 505,
    "Title": "[The Maze II](https://leetcode.com/problems/the-maze-ii/)",
    "Solution": [
      [
        "C++",
        "C++/the-maze-ii.cpp"
      ],
      [
        "Python",
        "Python/the-maze-ii.py"
      ]
    ],
    "Time": "_O(max(r, c) * wlogw)_",
    "Space": "_O(w)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 506,
    "Title": "[Relative Ranks](https://leetcode.com/problems/relative-ranks/)",
    "Solution": [
      [
        "C++",
        "C++/relative-ranks.cpp"
      ],
      [
        "Python",
        "Python/relative-ranks.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Array, Sort"
  },
  {
    "Index": 507,
    "Title": "[Perfect Number](https://leetcode.com/problems/perfect-number/)",
    "Solution": [
      [
        "C++",
        "C++/perfect-number.cpp"
      ],
      [
        "Python",
        "Python/perfect-number.py"
      ]
    ],
    "Time": "_O(sqrt(n))_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Math"
  },
  {
    "Index": 508,
    "Title": "[Most Frequent Subtree Sum](https://leetcode.com/problems/most-frequent-subtree-sum/)",
    "Solution": [
      [
        "C++",
        "C++/most-frequent-subtree-sum.cpp"
      ],
      [
        "Python",
        "Python/most-frequent-subtree-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Tree, DFS, Hash"
  },
  {
    "Index": 509,
    "Title": "[Fibonacci Number](https://leetcode.com/problems/fibonacci-number/)",
    "Solution": [
      [
        "C++",
        "C++/fibonacci-number.cpp"
      ],
      [
        "Python",
        "Python/fibonacci-number.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "variant of [Climbing Stairs](https://leetcode.com/problems/climbing-stairs/)"
  },
  {
    "Index": 510,
    "Title": "[Inorder Successor in BST II](https://leetcode.com/problems/inorder-successor-in-bst-ii/)",
    "Solution": [
      [
        "C++",
        "C++/inorder-successor-in-bst-ii.cpp"
      ],
      [
        "Python",
        "Python/inorder-successor-in-bst-ii.py"
      ]
    ],
    "Time": "_O(h)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 511,
    "Title": "[Game Play Analysis I](https://leetcode.com/problems/game-play-analysis-i/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/game-play-analysis-i.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 512,
    "Title": "[Game Play Analysis II](https://leetcode.com/problems/game-play-analysis-ii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/game-play-analysis-ii.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 513,
    "Title": "[Find Bottom Left Tree Value](https://leetcode.com/problems/find-bottom-left-tree-value/)",
    "Solution": [
      [
        "C++",
        "C++/find-bottom-left-tree-value.cpp"
      ],
      [
        "Python",
        "Python/find-bottom-left-tree-value.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Tree, DFS, BFS"
  },
  {
    "Index": 514,
    "Title": "[Freedom Trail](https://leetcode.com/problems/freedom-trail/)",
    "Solution": [
      [
        "C++",
        "C++/freedom-trail.cpp"
      ],
      [
        "Python",
        "Python/freedom-trail.py"
      ]
    ],
    "Time": "_O(k)_ ~ _O(k * r^2)_",
    "Space": "_O(r)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 515,
    "Title": "[Find Largest Value in Each Tree Row](https://leetcode.com/problems/find-largest-value-in-each-tree-row/)",
    "Solution": [
      [
        "C++",
        "C++/find-largest-value-in-each-tree-row.cpp"
      ],
      [
        "Python",
        "Python/find-largest-value-in-each-tree-row.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 516,
    "Title": "[Longest Palindromic Subsequence](https://leetcode.com/problems/longest-palindromic-subsequence/)",
    "Solution": [
      [
        "C++",
        "C++/longest-palindromic-subsequence.cpp"
      ],
      [
        "Python",
        "Python/longest-palindromic-subsequence.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 517,
    "Title": "[Super Washing Machines](https://leetcode.com/problems/super-washing-machines/)",
    "Solution": [
      [
        "C++",
        "C++/super-washing-machines.cpp"
      ],
      [
        "Python",
        "Python/super-washing-machines.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 518,
    "Title": "[Coin Change 2](https://leetcode.com/problems/coin-change-2/)",
    "Solution": [
      [
        "C++",
        "C++/coin-change-2.cpp"
      ],
      [
        "Python",
        "Python/coin-change-2.py"
      ]
    ],
    "Time": "_O(n * m)_",
    "Space": "_O(m)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DP"
  },
  {
    "Index": 519,
    "Title": "[Random Flip Matrix](https://leetcode.com/problems/random-flip-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/random-flip-matrix.cpp"
      ],
      [
        "Python",
        "Python/random-flip-matrix.py"
      ]
    ],
    "Time": "ctor: _O(1)_ <br> pick: _O(1)_ reset: _O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 520,
    "Title": "[Detect Capital](https://leetcode.com/problems/detect-capital/)",
    "Solution": [
      [
        "C++",
        "C++/detect-capital.cpp"
      ],
      [
        "Python",
        "Python/detect-capital.py"
      ]
    ],
    "Time": "_O(l)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 521,
    "Title": "[Longest Uncommon Subsequence I](https://leetcode.com/problems/longest-uncommon-subsequence-i/)",
    "Solution": [
      [
        "C++",
        "C++/longest-uncommon-subsequence-i.cpp"
      ],
      [
        "Python",
        "Python/longest-uncommon-subsequence-i.py"
      ]
    ],
    "Time": "_O(min(a, b))_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 522,
    "Title": "[Longest Uncommon Subsequence II](https://leetcode.com/problems/longest-uncommon-subsequence-ii/)",
    "Solution": [
      [
        "C++",
        "C++/longest-uncommon-subsequence-ii.cpp"
      ],
      [
        "Python",
        "Python/longest-uncommon-subsequence-ii.py"
      ]
    ],
    "Time": "_O(l * n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 523,
    "Title": "[Continuous Subarray Sum](https://leetcode.com/problems/continuous-subarray-sum/)",
    "Solution": [
      [
        "C++",
        "C++/continuous-subarray-sum.cpp"
      ],
      [
        "Python",
        "Python/continuous-subarray-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 524,
    "Title": "[Longest Word in Dictionary through Deleting](https://leetcode.com/problems/longest-word-in-dictionary-through-deleting/)",
    "Solution": [
      [
        "C++",
        "C++/longest-word-in-dictionary-through-deleting.cpp"
      ],
      [
        "Python",
        "Python/longest-word-in-dictionary-through-deleting.py"
      ]
    ],
    "Time": "_O((d * l)  * logd)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 525,
    "Title": "[Contiguous Array](https://leetcode.com/problems/contiguous-array/)",
    "Solution": [
      [
        "C++",
        "C++/contiguous-array.cpp"
      ],
      [
        "Python",
        "Python/contiguous-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 526,
    "Title": "[Beautiful Arrangement](https://leetcode.com/problems/beautiful-arrangement/)",
    "Solution": [
      [
        "C++",
        "C++/beautiful-arrangement.cpp"
      ],
      [
        "Python",
        "Python/beautiful-arrangement.py"
      ]
    ],
    "Time": "_O(n!)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 527,
    "Title": "[Word Abbreviation](https://leetcode.com/problems/word-abbreviation/)",
    "Solution": [
      [
        "C++",
        "C++/word-abbreviation.cpp"
      ],
      [
        "Python",
        "Python/word-abbreviation.py"
      ]
    ],
    "Time": "_O(n * l)_ ~ _O(n^2 * l^2)_",
    "Space": "_O(n * l)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 528,
    "Title": "[Random Pick with Weight](https://leetcode.com/problems/random-pick-with-weight/)",
    "Solution": [
      [
        "C++",
        "C++/random-pick-with-weight.cpp"
      ],
      [
        "Python",
        "Python/random-pick-with-weight.py"
      ]
    ],
    "Time": "ctor: _O(n)_ <br> pick: _O(logn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 529,
    "Title": "[Minesweeper](https://leetcode.com/problems/minesweeper/)",
    "Solution": [
      [
        "C++",
        "C++/minesweeper.cpp"
      ],
      [
        "Python",
        "Python/minesweeper.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 530,
    "Title": "[Minimum Absolute Difference in BST](https://leetcode.com/problems/minimum-absolute-difference-in-bst/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-absolute-difference-in-bst.cpp"
      ],
      [
        "Python",
        "Python/minimum-absolute-difference-in-bst.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 531,
    "Title": "[Lonely Pixel I](https://leetcode.com/problems/lonely-pixel-i/)",
    "Solution": [
      [
        "C++",
        "C++/lonely-pixel-i.cpp"
      ],
      [
        "Python",
        "Python/lonely-pixel-i.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 532,
    "Title": "[K-diff Pairs in an Array](https://leetcode.com/problems/k-diff-pairs-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/k-diff-pairs-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/k-diff-pairs-in-an-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 533,
    "Title": "[Lonely Pixel II](https://leetcode.com/problems/lonely-pixel-ii/)",
    "Solution": [
      [
        "C++",
        "C++/lonely-pixel-ii.cpp"
      ],
      [
        "Python",
        "Python/lonely-pixel-ii.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 534,
    "Title": "[Game Play Analysis III](https://leetcode.com/problems/game-play-analysis-iii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/game-play-analysis-iii.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 535,
    "Title": "[Encode and Decode TinyURL](https://leetcode.com/problems/encode-and-decode-tinyurl/)",
    "Solution": [
      [
        "C++",
        "C++/encode-and-decode-tinyurl.cpp"
      ],
      [
        "Python",
        "Python/encode-and-decode-tinyurl.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 536,
    "Title": "[Construct Binary Tree from String](https://leetcode.com/problems/construct-binary-tree-from-string/)",
    "Solution": [
      [
        "C++",
        "C++/construct-binary-tree-from-string.cpp"
      ],
      [
        "Python",
        "Python/construct-binary-tree-from-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 537,
    "Title": "[Complex Number Multiplication](https://leetcode.com/problems/complex-number-multiplication/)",
    "Solution": [
      [
        "C++",
        "C++/complex-number-multiplication.cpp"
      ],
      [
        "Python",
        "Python/complex-number-multiplication.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 538,
    "Title": "[Convert BST to Greater Tree](https://leetcode.com/problems/convert-bst-to-greater-tree/)",
    "Solution": [
      [
        "C++",
        "C++/convert-bst-to-greater-tree.cpp"
      ],
      [
        "Python",
        "Python/convert-bst-to-greater-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 539,
    "Title": "[Minimum Time Difference](https://leetcode.com/problems/minimum-time-difference/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-time-difference.cpp"
      ],
      [
        "Python",
        "Python/minimum-time-difference.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 540,
    "Title": "[Single Element in a Sorted Array](https://leetcode.com/problems/dsingle-element-in-a-sorted-array/)",
    "Solution": [
      [
        "C++",
        "C++/single-element-in-a-sorted-array.cpp"
      ],
      [
        "Python",
        "Python/single-element-in-a-sorted-array.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 541,
    "Title": "[Reverse String II](https://leetcode.com/problems/reverse-string-ii/)",
    "Solution": [
      [
        "C++",
        "C++/reverse-string-ii.cpp"
      ],
      [
        "Python",
        "Python/reverse-string-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 542,
    "Title": "[01 Matrix](https://leetcode.com/problems/01-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/01-matrix.cpp"
      ],
      [
        "Python",
        "Python/01-matrix.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 543,
    "Title": "[Diameter of Binary Tree](https://leetcode.com/problems/diameter-of-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/diameter-of-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/diameter-of-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 544,
    "Title": "[Output Contest Matches](https://leetcode.com/problems/output-contest-matches/)",
    "Solution": [
      [
        "C++",
        "C++/output-contest-matches.cpp"
      ],
      [
        "Python",
        "Python/output-contest-matches.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 545,
    "Title": "[Boundary of Binary Tree](https://leetcode.com/problems/boundary-of-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/boundary-of-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/boundary-of-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 546,
    "Title": "[Remove Boxes](https://leetcode.com/problems/remove-boxes/)",
    "Solution": [
      [
        "C++",
        "C++/remove-boxes.cpp"
      ],
      [
        "Python",
        "Python/remove-boxes.py"
      ]
    ],
    "Time": "_O(n^3)_ ~ _O(n^4)_",
    "Space": "_O(n^3)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 547,
    "Title": "[Friend Circles](https://leetcode.com/problems/friend-circles/)",
    "Solution": [
      [
        "C++",
        "C++/friend-circles.cpp"
      ],
      [
        "Python",
        "Python/friend-circles.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Union Find"
  },
  {
    "Index": 548,
    "Title": "[Split Array with Equal Sum](https://leetcode.com/problems/split-array-with-equal-sum/)",
    "Solution": [
      [
        "C++",
        "C++/split-array-with-equal-sum.cpp"
      ],
      [
        "Python",
        "Python/split-array-with-equal-sum.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 549,
    "Title": "[Binary Tree Longest Consecutive Sequence II](https://leetcode.com/problems/binary-tree-longest-consecutive-sequence-ii/)",
    "Solution": [
      [
        "C++",
        "C++/binary-tree-longest-consecutive-sequence-ii.cpp"
      ],
      [
        "Python",
        "Python/binary-tree-longest-consecutive-sequence-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 550,
    "Title": "[Game Play Analysis IV](https://leetcode.com/problems/game-play-analysis-iv/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/game-play-analysis-iv.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 551,
    "Title": "[Student Attendance Record I](https://leetcode.com/problems/student-attendance-record-i/)",
    "Solution": [
      [
        "C++",
        "C++/student-attendance-record-i.cpp"
      ],
      [
        "Python",
        "Python/student-attendance-record-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 552,
    "Title": "[Student Attendance Record II](https://leetcode.com/problems/student-attendance-record-ii/)",
    "Solution": [
      [
        "C++",
        "C++/student-attendance-record-ii.cpp"
      ],
      [
        "Python",
        "Python/student-attendance-record-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 553,
    "Title": "[Optimal Division](https://leetcode.com/problems/optimal-division/)",
    "Solution": [
      [
        "C++",
        "C++/optimal-division.cpp"
      ],
      [
        "Python",
        "Python/optimal-division.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 554,
    "Title": "[Brick Wall](https://leetcode.com/problems/brick-wall/)",
    "Solution": [
      [
        "C++",
        "C++/brick-wall.cpp"
      ],
      [
        "Python",
        "Python/brick-wall.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(m)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 555,
    "Title": "[Split Concatenated Strings](https://leetcode.com/problems/split-concatenated-strings/)",
    "Solution": [
      [
        "C++",
        "C++/split-concatenated-strings.cpp"
      ],
      [
        "Python",
        "Python/split-concatenated-strings.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "String"
  },
  {
    "Index": 556,
    "Title": "[Next Greater Element III](https://leetcode.com/problems/next-greater-element-iii/)",
    "Solution": [
      [
        "C++",
        "C++/next-greater-element-iii.cpp"
      ],
      [
        "Python",
        "Python/next-greater-element-iii.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 557,
    "Title": "[Reverse Words in a String III](https://leetcode.com/problems/reverse-words-in-a-string-iii/)",
    "Solution": [
      [
        "C++",
        "C++/reverse-words-in-a-string-iii.cpp"
      ],
      [
        "Python",
        "Python/reverse-words-in-a-string-iii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 558,
    "Title": "[Logical OR of Two Binary Grids Represented as Quad-Trees](https://leetcode.com/problems/logical-or-of-two-binary-grids-represented-as-quad-trees/)",
    "Solution": [
      [
        "C++",
        "C++/logical-or-of-two-binary-grids-represented-as-quad-trees.cpp"
      ],
      [
        "Python",
        "Python/logical-or-of-two-binary-grids-represented-as-quad-trees.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Tree, Divide and Conquer"
  },
  {
    "Index": 559,
    "Title": "[Max Consecutive Ones](https://leetcode.com/problems/maximum-depth-of-n-ary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-depth-of-n-ary-tree.cpp"
      ],
      [
        "Python",
        "Python/maximum-depth-of-n-ary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Tree, DFS"
  },
  {
    "Index": 560,
    "Title": "[Subarray Sum Equals K](https://leetcode.com/problems/subarray-sum-equals-k/)",
    "Solution": [
      [
        "C++",
        "C++/subarray-sum-equals-k.cpp"
      ],
      [
        "Python",
        "Python/subarray-sum-equals-k.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 561,
    "Title": "[Array Partition I](https://leetcode.com/problems/array-partition-i/)",
    "Solution": [
      [
        "C++",
        "C++/array-partition-i.cpp"
      ],
      [
        "Python",
        "Python/array-partition-i.py"
      ]
    ],
    "Time": "_O(r)_",
    "Space": "_O(r)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 562,
    "Title": "[Longest Line of Consecutive One in Matrix](https://leetcode.com/problems/longest-line-of-consecutive-one-in-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/longest-line-of-consecutive-one-in-matrix.cpp"
      ],
      [
        "Python",
        "Python/longest-line-of-consecutive-one-in-matrix.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 563,
    "Title": "[Binary Tree Tilt](https://leetcode.com/problems/binary-tree-tilt/)",
    "Solution": [
      [
        "C++",
        "C++/binary-tree-tilt.cpp"
      ],
      [
        "Python",
        "Python/binary-tree-tilt.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 564,
    "Title": "[Find the Closest Palindrome](https://leetcode.com/problems/find-the-closest-palindrome/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-closest-palindrome.cpp"
      ],
      [
        "Python",
        "Python/find-the-closest-palindrome.py"
      ]
    ],
    "Time": "_O(l)_",
    "Space": "_O(l)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 565,
    "Title": "[Array Nesting](https://leetcode.com/problems/array-nesting/)",
    "Solution": [
      [
        "C++",
        "C++/array-nesting.cpp"
      ],
      [
        "Python",
        "Python/array-nesting.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 566,
    "Title": "[Reshape the Matrix](https://leetcode.com/problems/reshape-the-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/reshape-the-matrix.cpp"
      ],
      [
        "Python",
        "Python/reshape-the-matrix.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 567,
    "Title": "[Permutation in String](https://leetcode.com/problems/permutation-in-string/)",
    "Solution": [
      [
        "C++",
        "C++/permutation-in-string.cpp"
      ],
      [
        "Python",
        "Python/permutation-in-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 568,
    "Title": "[Maximum Vacation Days](https://leetcode.com/problems/maximum-vacation-days/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-vacation-days.cpp"
      ],
      [
        "Python",
        "Python/maximum-vacation-days.py"
      ]
    ],
    "Time": "_O(n^2 * k)_",
    "Space": "_O(k)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 569,
    "Title": "[Median Employee Salary](https://leetcode.com/problems/median-employee-salary/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/median-employee-salary.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 570,
    "Title": "[Managers with at Least 5 Direct Reports](https://leetcode.com/problems/managers-with-at-least-5-direct-reports/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/managers-with-at-least-5-direct-reports.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 571,
    "Title": "[Find Median Given Frequency of Numbers](https://leetcode.com/problems/find-median-given-frequency-of-numbers/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-median-given-frequency-of-numbers.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 572,
    "Title": "[Subtree of Another Tree](https://leetcode.com/problems/construct-string-from-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/subtree-of-another-tree.cpp"
      ],
      [
        "Python",
        "Python/subtree-of-another-tree.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 573,
    "Title": "[Squirrel Simulation](https://leetcode.com/problems/squirrel-simulation/)",
    "Solution": [
      [
        "C++",
        "C++/squirrel-simulation.cpp"
      ],
      [
        "Python",
        "Python/squirrel-simulation.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 574,
    "Title": "[Winning Candidate](https://leetcode.com/problems/winning-candidate/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/winning-candidate.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 575,
    "Title": "[Distribute Candies](https://leetcode.com/problems/distribute-candies/)",
    "Solution": [
      [
        "C++",
        "C++/distribute-candies.cpp"
      ],
      [
        "Python",
        "Python/distribute-candies.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 576,
    "Title": "[Out of Boundary Paths](https://leetcode.com/problems/out-of-boundary-paths/)",
    "Solution": [
      [
        "C++",
        "C++/out-of-boundary-paths.cpp"
      ],
      [
        "Python",
        "Python/out-of-boundary-paths.py"
      ]
    ],
    "Time": "_O(N * m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 577,
    "Title": "[Employee Bonus](https://leetcode.com/problems/employee-bonus/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/employee-bonus.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 578,
    "Title": "[Get Highest Answer Rate Question](https://leetcode.com/problems/get-highest-answer-rate-question/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/get-highest-answer-rate-question.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 579,
    "Title": "[Find Cumulative Salary of an Employee](https://leetcode.com/problems/find-cumulative-salary-of-an-employee/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-cumulative-salary-of-an-employee.sql"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 580,
    "Title": "[Count Student Number in Departments](https://leetcode.com/problems/count-student-number-in-departments/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/count-student-number-in-departments.sql"
      ]
    ],
    "Time": "_O(s + dlogd)_",
    "Space": "_O(s + d)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 581,
    "Title": "[Shortest Unsorted Continuous Subarray](https://leetcode.com/problems/shortest-unsorted-continuous-subarray/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-unsorted-continuous-subarray.cpp"
      ],
      [
        "Python",
        "Python/shortest-unsorted-continuous-subarray.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 582,
    "Title": "[Kill Process](https://leetcode.com/problems/kill-process/)",
    "Solution": [
      [
        "C++",
        "C++/kill-process.cpp"
      ],
      [
        "Python",
        "Python/kill-process.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "DFS, BFS"
  },
  {
    "Index": 583,
    "Title": "[Delete Operation for Two Strings](https://leetcode.com/problems/delete-operation-for-two-strings/)",
    "Solution": [
      [
        "C++",
        "C++/delete-operation-for-two-strings.cpp"
      ],
      [
        "Python",
        "Python/delete-operation-for-two-strings.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 584,
    "Title": "[Find Customer Referee](https://leetcode.com/problems/find-customer-referee/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-customer-referee.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 585,
    "Title": "[Investments in 2016](https://leetcode.com/problems/investments-in-2016/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/investments-in-2016.sql"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 586,
    "Title": "[Customer Placing the Largest Number of Orders](https://leetcode.com/problems/customer-placing-the-largest-number-of-orders/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/customer-placing-the-largest-number-of-orders.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 587,
    "Title": "[Erect the Fence](https://leetcode.com/problems/erect-the-fence/)",
    "Solution": [
      [
        "C++",
        "C++/erect-the-fence.cpp"
      ],
      [
        "Python",
        "Python/erect-the-fence.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Convex Hull, `Monotone Chain`"
  },
  {
    "Index": 588,
    "Title": "[Design In-Memory File System](https://leetcode.com/problems/design-in-memory-file-system/)",
    "Solution": [
      [
        "C++",
        "C++/design-in-memory-file-system.cpp"
      ],
      [
        "Python",
        "Python/design-in-memory-file-system.py"
      ]
    ],
    "Time": "ls: _O(l + klogk)_<br> mkdir: _O(l)_<br> addContentToFile: _O(l + c)_<br> readContentFromFile: _O(l + c)_",
    "Space": "_O(n + s)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 589,
    "Title": "[N-ary Tree Preorder Traversal](https://leetcode.com/problems/n-ary-tree-preorder-traversal/)",
    "Solution": [
      [
        "C++",
        "C++/n-ary-tree-preorder-traversal.cpp"
      ],
      [
        "Python",
        "Python/n-ary-tree-preorder-traversal.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Tree, Preorder Traversal"
  },
  {
    "Index": 590,
    "Title": "[N-ary Tree Postorder Traversal](https://leetcode.com/problems/n-ary-tree-postorder-traversal/)",
    "Solution": [
      [
        "C++",
        "C++/n-ary-tree-postorder-traversal.cpp"
      ],
      [
        "Python",
        "Python/n-ary-tree-postorder-traversal.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Tree, Preorder Traversal"
  },
  {
    "Index": 591,
    "Title": "[Tag Validator](https://leetcode.com/problems/tag-validator/)",
    "Solution": [
      [
        "C++",
        "C++/tag-validator.cpp"
      ],
      [
        "Python",
        "Python/tag-validator.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 592,
    "Title": "[Fraction Addition and Subtraction](https://leetcode.com/problems/fraction-addition-and-subtraction/)",
    "Solution": [
      [
        "C++",
        "C++/fraction-addition-and-subtraction.cpp"
      ],
      [
        "Python",
        "Python/fraction-addition-and-subtraction.py"
      ]
    ],
    "Time": "_O(nlogx)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 593,
    "Title": "[Valid Square](https://leetcode.com/problems/valid-square/)",
    "Solution": [
      [
        "C++",
        "C++/valid-square.cpp"
      ],
      [
        "Python",
        "Python/valid-square.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 594,
    "Title": "[Longest Harmonious Subsequence](https://leetcode.com/problems/longest-harmonious-subsequence/)",
    "Solution": [
      [
        "C++",
        "C++/longest-harmonious-subsequence.cpp"
      ],
      [
        "Python",
        "Python/longest-harmonious-subsequence.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 595,
    "Title": "[Big Countries](https://leetcode.com/problems/big-countries/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/big-countries.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 596,
    "Title": "[Classes More Than 5 Students](https://leetcode.com/problems/classes-more-than-5-students/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/classes-more-than-5-students.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 597,
    "Title": "[Friend Requests I: Overall Acceptance Rate](https://leetcode.com/problems/friend-requests-i-overall-acceptance-rate/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/friend-requests-i-overall-acceptance-rate.sql"
      ]
    ],
    "Time": "_O(rlogr + aloga)_",
    "Space": "_O(r + a)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 598,
    "Title": "[Range Addition II](https://leetcode.com/problems/range-addition-ii/)",
    "Solution": [
      [
        "C++",
        "C++/range-addition-ii.cpp"
      ],
      [
        "Python",
        "Python/range-addition-ii.py"
      ]
    ],
    "Time": "_O(p)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 599,
    "Title": "[Minimum Index Sum of Two Lists](https://leetcode.com/problems/minimum-index-sum-of-two-lists/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-index-sum-of-two-lists.cpp"
      ],
      [
        "Python",
        "Python/minimum-index-sum-of-two-lists.py"
      ]
    ],
    "Time": "_O((m + n) * l)_",
    "Space": "_O(m * l)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 600,
    "Title": "[Non-negative Integers without Consecutive Ones](https://leetcode.com/problems/non-negative-integers-without-consecutive-ones/)",
    "Solution": [
      [
        "C++",
        "C++/non-negative-integers-without-consecutive-ones.cpp"
      ],
      [
        "Python",
        "Python/non-negative-integers-without-consecutive-ones.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 601,
    "Title": "[Human Traffic of Stadium](https://leetcode.com/problems/human-traffic-of-stadium/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/human-traffic-of-stadium.sql"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(n^3)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 602,
    "Title": "[Friend Requests II: Who Has the Most Friends](https://leetcode.com/problems/friend-requests-ii-who-has-the-most-friends/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/friend-requests-ii-who-has-the-most-friends.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 603,
    "Title": "[Consecutive Available Seats](https://leetcode.com/problems/consecutive-available-seats/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/consecutive-available-seats.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": "Window Function"
  },
  {
    "Index": 604,
    "Title": "[Design Compressed String Iterator](https://leetcode.com/problems/design-compressed-string-iterator/)",
    "Solution": [
      [
        "C++",
        "C++/design-compressed-string-iterator.cpp"
      ],
      [
        "Python",
        "Python/design-compressed-string-iterator.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 605,
    "Title": "[Can Place Flowers](https://leetcode.com/problems/can-place-flowers/)",
    "Solution": [
      [
        "C++",
        "C++/can-place-flowers.cpp"
      ],
      [
        "Python",
        "Python/can-place-flowers.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 606,
    "Title": "[Construct String from Binary Tree](https://leetcode.com/problems/construct-string-from-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/construct-string-from-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/construct-string-from-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 607,
    "Title": "[Sales Person](https://leetcode.com/problems/sales-person/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/sales-person.sql"
      ]
    ],
    "Time": "_O(s * o)_",
    "Space": "_O(s + o)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 608,
    "Title": "[Tree Node](https://leetcode.com/problems/tree-node/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/tree-node.sql"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 609,
    "Title": "[Find Duplicate File in System](https://leetcode.com/problems/find-duplicate-file-in-system/)",
    "Solution": [
      [
        "C++",
        "C++/find-duplicate-file-in-system.cpp"
      ],
      [
        "Python",
        "Python/find-duplicate-file-in-system.py"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(n * l)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 610,
    "Title": "[Triangle Judgement](https://leetcode.com/problems/triangle-judgement/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/triangle-judgement.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 611,
    "Title": "[Valid Triangle Number](https://leetcode.com/problems/valid-triangle-number/)",
    "Solution": [
      [
        "C++",
        "C++/valid-triangle-number.cpp"
      ],
      [
        "Python",
        "Python/valid-triangle-number.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 612,
    "Title": "[Shortest Distance in a Plane](https://leetcode.com/problems/shortest-distance-in-a-plane/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/shortest-distance-in-a-plane.sql"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 613,
    "Title": "[Shortest Distance in a Line](https://leetcode.com/problems/shortest-distance-in-a-line/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/shortest-distance-in-a-line.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 614,
    "Title": "[Second Degree Follower](https://leetcode.com/problems/second-degree-follower/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/second-degree-follower.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 615,
    "Title": "[Average Salary: Departments VS Company](https://leetcode.com/problems/average-salary-departments-vs-company/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/average-salary-departments-vs-company.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 616,
    "Title": "[Add Bold Tag in String](https://leetcode.com/problems/add-bold-tag-in-string/)",
    "Solution": [
      [
        "C++",
        "C++/add-bold-tag-in-string.cpp"
      ],
      [
        "Python",
        "Python/add-bold-tag-in-string.py"
      ]
    ],
    "Time": "_O(n * d * l)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 617,
    "Title": "[Merge Two Binary Trees](https://leetcode.com/problems/merge-two-binary-trees/)",
    "Solution": [
      [
        "C++",
        "C++/merge-two-binary-trees.cpp"
      ],
      [
        "Python",
        "Python/merge-two-binary-trees.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 618,
    "Title": "[Students Report By Geography](https://leetcode.com/problems/students-report-by-geography/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/students-report-by-geography.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 619,
    "Title": "[Biggest Single Number](https://leetcode.com/problems/biggest-single-number/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/biggest-single-number.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 620,
    "Title": "[Not Boring Movies](https://leetcode.com/problems/not-boring-movies/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/not-boring-movies.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 621,
    "Title": "[Task Scheduler](https://leetcode.com/problems/task-scheduler/)",
    "Solution": [
      [
        "C++",
        "C++/task-scheduler.cpp"
      ],
      [
        "Python",
        "Python/task-scheduler.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 622,
    "Title": "[Design Circular Queue](https://leetcode.com/problems/design-circular-queue/)",
    "Solution": [
      [
        "C++",
        "C++/design-circular-queue.cpp"
      ],
      [
        "Python",
        "Python/design-circular-queue.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Design"
  },
  {
    "Index": 623,
    "Title": "[Add One Row to Tree](https://leetcode.com/problems/add-one-row-to-tree/)",
    "Solution": [
      [
        "C++",
        "C++/add-one-row-to-tree.cpp"
      ],
      [
        "Python",
        "Python/add-one-row-to-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 624,
    "Title": "[Maximum Distance in Arrays](https://leetcode.com/problems/maximum-distance-in-arrays/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-distance-in-arrays.cpp"
      ],
      [
        "Python",
        "Python/maximum-distance-in-arrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒"
  },
  {
    "Index": 625,
    "Title": "[Minimum Factorization](https://leetcode.com/problems/minimum-factorization/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-factorization.cpp"
      ],
      [
        "Python",
        "Python/minimum-factorization.py"
      ]
    ],
    "Time": "_O(loga)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 626,
    "Title": "[Exchange Seats](https://leetcode.com/problems/exchange-seats/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/exchange-seats.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 627,
    "Title": "[Swap Salary](https://leetcode.com/problems/swap-salary/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/swap-salary.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 628,
    "Title": "[Maximum Product of Three Numbers](https://leetcode.com/problems/maximum-product-of-three-numbers/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-product-of-three-numbers.cpp"
      ],
      [
        "Python",
        "Python/maximum-product-of-three-numbers.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 629,
    "Title": "[K Inverse Pairs Array](https://leetcode.com/problems/k-inverse-pairs-array/)",
    "Solution": [
      [
        "C++",
        "C++/k-inverse-pairs-array.cpp"
      ],
      [
        "Python",
        "Python/k-inverse-pairs-array.py"
      ]
    ],
    "Time": "_O(n * k)_",
    "Space": "_O(k)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 630,
    "Title": "[Course Schedule III](https://leetcode.com/problems/course-schedule-iii/)",
    "Solution": [
      [
        "C++",
        "C++/course-schedule-iii.cpp"
      ],
      [
        "Python",
        "Python/course-schedule-iii.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(k)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 631,
    "Title": "[Design Excel Sum Formula](https://leetcode.com/problems/design-excel-sum-formula/)",
    "Solution": [
      [
        "C++",
        "C++/design-excel-sum-formula.cpp"
      ],
      [
        "Python",
        "Python/design-excel-sum-formula.py"
      ]
    ],
    "Time": "set: _O((r * c)^2)_<br>get: _O(1)_<br>sum: _O((r * c)^2)_",
    "Space": "_O(r * c)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 632,
    "Title": "[Smallest Range](https://leetcode.com/problems/smallest-range/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-range.cpp"
      ],
      [
        "Python",
        "Python/smallest-range.py"
      ]
    ],
    "Time": "_O(nlogk)_",
    "Space": "_O(k)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 633,
    "Title": "[Sum of Square Numbers](https://leetcode.com/problems/sum-of-square-numbers/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-square-numbers.cpp"
      ],
      [
        "Python",
        "Python/sum-of-square-numbers.py"
      ]
    ],
    "Time": "_O(sqrt(c) * logc)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 634,
    "Title": "[Find the Derangement of An Array](https://leetcode.com/problems/find-the-derangement-of-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-derangement-of-an-array.cpp"
      ],
      [
        "Python",
        "Python/find-the-derangement-of-an-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 635,
    "Title": "[Design Log Storage System](https://leetcode.com/problems/design-log-storage-system/)",
    "Solution": [
      [
        "C++",
        "C++/design-log-storage-system.cpp"
      ],
      [
        "Python",
        "Python/design-log-storage-system.py"
      ]
    ],
    "Time": "put: _O(1)_<br> retrieve: _O(n + dlogd)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 636,
    "Title": "[Exclusive Time of Functions](https://leetcode.com/problems/exclusive-time-of-functions/)",
    "Solution": [
      [
        "C++",
        "C++/exclusive-time-of-functions.cpp"
      ],
      [
        "Python",
        "Python/exclusive-time-of-functions.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 637,
    "Title": "[Average of Levels in Binary Tree](https://leetcode.com/problems/average-of-levels-in-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/average-of-levels-in-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/average-of-levels-in-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 638,
    "Title": "[Shopping Offers](https://leetcode.com/problems/shopping-offers/)",
    "Solution": [
      [
        "C++",
        "C++/shopping-offers.cpp"
      ],
      [
        "Python",
        "Python/shopping-offers.py"
      ]
    ],
    "Time": "_O(n * 2^n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 639,
    "Title": "[Decode Ways II](https://leetcode.com/problems/decode-ways-ii/)",
    "Solution": [
      [
        "C++",
        "C++/decode-ways-ii.cpp"
      ],
      [
        "Python",
        "Python/decode-ways-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 640,
    "Title": "[Solve the Equation](https://leetcode.com/problems/solve-the-equation/)",
    "Solution": [
      [
        "C++",
        "C++/solve-the-equation.cpp"
      ],
      [
        "Python",
        "Python/solve-the-equation.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 641,
    "Title": "[Design Circular Deque](https://leetcode.com/problems/design-circular-deque/)",
    "Solution": [
      [
        "C++",
        "C++/design-circular-deque.cpp"
      ],
      [
        "Python",
        "Python/design-circular-deque.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Design"
  },
  {
    "Index": 642,
    "Title": "[Design Search Autocomplete System](https://leetcode.com/problems/design-search-autocomplete-system/)",
    "Solution": [
      [
        "C++",
        "C++/design-search-autocomplete-system.cpp"
      ],
      [
        "Python",
        "Python/design-search-autocomplete-system.py"
      ]
    ],
    "Time": "_O(p^2)_",
    "Space": "_O(p * t + s)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 643,
    "Title": "[Maximum Average Subarray I](https://leetcode.com/problems/maximum-average-subarray-i/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-average-subarray-i.cpp"
      ],
      [
        "Python",
        "Python/maximum-average-subarray-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 644,
    "Title": "[Maximum Average Subarray II](https://leetcode.com/problems/maximum-average-subarray-ii/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-average-subarray-ii.cpp"
      ],
      [
        "Python",
        "Python/maximum-average-subarray-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 645,
    "Title": "[Set Mismatch](https://leetcode.com/problems/set-mismatch/)",
    "Solution": [
      [
        "C++",
        "C++/set-mismatch.cpp"
      ],
      [
        "Python",
        "Python/set-mismatch.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 646,
    "Title": "[Maximum Length of Pair Chain](https://leetcode.com/problems/maximum-length-of-pair-chain/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-length-of-pair-chain.cpp"
      ],
      [
        "Python",
        "Python/maximum-length-of-pair-chain.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Non-overlapping Intervals](https://leetcode.com/problems/non-overlapping-intervals/)"
  },
  {
    "Index": 647,
    "Title": "[Palindromic Substrings](https://leetcode.com/problems/palindromic-substrings/)",
    "Solution": [
      [
        "C++",
        "C++/palindromic-substrings.cpp"
      ],
      [
        "Python",
        "Python/palindromic-substrings.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 648,
    "Title": "[Replace Words](https://leetcode.com/problems/replace-words/)",
    "Solution": [
      [
        "C++",
        "C++/replace-words.cpp"
      ],
      [
        "Python",
        "Python/replace-words.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(t)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Trie"
  },
  {
    "Index": 649,
    "Title": "[Dota2 Senate](https://leetcode.com/problems/dota2-senate/)",
    "Solution": [
      [
        "C++",
        "C++/dota2-senate.cpp"
      ],
      [
        "Python",
        "Python/dota2-senate.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 650,
    "Title": "[2 Keys Keyboard](https://leetcode.com/problems/2-keys-keyboard/)",
    "Solution": [
      [
        "C++",
        "C++/2-keys-keyboard.cpp"
      ],
      [
        "Python",
        "Python/2-keys-keyboard.py"
      ]
    ],
    "Time": "_O(sqrt(n))_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 651,
    "Title": "[4 Keys Keyboard](https://leetcode.com/problems/4-keys-keyboard/)",
    "Solution": [
      [
        "C++",
        "C++/4-keys-keyboard.cpp"
      ],
      [
        "Python",
        "Python/4-keys-keyboard.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Math, DP"
  },
  {
    "Index": 652,
    "Title": "[Find Duplicate Subtrees](https://leetcode.com/problems/find-duplicate-subtrees/)",
    "Solution": [
      [
        "C++",
        "C++/find-duplicate-subtrees.cpp"
      ],
      [
        "Python",
        "Python/find-duplicate-subtrees.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS, Hash"
  },
  {
    "Index": 653,
    "Title": "[Two Sum IV - Input is a BST](https://leetcode.com/problems/two-sum-iv-input-is-a-bst/)",
    "Solution": [
      [
        "C++",
        "C++/two-sum-iv-input-is-a-bst.cpp"
      ],
      [
        "Python",
        "Python/two-sum-iv-input-is-a-bst.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Two Pointers"
  },
  {
    "Index": 654,
    "Title": "[Maximum Binary Tree](https://leetcode.com/problems/maximum-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/maximum-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "LintCode",
    "Note": "Mono Stack,  Cartesian Tree"
  },
  {
    "Index": 655,
    "Title": "[Print Binary Tree](https://leetcode.com/problems/print-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/print-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/print-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 656,
    "Title": "[Coin Path](https://leetcode.com/problems/coin-path/)",
    "Solution": [
      [
        "C++",
        "C++/coin-path.cpp"
      ],
      [
        "Python",
        "Python/coin-path.py"
      ]
    ],
    "Time": "_O(n * B)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 657,
    "Title": "[Robot Return to Origin](https://leetcode.com/problems/robot-return-to-origin/)",
    "Solution": [
      [
        "C++",
        "C++/robot-return-to-origin.cpp"
      ],
      [
        "Python",
        "Python/robot-return-to-origin.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 658,
    "Title": "[Find K Closest Elements](https://leetcode.com/problems/find-k-closest-elements/)",
    "Solution": [
      [
        "C++",
        "C++/find-k-closest-elements.cpp"
      ],
      [
        "Python",
        "Python/find-k-closest-elements.py"
      ]
    ],
    "Time": "_O(logn + k)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 659,
    "Title": "[Split Array into Consecutive Subsequences](https://leetcode.com/problems/split-array-into-consecutive-subsequences/)",
    "Solution": [
      [
        "C++",
        "C++/split-array-into-consecutive-subsequences.cpp"
      ],
      [
        "Python",
        "Python/split-array-into-consecutive-subsequences.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 660,
    "Title": "[Remove 9](https://leetcode.com/problems/remove-9/)",
    "Solution": [
      [
        "C++",
        "C++/remove-9.cpp"
      ],
      [
        "Python",
        "Python/remove-9.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 661,
    "Title": "[Image Smoother](https://leetcode.com/problems/image-smoother/)",
    "Solution": [
      [
        "C++",
        "C++/image-smoother.cpp"
      ],
      [
        "Python",
        "Python/image-smoother.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 662,
    "Title": "[Maximum Width of Binary Tree](https://leetcode.com/problems/maximum-width-of-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-width-of-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/maximum-width-of-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 663,
    "Title": "[Equal Tree Partition](https://leetcode.com/problems/strange-printer/)",
    "Solution": [
      [
        "C++",
        "C++/equal-tree-partition.cpp"
      ],
      [
        "Python",
        "Python/equal-tree-partition.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 664,
    "Title": "[Strange Printer](https://leetcode.com/problems/strange-printer/)",
    "Solution": [
      [
        "C++",
        "C++/strange-printer.cpp"
      ],
      [
        "Python",
        "Python/strange-printer.py"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 665,
    "Title": "[Non-decreasing Array](https://leetcode.com/problems/non-decreasing-array/)",
    "Solution": [
      [
        "C++",
        "C++/non-decreasing-array.cpp"
      ],
      [
        "Python",
        "Python/non-decreasing-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 666,
    "Title": "[Path Sum IV](https://leetcode.com/problems/path-sum-iv/)",
    "Solution": [
      [
        "C++",
        "C++/path-sum-iv.cpp"
      ],
      [
        "Python",
        "Python/path-sum-iv.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(w)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Topological Sort"
  },
  {
    "Index": 667,
    "Title": "[Beautiful Arrangement II](https://leetcode.com/problems/beautiful-arrangement-ii/)",
    "Solution": [
      [
        "C++",
        "C++/beautiful-arrangement-ii.cpp"
      ],
      [
        "Python",
        "Python/beautiful-arrangement-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 668,
    "Title": "[Kth Smallest Number in Multiplication Table](https://leetcode.com/problems/kth-smallest-number-in-multiplication-table/)",
    "Solution": [
      [
        "C++",
        "C++/kth-smallest-number-in-multiplication-table.cpp"
      ],
      [
        "Python",
        "Python/kth-smallest-number-in-multiplication-table.py"
      ]
    ],
    "Time": "_O(m * log(m * n))_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 669,
    "Title": "[Trim a Binary Search Tree](https://leetcode.com/problems/trim-a-binary-search-tree/)",
    "Solution": [
      [
        "C++",
        "C++/trim-a-binary-search-tree.cpp"
      ],
      [
        "Python",
        "Python/trim-a-binary-search-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 670,
    "Title": "[Maximum Swap](https://leetcode.com/problems/maximum-swap/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-swap.cpp"
      ],
      [
        "Python",
        "Python/maximum-swap.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(logn)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 671,
    "Title": "[Second Minimum Node In a Binary Tree](https://leetcode.com/problems/second-minimum-node-in-a-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/second-minimum-node-in-a-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/second-minimum-node-in-a-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 672,
    "Title": "[Bulb Switcher II](https://leetcode.com/problems/bulb-switcher-ii/)",
    "Solution": [
      [
        "C++",
        "C++/bulb-switcher-ii.cpp"
      ],
      [
        "Python",
        "Python/bulb-switcher-ii.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 673,
    "Title": "[Number of Longest Increasing Subsequence](https://leetcode.com/problems/number-of-longest-increasing-subsequence/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-longest-increasing-subsequence.cpp"
      ],
      [
        "Python",
        "Python/number-of-longest-increasing-subsequence.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 674,
    "Title": "[Longest Continuous Increasing Subsequence](https://leetcode.com/problems/longest-continuous-increasing-subsequence/)",
    "Solution": [
      [
        "C++",
        "C++/longest-continuous-increasing-subsequence.cpp"
      ],
      [
        "Python",
        "Python/longest-continuous-increasing-subsequence.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 675,
    "Title": "[Cut Off Trees for Golf Event](https://leetcode.com/problems/cut-off-trees-for-golf-event/)",
    "Solution": [
      [
        "C++",
        "C++/cut-off-trees-for-golf-event.cpp"
      ],
      [
        "Python",
        "Python/cut-off-trees-for-golf-event.py"
      ]
    ],
    "Time": "_O(t * m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "`A* Search Algorithm`"
  },
  {
    "Index": 676,
    "Title": "[Implement Magic Dictionary](https://leetcode.com/problems/implement-magic-dictionary/)",
    "Solution": [
      [
        "C++",
        "C++/implement-magic-dictionary.cpp"
      ],
      [
        "Python",
        "Python/implement-magic-dictionary.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(d)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 677,
    "Title": "[Map Sum Pairs](https://leetcode.com/problems/map-sum-pairs/)",
    "Solution": [
      [
        "C++",
        "C++/map-sum-pairs.cpp"
      ],
      [
        "Python",
        "Python/map-sum-pairs.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(t)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 678,
    "Title": "[Valid Parenthesis String](https://leetcode.com/problems/valid-parenthesis-string/)",
    "Solution": [
      [
        "C++",
        "C++/valid-parenthesis-string.cpp"
      ],
      [
        "Python",
        "Python/valid-parenthesis-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 679,
    "Title": "[24 Game](https://leetcode.com/problems/24-game/)",
    "Solution": [
      [
        "C++",
        "C++/24-game.cpp"
      ],
      [
        "Python",
        "Python/24-game.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 680,
    "Title": "[Valid Palindrome II](https://leetcode.com/problems/valid-palindrome-ii/)",
    "Solution": [
      [
        "C++",
        "C++/valid-palindrome-ii.cpp"
      ],
      [
        "Python",
        "Python/valid-palindrome-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 681,
    "Title": "[Next Closest Time](https://leetcode.com/problems/next-closest-time/)",
    "Solution": [
      [
        "C++",
        "C++/next-closest-time.cpp"
      ],
      [
        "Python",
        "Python/next-closest-time.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 682,
    "Title": "[Baseball Game](https://leetcode.com/problems/baseball-game/)",
    "Solution": [
      [
        "C++",
        "C++/baseball-game.cpp"
      ],
      [
        "Python",
        "Python/baseball-game.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 683,
    "Title": "[K Empty Slots](https://leetcode.com/problems/k-empty-slots/)",
    "Solution": [
      [
        "C++",
        "C++/k-empty-slots.cpp"
      ],
      [
        "Python",
        "Python/k-empty-slots.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 684,
    "Title": "[Redundant Connection](https://leetcode.com/problems/redundant-connection/)",
    "Solution": [
      [
        "C++",
        "C++/redundant-connection.cpp"
      ],
      [
        "Python",
        "Python/redundant-connection.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 685,
    "Title": "[Redundant Connection II](https://leetcode.com/problems/redundant-connection-ii/)",
    "Solution": [
      [
        "C++",
        "C++/redundant-connection-ii.cpp"
      ],
      [
        "Python",
        "Python/redundant-connection-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 686,
    "Title": "[Repeated String Match](https://leetcode.com/problems/repeated-string-match/)",
    "Solution": [
      [
        "C++",
        "C++/repeated-string-match.cpp"
      ],
      [
        "Python",
        "Python/repeated-string-match.py"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "`Rabin-Karp Algorithm`"
  },
  {
    "Index": 687,
    "Title": "[Longest Univalue Path](https://leetcode.com/problems/longest-univalue-path/)",
    "Solution": [
      [
        "C++",
        "C++/longest-univalue-path.cpp"
      ],
      [
        "Python",
        "Python/longest-univalue-path.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 688,
    "Title": "[Knight Probability in Chessboard](https://leetcode.com/problems/knight-probability-in-chessboard/)",
    "Solution": [
      [
        "C++",
        "C++/knight-probability-in-chessboard.cpp"
      ],
      [
        "Python",
        "Python/knight-probability-in-chessboard.py"
      ]
    ],
    "Time": "_O(k * n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 689,
    "Title": "[Maximum Sum of 3 Non-Overlapping Subarrays](https://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-sum-of-3-non-overlapping-subarrays.cpp"
      ],
      [
        "Python",
        "Python/maximum-sum-of-3-non-overlapping-subarrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 690,
    "Title": "[Employee Importance](https://leetcode.com/problems/employee-importance/)",
    "Solution": [
      [
        "C++",
        "C++/employee-importance.cpp"
      ],
      [
        "Python",
        "Python/employee-importance.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 691,
    "Title": "[Stickers to Spell Word](https://leetcode.com/problems/stickers-to-spell-word/)",
    "Solution": [
      [
        "C++",
        "C++/stickers-to-spell-word.cpp"
      ],
      [
        "Python",
        "Python/stickers-to-spell-word.py"
      ]
    ],
    "Time": "_O(T * S^T)_",
    "Space": "_O(T * S^T)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 692,
    "Title": "[Top K Frequent Words](https://leetcode.com/problems/top-k-frequent-words/)",
    "Solution": [
      [
        "C++",
        "C++/top-k-frequent-words.cpp"
      ],
      [
        "Python",
        "Python/top-k-frequent-words.py"
      ]
    ],
    "Time": "_O(n + klogk)_ on average",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Quick Select, Heap, Bucket Sort"
  },
  {
    "Index": 693,
    "Title": "[Binary Number with Alternating Bits](https://leetcode.com/problems/binary-number-with-alternating-bits/)",
    "Solution": [
      [
        "C++",
        "C++/binary-number-with-alternating-bits.cpp"
      ],
      [
        "Python",
        "Python/binary-number-with-alternating-bits.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 694,
    "Title": "[Number of Distinct Islands](https://leetcode.com/problems/number-of-distinct-islands/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-distinct-islands.cpp"
      ],
      [
        "Python",
        "Python/number-of-distinct-islands.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 695,
    "Title": "[Max Area of Island](https://leetcode.com/problems/max-area-of-island/)",
    "Solution": [
      [
        "C++",
        "C++/max-area-of-island.cpp"
      ],
      [
        "Python",
        "Python/max-area-of-island.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 696,
    "Title": "[Count Binary Substrings](https://leetcode.com/problems/count-binary-substrings/)",
    "Solution": [
      [
        "C++",
        "C++/count-binary-substrings.cpp"
      ],
      [
        "Python",
        "Python/count-binary-substrings.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 697,
    "Title": "[Degree of an Array](https://leetcode.com/problems/degree-of-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/degree-of-an-array.cpp"
      ],
      [
        "Python",
        "Python/degree-of-an-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 698,
    "Title": "[Partition to K Equal Sum Subsets](https://leetcode.com/problems/partition-to-k-equal-sum-subsets/)",
    "Solution": [
      [
        "C++",
        "C++/partition-to-k-equal-sum-subsets.cpp"
      ],
      [
        "Python",
        "Python/partition-to-k-equal-sum-subsets.py"
      ]
    ],
    "Time": "_O(n * 2^n)_",
    "Space": "_O(2^n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 699,
    "Title": "[Falling Squares](https://leetcode.com/problems/falling-squares/)",
    "Solution": [
      [
        "C++",
        "C++/falling-squares.cpp"
      ],
      [
        "Python",
        "Python/falling-squares.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Segment Tree"
  },
  {
    "Index": 700,
    "Title": "[Search in a Binary Search Tree](https://leetcode.com/problems/search-in-a-binary-search-tree/)",
    "Solution": [
      [
        "C++",
        "C++/search-in-a-binary-search-tree.cpp"
      ],
      [
        "Python",
        "Python/search-in-a-binary-search-tree.py"
      ]
    ],
    "Time": "_O(h)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Tree"
  },
  {
    "Index": 701,
    "Title": "[Insert into a Binary Search Tree](https://leetcode.com/problems/insert-into-a-binary-search-tree/)",
    "Solution": [
      [
        "C++",
        "C++/insert-into-a-binary-search-tree.cpp"
      ],
      [
        "Python",
        "Python/insert-into-a-binary-search-tree.py"
      ]
    ],
    "Time": "_O(h)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Tree"
  },
  {
    "Index": 702,
    "Title": "[Search in a Sorted Array of Unknown Size](https://leetcode.com/problems/search-in-a-sorted-array-of-unknown-size/)",
    "Solution": [
      [
        "C++",
        "C++/search-in-a-sorted-array-of-unknown-size.cpp"
      ],
      [
        "Python",
        "Python/search-in-a-sorted-array-of-unknown-size.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Binary Search"
  },
  {
    "Index": 703,
    "Title": "[Kth Largest Element in a Stream](https://leetcode.com/problems/kth-largest-element-in-a-stream/)",
    "Solution": [
      [
        "C++",
        "C++/kth-largest-element-in-a-stream.cpp"
      ],
      [
        "Python",
        "Python/kth-largest-element-in-a-stream.py"
      ]
    ],
    "Time": "_O(nlogk)_",
    "Space": "_O(k)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 704,
    "Title": "[Binary Search](https://leetcode.com/problems/binary-search/)",
    "Solution": [
      [
        "C++",
        "C++/binary-search.cpp"
      ],
      [
        "Python",
        "Python/binary-search.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Binary Search"
  },
  {
    "Index": 705,
    "Title": "[Design HashSet](https://leetcode.com/problems/design-hashset/)",
    "Solution": [
      [
        "C++",
        "C++/design-hashset.cpp"
      ],
      [
        "Python",
        "Python/design-hashset.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Design"
  },
  {
    "Index": 706,
    "Title": "[Design HashMap](https://leetcode.com/problems/design-hashmap/)",
    "Solution": [
      [
        "C++",
        "C++/design-hashmap.cpp"
      ],
      [
        "Python",
        "Python/design-hashmap.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Design"
  },
  {
    "Index": 707,
    "Title": "[Design Linked List](https://leetcode.com/problems/design-linked-list/)",
    "Solution": [
      [
        "C++",
        "C++/design-linked-list.cpp"
      ],
      [
        "Python",
        "Python/design-linked-list.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Design"
  },
  {
    "Index": 708,
    "Title": "[Insert into a Sorted Circular Linked List](https://leetcode.com/problems/insert-into-a-sorted-circular-linked-list/)",
    "Solution": [
      [
        "C++",
        "C++/insert-into-a-sorted-circular-linked-list.cpp"
      ],
      [
        "Python",
        "Python/insert-into-a-sorted-circular-linked-list.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Linked List"
  },
  {
    "Index": 709,
    "Title": "[To Lower Case](https://leetcode.com/problems/to-lower-case/)",
    "Solution": [
      [
        "C++",
        "C++/to-lower-case.cpp"
      ],
      [
        "Python",
        "Python/to-lower-case.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "String"
  },
  {
    "Index": 710,
    "Title": "[Random Pick with Blacklist](https://leetcode.com/problems/random-pick-with-blacklist/)",
    "Solution": [
      [
        "C++",
        "C++/random-pick-with-blacklist.cpp"
      ],
      [
        "Python",
        "Python/random-pick-with-blacklist.py"
      ]
    ],
    "Time": "ctor: _O(b)_ <br> pick: _O(1)_",
    "Space": "_O(b)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 711,
    "Title": "[Number of Distinct Islands II](https://leetcode.com/problems/number-of-distinct-islands-ii/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-distinct-islands-ii.cpp"
      ],
      [
        "Python",
        "Python/number-of-distinct-islands-ii.py"
      ]
    ],
    "Time": "_O((m * n) * log(m * n))_",
    "Space": "_O(m * n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Hash"
  },
  {
    "Index": 712,
    "Title": "[Minimum ASCII Delete Sum for Two Strings](https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-ascii-delete-sum-for-two-strings.cpp"
      ],
      [
        "Python",
        "Python/minimum-ascii-delete-sum-for-two-strings.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 713,
    "Title": "[Subarray Product Less Than K](https://leetcode.com/problems/subarray-product-less-than-k/)",
    "Solution": [
      [
        "C++",
        "C++/subarray-product-less-than-k.cpp"
      ],
      [
        "Python",
        "Python/subarray-product-less-than-k.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 714,
    "Title": "[Best Time to Buy and Sell Stock with Transaction Fee](https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/)",
    "Solution": [
      [
        "C++",
        "C++/best-time-to-buy-and-sell-stock-with-transaction-fee.cpp"
      ],
      [
        "Python",
        "Python/best-time-to-buy-and-sell-stock-with-transaction-fee.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 715,
    "Title": "[Range Module](https://leetcode.com/problems/range-module/)",
    "Solution": [
      [
        "C++",
        "C++/range-module.cpp"
      ],
      [
        "Python",
        "Python/range-module.py"
      ]
    ],
    "Time": "add: _O(n)_<br> remove: _O(n)_<br> query: _O(logn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 716,
    "Title": "[Max Stack](https://leetcode.com/problems/max-stack/)",
    "Solution": [
      [
        "C++",
        "C++/max-stack.cpp"
      ],
      [
        "Python",
        "Python/max-stack.py"
      ]
    ],
    "Time": "push: _O(logn)_<br> pop: _O(logn)_<br> popMax: _O(logn)_<br> top: _O(1)_<br> peekMax: _O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 717,
    "Title": "[1-bit and 2-bit Characters](https://leetcode.com/problems/1-bit-and-2-bit-characters/)",
    "Solution": [
      [
        "C++",
        "C++/1-bit-and-2-bit-characters.cpp"
      ],
      [
        "Python",
        "Python/1-bit-and-2-bit-characters.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 718,
    "Title": "[Maximum Length of Repeated Subarray](https://leetcode.com/problems/maximum-length-of-repeated-subarray/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-length-of-repeated-subarray.cpp"
      ],
      [
        "Python",
        "Python/maximum-length-of-repeated-subarray.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(min(m, n))_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 719,
    "Title": "[Find K-th Smallest Pair Distance](https://leetcode.com/problems/find-k-th-smallest-pair-distance/)",
    "Solution": [
      [
        "C++",
        "C++/find-k-th-smallest-pair-distance.cpp"
      ],
      [
        "Python",
        "Python/find-k-th-smallest-pair-distance.py"
      ]
    ],
    "Time": "_O(nlogn + nlogw)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 720,
    "Title": "[Longest Word in Dictionary](https://leetcode.com/problems/longest-word-in-dictionary/)",
    "Solution": [
      [
        "C++",
        "C++/longest-word-in-dictionary.cpp"
      ],
      [
        "Python",
        "Python/longest-word-in-dictionary.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(t)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Trie"
  },
  {
    "Index": 721,
    "Title": "[Accounts Merge](https://leetcode.com/problems/accounts-merge/)",
    "Solution": [
      [
        "C++",
        "C++/accounts-merge.cpp"
      ],
      [
        "Python",
        "Python/accounts-merge.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 722,
    "Title": "[Remove Comments](https://leetcode.com/problems/remove-comments/)",
    "Solution": [
      [
        "C++",
        "C++/remove-comments.cpp"
      ],
      [
        "Python",
        "Python/remove-comments.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 723,
    "Title": "[Candy Crush](https://leetcode.com/problems/candy-crush/)",
    "Solution": [
      [
        "C++",
        "C++/candy-crush.cpp"
      ],
      [
        "Python",
        "Python/candy-crush.py"
      ]
    ],
    "Time": "_O((R * C)^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 724,
    "Title": "[Find Pivot Index](https://leetcode.com/problems/find-pivot-index/)",
    "Solution": [
      [
        "C++",
        "C++/find-pivot-index.cpp"
      ],
      [
        "Python",
        "Python/find-pivot-index.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 725,
    "Title": "[Split Linked List in Parts](https://leetcode.com/problems/split-linked-list-in-parts/)",
    "Solution": [
      [
        "C++",
        "C++/split-linked-list-in-parts.cpp"
      ],
      [
        "Python",
        "Python/split-linked-list-in-parts.py"
      ]
    ],
    "Time": "_O(n + k)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 726,
    "Title": "[Number of Atoms](https://leetcode.com/problems/number-of-atoms/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-atoms.cpp"
      ],
      [
        "Python",
        "Python/number-of-atoms.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 727,
    "Title": "[Minimum Window Subsequence](https://leetcode.com/problems/minimum-window-subsequence/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-window-subsequence.cpp"
      ],
      [
        "Python",
        "Python/minimum-window-subsequence.py"
      ]
    ],
    "Time": "_O(s * t)_",
    "Space": "_O(s)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 728,
    "Title": "[Self Dividing Numbers](https://leetcode.com/problems/self-dividing-numbers/)",
    "Solution": [
      [
        "C++",
        "C++/self-dividing-numbers.cpp"
      ],
      [
        "Python",
        "Python/self-dividing-numbers.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 729,
    "Title": "[My Calendar I](https://leetcode.com/problems/my-calendar-i/)",
    "Solution": [
      [
        "C++",
        "C++/my-calendar-i.cpp"
      ],
      [
        "Python",
        "Python/my-calendar-i.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 730,
    "Title": "[Count Different Palindromic Subsequences](https://leetcode.com/problems/count-different-palindromic-subsequences/)",
    "Solution": [
      [
        "C++",
        "C++/count-different-palindromic-subsequences.cpp"
      ],
      [
        "Python",
        "Python/count-different-palindromic-subsequences.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 731,
    "Title": "[My Calendar II](https://leetcode.com/problems/my-calendar-ii/)",
    "Solution": [
      [
        "C++",
        "C++/my-calendar-ii.cpp"
      ],
      [
        "Python",
        "Python/my-calendar-ii.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 732,
    "Title": "[My Calendar III](https://leetcode.com/problems/my-calendar-iii/)",
    "Solution": [
      [
        "C++",
        "C++/my-calendar-iii.cpp"
      ],
      [
        "Python",
        "Python/my-calendar-iii.py"
      ]
    ],
    "Time": "_O(nlogn)_ ~ _O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 733,
    "Title": "[Max Area of Island](https://leetcode.com/problems/flood-fill/)",
    "Solution": [
      [
        "C++",
        "C++/flood-fill.cpp"
      ],
      [
        "Python",
        "Python/flood-fill.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 734,
    "Title": "[Sentence Similarity](https://leetcode.com/problems/sentence-similarity/)",
    "Solution": [
      [
        "C++",
        "C++/sentence-similarity.cpp"
      ],
      [
        "Python",
        "Python/sentence-similarity.py"
      ]
    ],
    "Time": "_O(n + p)_",
    "Space": "_O(p)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 735,
    "Title": "[Asteroid Collision](https://leetcode.com/problems/asteroid-collision/)",
    "Solution": [
      [
        "C++",
        "C++/asteroid-collision.cpp"
      ],
      [
        "Python",
        "Python/asteroid-collision.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 736,
    "Title": "[Parse Lisp Expression](https://leetcode.com/problems/parse-lisp-expression/)",
    "Solution": [
      [
        "C++",
        "C++/parse-lisp-expression.cpp"
      ],
      [
        "Python",
        "Python/parse-lisp-expression.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 737,
    "Title": "[Sentence Similarity II](https://leetcode.com/problems/sentence-similarity-ii/)",
    "Solution": [
      [
        "C++",
        "C++/sentence-similarity-ii.cpp"
      ],
      [
        "Python",
        "Python/sentence-similarity-ii.py"
      ]
    ],
    "Time": "_O(n + p)_",
    "Space": "_O(p)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 738,
    "Title": "[Monotone Increasing Digits](https://leetcode.com/problems/monotone-increasing-digits/)",
    "Solution": [
      [
        "C++",
        "C++/monotone-increasing-digits.cpp"
      ],
      [
        "Python",
        "Python/monotone-increasing-digits.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 739,
    "Title": "[Daily Temperatures](https://leetcode.com/problems/daily-temperatures/)",
    "Solution": [
      [
        "C++",
        "C++/daily-temperatures.cpp"
      ],
      [
        "Python",
        "Python/daily-temperatures.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 740,
    "Title": "[Delete and Earn](https://leetcode.com/problems/delete-and-earn/)",
    "Solution": [
      [
        "C++",
        "C++/delete-and-earn.cpp"
      ],
      [
        "Python",
        "Python/delete-and-earn.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 741,
    "Title": "[Cherry Pickup](https://leetcode.com/problems/cherry-pickup/)",
    "Solution": [
      [
        "C++",
        "C++/cherry-pickup.cpp"
      ],
      [
        "Python",
        "Python/cherry-pickup.py"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 742,
    "Title": "[Closest Leaf in a Binary Tree](https://leetcode.com/problems/closest-leaf-in-a-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/closest-leaf-in-a-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/closest-leaf-in-a-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 743,
    "Title": "[Network Delay Time](https://leetcode.com/problems/network-delay-time/)",
    "Solution": [
      [
        "C++",
        "C++/network-delay-time.cpp"
      ],
      [
        "Python",
        "Python/network-delay-time.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "E\\",
    "Difficulty": "* log\\",
    "Tag": "V\\",
    "Note": ")_"
  },
  {
    "Index": 744,
    "Title": "[Find Smallest Letter Greater Than Target](https://leetcode.com/problems/find-smallest-letter-greater-than-target/)",
    "Solution": [
      [
        "C++",
        "C++/find-smallest-letter-greater-than-target.cpp"
      ],
      [
        "Python",
        "Python/find-smallest-letter-greater-than-target.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 745,
    "Title": "[Prefix and Suffix Search](https://leetcode.com/problems/prefix-and-suffix-search/)",
    "Solution": [
      [
        "C++",
        "C++/prefix-and-suffix-search.cpp"
      ],
      [
        "Python",
        "Python/prefix-and-suffix-search.py"
      ]
    ],
    "Time": "ctor: _O(w * l^2)_<br> search : _O(p + s)_",
    "Space": "_O(t)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Trie"
  },
  {
    "Index": 746,
    "Title": "[Min Cost Climbing Stairs](https://leetcode.com/problems/min-cost-climbing-stairs/)",
    "Solution": [
      [
        "C++",
        "C++/min-cost-climbing-stairs.cpp"
      ],
      [
        "Python",
        "Python/min-cost-climbing-stairs.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 747,
    "Title": "[Largest Number At Least Twice of Others](https://leetcode.com/problems/largest-number-at-least-twice-of-others/)",
    "Solution": [
      [
        "C++",
        "C++/largest-number-at-least-twice-of-others.cpp"
      ],
      [
        "Python",
        "Python/largest-number-at-least-twice-of-others.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 748,
    "Title": "[Shortest Completing Word](https://leetcode.com/problems/shortest-completing-word/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-completing-word.cpp"
      ],
      [
        "Python",
        "Python/shortest-completing-word.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 749,
    "Title": "[Contain Virus](https://leetcode.com/problems/contain-virus/)",
    "Solution": [
      [
        "C++",
        "C++/contain-virus.cpp"
      ],
      [
        "Python",
        "Python/contain-virus.py"
      ]
    ],
    "Time": "_O((m * n)^(4/3))_",
    "Space": "_O(m * n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Simulation"
  },
  {
    "Index": 750,
    "Title": "[Number Of Corner Rectangles](https://leetcode.com/problems/number-of-corner-rectangles/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-corner-rectangles.cpp"
      ],
      [
        "Python",
        "Python/number-of-corner-rectangles.py"
      ]
    ],
    "Time": "_O(n * m^2)_",
    "Space": "_O(n * m)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 751,
    "Title": "[IP to CIDR](https://leetcode.com/problems/ip-to-cidr/)",
    "Solution": [
      [
        "C++",
        "C++/ip-to-cidr.cpp"
      ],
      [
        "Python",
        "Python/ip-to-cidr.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 752,
    "Title": "[Open the Lock](https://leetcode.com/problems/open-the-lock/)",
    "Solution": [
      [
        "C++",
        "C++/open-the-lock.cpp"
      ],
      [
        "Python",
        "Python/open-the-lock.py"
      ]
    ],
    "Time": "_O(k * n^k + d)_",
    "Space": "_O(k * n^k + d)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 753,
    "Title": "[Cracking the Safe](https://leetcode.com/problems/cracking-the-safe/)",
    "Solution": [
      [
        "C++",
        "C++/cracking-the-safe.cpp"
      ],
      [
        "Python",
        "Python/cracking-the-safe.py"
      ]
    ],
    "Time": "_O(k^n)_",
    "Space": "_O(k^n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "`de Bruijn sequences`, `Lyndon word`, Rolling Hash, Backtracking, Greedy"
  },
  {
    "Index": 754,
    "Title": "[Reach a Number](https://leetcode.com/problems/reach-a-number/)",
    "Solution": [
      [
        "C++",
        "C++/reach-a-number.cpp"
      ],
      [
        "Python",
        "Python/reach-a-number.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 755,
    "Title": "[Pour Water](https://leetcode.com/problems/pour-water/)",
    "Solution": [
      [
        "C++",
        "C++/pour-water.cpp"
      ],
      [
        "Python",
        "Python/pour-water.py"
      ]
    ],
    "Time": "_O(v * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 756,
    "Title": "[Pyramid Transition Matrix](https://leetcode.com/problems/pyramid-transition-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/pyramid-transition-matrix.cpp"
      ],
      [
        "Python",
        "Python/pyramid-transition-matrix.py"
      ]
    ],
    "Time": "_O(a^b)_",
    "Space": "_O(a^b)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 757,
    "Title": "[Set Intersection Size At Least Two](https://leetcode.com/problems/set-intersection-size-at-least-two/)",
    "Solution": [
      [
        "C++",
        "C++/set-intersection-size-at-least-two.cpp"
      ],
      [
        "Python",
        "Python/set-intersection-size-at-least-two.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 758,
    "Title": "[Bold Words in String](https://leetcode.com/contest/weekly-contest-66/problems/bold-words-in-string/)",
    "Solution": [
      [
        "C++",
        "C++/bold-words-in-string.cpp"
      ],
      [
        "Python",
        "Python/bold-words-in-string.py"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(t)_",
    "Difficulty": "Easy",
    "Tag": "🔒, variant of [Add Bold Tag in String](https://leetcode.com/problems/add-bold-tag-in-string/)"
  },
  {
    "Index": 759,
    "Title": "[Employee Free Time](https://leetcode.com/problems/employee-free-time/)",
    "Solution": [
      [
        "C++",
        "C++/employee-free-time.cpp"
      ],
      [
        "Python",
        "Python/employee-free-time.py"
      ]
    ],
    "Time": "_O(m * logn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 760,
    "Title": "[Find Anagram Mappings](https://leetcode.com/problems/find-anagram-mappings/)",
    "Solution": [
      [
        "C++",
        "C++/find-anagram-mappings.cpp"
      ],
      [
        "Python",
        "Python/find-anagram-mappings.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 761,
    "Title": "[Special Binary String](https://leetcode.com/problems/special-binary-string/)",
    "Solution": [
      [
        "C++",
        "C++/special-binary-string.cpp"
      ],
      [
        "Python",
        "Python/special-binary-string.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 762,
    "Title": "[Prime Number of Set Bits in Binary Representation](https://leetcode.com/problems/prime-number-of-set-bits-in-binary-representation/)",
    "Solution": [
      [
        "C++",
        "C++/prime-number-of-set-bits-in-binary-representation.cpp"
      ],
      [
        "Python",
        "Python/prime-number-of-set-bits-in-binary-representation.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 763,
    "Title": "[Partition Labels](https://leetcode.com/problems/partition-labels/)",
    "Solution": [
      [
        "C++",
        "C++/partition-labels.cpp"
      ],
      [
        "Python",
        "Python/partition-labels.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 764,
    "Title": "[Largest Plus Sign](https://leetcode.com/problems/largest-plus-sign/)",
    "Solution": [
      [
        "C++",
        "C++/largest-plus-sign.cpp"
      ],
      [
        "Python",
        "Python/largest-plus-sign.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 765,
    "Title": "[Couples Holding Hands](https://leetcode.com/problems/couples-holding-hands/)",
    "Solution": [
      [
        "C++",
        "C++/couples-holding-hands.cpp"
      ],
      [
        "Python",
        "Python/couples-holding-hands.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 766,
    "Title": "[Toeplitz Matrix](https://leetcode.com/problems/toeplitz-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/toeplitz-matrix.cpp"
      ],
      [
        "Python",
        "Python/toeplitz-matrix.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 767,
    "Title": "[Reorganize String](https://leetcode.com/problems/reorganize-string/)",
    "Solution": [
      [
        "C++",
        "C++/reorganize-string.cpp"
      ],
      [
        "Python",
        "Python/reorganize-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 768,
    "Title": "[Max Chunks To Make Sorted II](https://leetcode.com/problems/max-chunks-to-make-sorted-ii/)",
    "Solution": [
      [
        "C++",
        "C++/max-chunks-to-make-sorted-ii.cpp"
      ],
      [
        "Python",
        "Python/max-chunks-to-make-sorted-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 769,
    "Title": "[Max Chunks To Make Sorted](https://leetcode.com/problems/max-chunks-to-make-sorted/)",
    "Solution": [
      [
        "C++",
        "C++/max-chunks-to-make-sorted.cpp"
      ],
      [
        "Python",
        "Python/max-chunks-to-make-sorted.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 770,
    "Title": "[Basic Calculator IV](https://leetcode.com/problems/basic-calculator-iv/)",
    "Solution": [
      [
        "C++",
        "C++/basic-calculator-iv.cpp"
      ],
      [
        "Python",
        "Python/basic-calculator-iv.py"
      ]
    ],
    "Time": "add: _O(d * t)_<br> sub: _O(d * t)_<br> mul: _O(d * t^2)_<br> eval: _O(d * t)_ <br> to_list: _O(d * tlogt)_",
    "Space": "_O(e + d * t)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 771,
    "Title": "[Jewels and Stones](https://leetcode.com/problems/jewels-and-stones/)",
    "Solution": [
      [
        "C++",
        "C++/jewels-and-stones.cpp"
      ],
      [
        "Python",
        "Python/jewels-and-stones.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 772,
    "Title": "[Basic Calculator III](https://leetcode.com/problems/basic-calculator-iii/)",
    "Solution": [
      [
        "C++",
        "C++/basic-calculator-iii.cpp"
      ],
      [
        "Python",
        "Python/basic-calculator-iii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 773,
    "Title": "[Sliding Puzzle](https://leetcode.com/problems/sliding-puzzle/)",
    "Solution": [
      [
        "C++",
        "C++/sliding-puzzle.cpp"
      ],
      [
        "Python",
        "Python/sliding-puzzle.py"
      ]
    ],
    "Time": "_O((m * n) * (m * n)!)_",
    "Space": "_O((m * n) * (m * n)!)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "`A* Search Algorithm`"
  },
  {
    "Index": 774,
    "Title": "[Minimize Max Distance to Gas Station](https://leetcode.com/problems/minimize-max-distance-to-gas-station/)",
    "Solution": [
      [
        "C++",
        "C++/minimize-max-distance-to-gas-station.cpp"
      ],
      [
        "Python",
        "Python/minimize-max-distance-to-gas-station.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 775,
    "Title": "[Global and Local Inversions](https://leetcode.com/problems/global-and-local-inversions/)",
    "Solution": [
      [
        "C++",
        "C++/global-and-local-inversions.cpp"
      ],
      [
        "Python",
        "Python/global-and-local-inversions.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 776,
    "Title": "[Split BST](https://leetcode.com/problems/split-bst/)",
    "Solution": [
      [
        "C++",
        "C++/split-bst.cpp"
      ],
      [
        "Python",
        "Python/split-bst.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 777,
    "Title": "[Swap Adjacent in LR String](https://leetcode.com/problems/swap-adjacent-in-lr-string/)",
    "Solution": [
      [
        "C++",
        "C++/swap-adjacent-in-lr-string.cpp"
      ],
      [
        "Python",
        "Python/swap-adjacent-in-lr-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 778,
    "Title": "[Swim in Rising Water](https://leetcode.com/problems/swim-in-rising-water/)",
    "Solution": [
      [
        "C++",
        "C++/swim-in-rising-water.cpp"
      ],
      [
        "Python",
        "Python/swim-in-rising-water.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 779,
    "Title": "[K-th Symbol in Grammar](https://leetcode.com/problems/k-th-symbol-in-grammar/)",
    "Solution": [
      [
        "C++",
        "C++/k-th-symbol-in-grammar.cpp"
      ],
      [
        "Python",
        "Python/k-th-symbol-in-grammar.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 780,
    "Title": "[Reaching Points](https://leetcode.com/problems/reaching-points/)",
    "Solution": [
      [
        "C++",
        "C++/reaching-points.cpp"
      ],
      [
        "Python",
        "Python/reaching-points.py"
      ]
    ],
    "Time": "_O(log(max(m, n)))_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 781,
    "Title": "[Rabbits in Forest](https://leetcode.com/problems/rabbits-in-forest/)",
    "Solution": [
      [
        "C++",
        "C++/rabbits-in-forest.cpp"
      ],
      [
        "Python",
        "Python/rabbits-in-forest.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 782,
    "Title": "[Transform to Chessboard](https://leetcode.com/problems/transform-to-chessboard/)",
    "Solution": [
      [
        "C++",
        "C++/transform-to-chessboard.cpp"
      ],
      [
        "Python",
        "Python/transform-to-chessboard.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 783,
    "Title": "[Minimum Distance Between BST Nodes](https://leetcode.com/problems/minimum-distance-between-bst-nodes/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-distance-between-bst-nodes.cpp"
      ],
      [
        "Python",
        "Python/minimum-distance-between-bst-nodes.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 784,
    "Title": "[Letter Case Permutation](https://leetcode.com/problems/letter-case-permutation/)",
    "Solution": [
      [
        "C++",
        "C++/letter-case-permutation.cpp"
      ],
      [
        "Python",
        "Python/letter-case-permutation.py"
      ]
    ],
    "Time": "_O(n * 2^n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 785,
    "Title": "[Is Graph Bipartite?](https://leetcode.com/problems/is-graph-bipartite/)",
    "Solution": [
      [
        "C++",
        "C++/is-graph-bipartite.cpp"
      ],
      [
        "Python",
        "Python/is-graph-bipartite.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "V\\",
    "Difficulty": "+ \\",
    "Tag": "E\\",
    "Note": ")_"
  },
  {
    "Index": 786,
    "Title": "[K-th Smallest Prime Fraction](https://leetcode.com/problems/k-th-smallest-prime-fraction/)",
    "Solution": [
      [
        "C++",
        "C++/k-th-smallest-prime-fraction.cpp"
      ],
      [
        "Python",
        "Python/k-th-smallest-prime-fraction.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 787,
    "Title": "[Cheapest Flights Within K Stops](https://leetcode.com/problems/cheapest-flights-within-k-stops/)",
    "Solution": [
      [
        "C++",
        "C++/cheapest-flights-within-k-stops.cpp"
      ],
      [
        "Python",
        "Python/cheapest-flights-within-k-stops.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "E\\",
    "Difficulty": "* log\\",
    "Tag": "V\\",
    "Note": ")_"
  },
  {
    "Index": 788,
    "Title": "[Rotated Digits](https://leetcode.com/problems/rotated-digits/)",
    "Solution": [
      [
        "C++",
        "C++/rotated-digits.cpp"
      ],
      [
        "Python",
        "Python/rotated-digits.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(logn)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Memoization"
  },
  {
    "Index": 789,
    "Title": "[Escape The Ghosts](https://leetcode.com/problems/escape-the-ghosts/)",
    "Solution": [
      [
        "C++",
        "C++/escape-the-ghosts.cpp"
      ],
      [
        "Python",
        "Python/escape-the-ghosts.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 790,
    "Title": "[Domino and Tromino Tiling](https://leetcode.com/problems/domino-and-tromino-tiling/)",
    "Solution": [
      [
        "C++",
        "C++/domino-and-tromino-tiling.cpp"
      ],
      [
        "Python",
        "Python/domino-and-tromino-tiling.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Matrix Exponentiation"
  },
  {
    "Index": 791,
    "Title": "[Custom Sort String](https://leetcode.com/problems/custom-sort-string/)",
    "Solution": [
      [
        "C++",
        "C++/custom-sort-string.cpp"
      ],
      [
        "Python",
        "Python/custom-sort-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 792,
    "Title": "[Number of Matching Subsequences](https://leetcode.com/problems/number-of-matching-subsequences/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-matching-subsequences.cpp"
      ],
      [
        "Python",
        "Python/number-of-matching-subsequences.py"
      ]
    ],
    "Time": "_O(n + w)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 793,
    "Title": "[Preimage Size of Factorial Zeroes Function](https://leetcode.com/problems/preimage-size-of-factorial-zeroes-function/)",
    "Solution": [
      [
        "C++",
        "C++/preimage-size-of-factorial-zeroes-function.cpp"
      ],
      [
        "Python",
        "Python/preimage-size-of-factorial-zeroes-function.py"
      ]
    ],
    "Time": "_O((logn)^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 794,
    "Title": "[Valid Tic-Tac-Toe State](https://leetcode.com/problems/valid-tic-tac-toe-state/)",
    "Solution": [
      [
        "C++",
        "C++/valid-tic-tac-toe-state.cpp"
      ],
      [
        "Python",
        "Python/valid-tic-tac-toe-state.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 795,
    "Title": "[Number of Subarrays with Bounded Maximum](https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-subarrays-with-bounded-maximum.cpp"
      ],
      [
        "Python",
        "Python/number-of-subarrays-with-bounded-maximum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 796,
    "Title": "[Rotate String](https://leetcode.com/problems/rotate-string/)",
    "Solution": [
      [
        "C++",
        "C++/rotate-string.cpp"
      ],
      [
        "Python",
        "Python/rotate-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "`KMP Algorithm`, `Rabin-Karp Algorithm`"
  },
  {
    "Index": 797,
    "Title": "[All Paths From Source to Target](https://leetcode.com/problems/all-paths-from-source-to-target/)",
    "Solution": [
      [
        "C++",
        "C++/all-paths-from-source-to-target.cpp"
      ],
      [
        "Python",
        "Python/all-paths-from-source-to-target.py"
      ]
    ],
    "Time": "_O(p + r * n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 798,
    "Title": "[Smallest Rotation with Highest Score](https://leetcode.com/problems/smallest-rotation-with-highest-score/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-rotation-with-highest-score.cpp"
      ],
      [
        "Python",
        "Python/smallest-rotation-with-highest-score.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 799,
    "Title": "[Champagne Tower](https://leetcode.com/problems/champagne-tower/)",
    "Solution": [
      [
        "C++",
        "C++/champagne-tower.cpp"
      ],
      [
        "Python",
        "Python/champagne-tower.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 800,
    "Title": "[Similar RGB Color](https://leetcode.com/problems/similar-rgb-color/)",
    "Solution": [
      [
        "C++",
        "C++/similar-rgb-color.cpp"
      ],
      [
        "Python",
        "Python/similar-rgb-color.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 801,
    "Title": "[Minimum Swaps To Make Sequences Increasing](https://leetcode.com/problems/minimum-swaps-to-make-sequences-increasing/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-swaps-to-make-sequences-increasing.cpp"
      ],
      [
        "Python",
        "Python/minimum-swaps-to-make-sequences-increasing.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 802,
    "Title": "[Find Eventual Safe States](https://leetcode.com/problems/find-eventual-safe-states/)",
    "Solution": [
      [
        "C++",
        "C++/find-eventual-safe-states.cpp"
      ],
      [
        "Python",
        "Python/find-eventual-safe-states.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "V\\",
    "Difficulty": "+ \\",
    "Tag": "E\\",
    "Note": ")_"
  },
  {
    "Index": 803,
    "Title": "[Bricks Falling When Hit](https://leetcode.com/problems/bricks-falling-when-hit/)",
    "Solution": [
      [
        "C++",
        "C++/bricks-falling-when-hit.cpp"
      ],
      [
        "Python",
        "Python/bricks-falling-when-hit.py"
      ]
    ],
    "Time": "_O(r * c)_",
    "Space": "_O(r * c)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 804,
    "Title": "[Unique Morse Code Words](https://leetcode.com/problems/unique-morse-code-words/)",
    "Solution": [
      [
        "C++",
        "C++/unique-morse-code-words.cpp"
      ],
      [
        "Python",
        "Python/unique-morse-code-words.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 805,
    "Title": "[Split Array With Same Average](https://leetcode.com/problems/split-array-with-same-average/)",
    "Solution": [
      [
        "C++",
        "C++/split-array-with-same-average.cpp"
      ],
      [
        "Python",
        "Python/split-array-with-same-average.py"
      ]
    ],
    "Time": "_O(n^4)_",
    "Space": "_O(n^3)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 806,
    "Title": "[Number of Lines To Write String](https://leetcode.com/problems/number-of-lines-to-write-string/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-lines-to-write-string.cpp"
      ],
      [
        "Python",
        "Python/number-of-lines-to-write-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 807,
    "Title": "[Max Increase to Keep City Skyline](https://leetcode.com/problems/max-increase-to-keep-city-skyline/)",
    "Solution": [
      [
        "C++",
        "C++/max-increase-to-keep-city-skyline.cpp"
      ],
      [
        "Python",
        "Python/max-increase-to-keep-city-skyline.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 808,
    "Title": "[Soup Servings](https://leetcode.com/problems/soup-servings/)",
    "Solution": [
      [
        "C++",
        "C++/soup-servings.cpp"
      ],
      [
        "Python",
        "Python/soup-servings.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Memoization"
  },
  {
    "Index": 809,
    "Title": "[Expressive Words](https://leetcode.com/problems/expressive-words/)",
    "Solution": [
      [
        "C++",
        "C++/expressive-words.cpp"
      ],
      [
        "Python",
        "Python/expressive-words.py"
      ]
    ],
    "Time": "_O(n + s)_",
    "Space": "_O(l + s)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 810,
    "Title": "[Chalkboard XOR Game](https://leetcode.com/problems/chalkboard-xor-game/)",
    "Solution": [
      [
        "C++",
        "C++/chalkboard-xor-game.cpp"
      ],
      [
        "Python",
        "Python/chalkboard-xor-game.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 811,
    "Title": "[Subdomain Visit Count](https://leetcode.com/problems/subdomain-visit-count/)",
    "Solution": [
      [
        "C++",
        "C++/subdomain-visit-count.cpp"
      ],
      [
        "Python",
        "Python/subdomain-visit-count.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 812,
    "Title": "[Largest Triangle Area](https://leetcode.com/problems/largest-triangle-area/)",
    "Solution": [
      [
        "C++",
        "C++/largest-triangle-area.cpp"
      ],
      [
        "Python",
        "Python/largest-triangle-area.py"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 813,
    "Title": "[Largest Sum of Averages](https://leetcode.com/problems/largest-sum-of-averages/)",
    "Solution": [
      [
        "C++",
        "C++/largest-sum-of-averages.cpp"
      ],
      [
        "Python",
        "Python/largest-sum-of-averages.py"
      ]
    ],
    "Time": "_O(k * n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 814,
    "Title": "[Binary Tree Pruning](https://leetcode.com/problems/binary-tree-pruning/)",
    "Solution": [
      [
        "C++",
        "C++/binary-tree-pruning.cpp"
      ],
      [
        "Python",
        "Python/binary-tree-pruning.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 815,
    "Title": "[Bus Routes](https://leetcode.com/problems/bus-routes/)",
    "Solution": [
      [
        "C++",
        "C++/bus-routes.cpp"
      ],
      [
        "Python",
        "Python/bus-routes.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "E\\",
    "Difficulty": "+ \\",
    "Tag": "V\\",
    "Note": ")_"
  },
  {
    "Index": 816,
    "Title": "[Ambiguous Coordinates](https://leetcode.com/problems/ambiguous-coordinates/)",
    "Solution": [
      [
        "C++",
        "C++/ambiguous-coordinates.cpp"
      ],
      [
        "Python",
        "Python/ambiguous-coordinates.py"
      ]
    ],
    "Time": "_O(n^4)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 817,
    "Title": "[Linked List Components](https://leetcode.com/problems/linked-list-components/)",
    "Solution": [
      [
        "C++",
        "C++/linked-list-components.cpp"
      ],
      [
        "Python",
        "Python/linked-list-components.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(m)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 818,
    "Title": "[Race Car](https://leetcode.com/problems/race-car/)",
    "Solution": [
      [
        "C++",
        "C++/race-car.cpp"
      ],
      [
        "Python",
        "Python/race-car.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 819,
    "Title": "[Most Common Word](https://leetcode.com/problems/most-common-word/)",
    "Solution": [
      [
        "C++",
        "C++/most-common-word.cpp"
      ],
      [
        "Python",
        "Python/most-common-word.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 820,
    "Title": "[Short Encoding of Words](https://leetcode.com/problems/short-encoding-of-words/)",
    "Solution": [
      [
        "C++",
        "C++/short-encoding-of-words.cpp"
      ],
      [
        "Python",
        "Python/short-encoding-of-words.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(t)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Trie"
  },
  {
    "Index": 821,
    "Title": "[Shortest Distance to a Character](https://leetcode.com/problems/shortest-distance-to-a-character/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-distance-to-a-character.cpp"
      ],
      [
        "Python",
        "Python/shortest-distance-to-a-character.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 822,
    "Title": "[Card Flipping Game](https://leetcode.com/problems/card-flipping-game/)",
    "Solution": [
      [
        "C++",
        "C++/card-flipping-game.cpp"
      ],
      [
        "Python",
        "Python/card-flipping-game.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 823,
    "Title": "[Binary Trees With Factors](https://leetcode.com/problems/binary-trees-with-factors/)",
    "Solution": [
      [
        "C++",
        "C++/binary-trees-with-factors.cpp"
      ],
      [
        "Python",
        "Python/binary-trees-with-factors.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 824,
    "Title": "[Goat Latin](https://leetcode.com/problems/goat-latin/)",
    "Solution": [
      [
        "C++",
        "C++/goat-latin.cpp"
      ],
      [
        "Python",
        "Python/goat-latin.py"
      ]
    ],
    "Time": "_O(n + w^2)_",
    "Space": "_O(l)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 825,
    "Title": "[Friends Of Appropriate Ages](https://leetcode.com/problems/friends-of-appropriate-ages/)",
    "Solution": [
      [
        "C++",
        "C++/friends-of-appropriate-ages.cpp"
      ],
      [
        "Python",
        "Python/friends-of-appropriate-ages.py"
      ]
    ],
    "Time": "_O(a^2 + n)_",
    "Space": "_O(a)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 826,
    "Title": "[Most Profit Assigning Work](https://leetcode.com/problems/most-profit-assigning-work/)",
    "Solution": [
      [
        "C++",
        "C++/most-profit-assigning-work.cpp"
      ],
      [
        "Python",
        "Python/most-profit-assigning-work.py"
      ]
    ],
    "Time": "_O(mlogm + nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 827,
    "Title": "[Making A Large Island](https://leetcode.com/problems/making-a-large-island/)",
    "Solution": [
      [
        "C++",
        "C++/making-a-large-island.cpp"
      ],
      [
        "Python",
        "Python/making-a-large-island.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 828,
    "Title": "[Count Unique Characters of All Substrings of a Given String](https://leetcode.com/problems/count-unique-characters-of-all-substrings-of-a-given-string/)",
    "Solution": [
      [
        "C++",
        "C++/count-unique-characters-of-all-substrings-of-a-given-string.cpp"
      ],
      [
        "Python",
        "Python/count-unique-characters-of-all-substrings-of-a-given-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 829,
    "Title": "[Consecutive Numbers Sum](https://leetcode.com/problems/consecutive-numbers-sum/)",
    "Solution": [
      [
        "C++",
        "C++/consecutive-numbers-sum.cpp"
      ],
      [
        "Python",
        "Python/consecutive-numbers-sum.py"
      ]
    ],
    "Time": "_O(sqrt(n))_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Factorization"
  },
  {
    "Index": 830,
    "Title": "[Positions of Large Groups](https://leetcode.com/problems/positions-of-large-groups/)",
    "Solution": [
      [
        "C++",
        "C++/positions-of-large-groups.cpp"
      ],
      [
        "Python",
        "Python/positions-of-large-groups.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 831,
    "Title": "[Masking Personal Information](https://leetcode.com/problems/masking-personal-information/)",
    "Solution": [
      [
        "C++",
        "C++/masking-personal-information.cpp"
      ],
      [
        "Python",
        "Python/masking-personal-information.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 832,
    "Title": "[Flipping an Image](https://leetcode.com/problems/flipping-an-image/)",
    "Solution": [
      [
        "C++",
        "C++/flipping-an-image.cpp"
      ],
      [
        "Python",
        "Python/flipping-an-image.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 833,
    "Title": "[Find And Replace in String](https://leetcode.com/problems/find-and-replace-in-string/)",
    "Solution": [
      [
        "C++",
        "C++/find-and-replace-in-string.cpp"
      ],
      [
        "Python",
        "Python/find-and-replace-in-string.py"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 834,
    "Title": "[Sum of Distances in Tree](https://leetcode.com/problems/sum-of-distances-in-tree/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-distances-in-tree.cpp"
      ],
      [
        "Python",
        "Python/sum-of-distances-in-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 835,
    "Title": "[Image Overlap](https://leetcode.com/problems/image-overlap/)",
    "Solution": [
      [
        "C++",
        "C++/image-overlap.cpp"
      ],
      [
        "Python",
        "Python/image-overlap.py"
      ]
    ],
    "Time": "_O(n^4)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 836,
    "Title": "[Rectangle Overlap](https://leetcode.com/problems/rectangle-overlap/)",
    "Solution": [
      [
        "C++",
        "C++/rectangle-overlap.cpp"
      ],
      [
        "Python",
        "Python/rectangle-overlap.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 837,
    "Title": "[New 21 Game](https://leetcode.com/problems/new-21-game/)",
    "Solution": [
      [
        "C++",
        "C++/new-21-game.cpp"
      ],
      [
        "Python",
        "Python/new-21-game.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 838,
    "Title": "[Push Dominoes](https://leetcode.com/problems/push-dominoes/)",
    "Solution": [
      [
        "C++",
        "C++/push-dominoes.cpp"
      ],
      [
        "Python",
        "Python/push-dominoes.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 839,
    "Title": "[Similar String Groups](https://leetcode.com/problems/similar-string-groups/)",
    "Solution": [
      [
        "C++",
        "C++/similar-string-groups.cpp"
      ],
      [
        "Python",
        "Python/similar-string-groups.py"
      ]
    ],
    "Time": "_O(n^2 * l)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 840,
    "Title": "[Magic Squares In Grid](https://leetcode.com/problems/magic-squares-in-grid/)",
    "Solution": [
      [
        "C++",
        "C++/magic-squares-in-grid.cpp"
      ],
      [
        "Python",
        "Python/magic-squares-in-grid.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 841,
    "Title": "[Keys and Rooms](https://leetcode.com/problems/keys-and-rooms/)",
    "Solution": [
      [
        "C++",
        "C++/keys-and-rooms.cpp"
      ],
      [
        "Python",
        "Python/keys-and-rooms.py"
      ]
    ],
    "Time": "_O(n!)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 842,
    "Title": "[Split Array into Fibonacci Sequence](https://leetcode.com/problems/split-array-into-fibonacci-sequence/)",
    "Solution": [
      [
        "C++",
        "C++/split-array-into-fibonacci-sequence.cpp"
      ],
      [
        "Python",
        "Python/split-array-into-fibonacci-sequence.py"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 843,
    "Title": "[Guess the Word](https://leetcode.com/problems/guess-the-word/)",
    "Solution": [
      [
        "C++",
        "C++/guess-the-word.cpp"
      ],
      [
        "Python",
        "Python/guess-the-word.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "MinMax, Math"
  },
  {
    "Index": 844,
    "Title": "[Backspace String Compare](https://leetcode.com/problems/backspace-string-compare/)",
    "Solution": [
      [
        "C++",
        "C++/backspace-string-compare.cpp"
      ],
      [
        "Python",
        "Python/backspace-string-compare.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 845,
    "Title": "[Longest Mountain in Array](https://leetcode.com/problems/longest-mountain-in-array/)",
    "Solution": [
      [
        "C++",
        "C++/longest-mountain-in-array.cpp"
      ],
      [
        "Python",
        "Python/longest-mountain-in-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 846,
    "Title": "[Hand of Straights](https://leetcode.com/problems/hand-of-straights/)",
    "Solution": [
      [
        "C++",
        "C++/hand-of-straights.cpp"
      ],
      [
        "Python",
        "Python/hand-of-straights.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 847,
    "Title": "[Shortest Path Visiting All Nodes](https://leetcode.com/problems/shortest-path-visiting-all-nodes/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-path-visiting-all-nodes.cpp"
      ],
      [
        "Python",
        "Python/shortest-path-visiting-all-nodes.py"
      ]
    ],
    "Time": "_O(n *2^n)_",
    "Space": "_O(n * 2^n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "BFS"
  },
  {
    "Index": 848,
    "Title": "[Shifting Letters](https://leetcode.com/problems/shifting-letters/)",
    "Solution": [
      [
        "C++",
        "C++/shifting-letters.cpp"
      ],
      [
        "Python",
        "Python/shifting-letters.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 849,
    "Title": "[Maximize Distance to Closest Person](https://leetcode.com/problems/maximize-distance-to-closest-person/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-distance-to-closest-person.cpp"
      ],
      [
        "Python",
        "Python/maximize-distance-to-closest-person.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 850,
    "Title": "[Rectangle Area II](https://leetcode.com/problems/rectangle-area-ii/)",
    "Solution": [
      [
        "C++",
        "C++/rectangle-area-ii.cpp"
      ],
      [
        "Python",
        "Python/rectangle-area-ii.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Segment Tree"
  },
  {
    "Index": 851,
    "Title": "[Loud and Rich](https://leetcode.com/problems/loud-and-rich/)",
    "Solution": [
      [
        "C++",
        "C++/loud-and-rich.cpp"
      ],
      [
        "Python",
        "Python/loud-and-rich.py"
      ]
    ],
    "Time": "_O(q + r)_",
    "Space": "_O(q + r)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 852,
    "Title": "[Peak Index in a Mountain Array](https://leetcode.com/problems/peak-index-in-a-mountain-array/)",
    "Solution": [
      [
        "C++",
        "C++/peak-index-in-a-mountain-array.cpp"
      ],
      [
        "Python",
        "Python/peak-index-in-a-mountain-array.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 853,
    "Title": "[Car Fleet](https://leetcode.com/problems/car-fleet/)",
    "Solution": [
      [
        "C++",
        "C++/car-fleet.cpp"
      ],
      [
        "Python",
        "Python/car-fleet.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 854,
    "Title": "[K-Similar Strings](https://leetcode.com/problems/k-similar-strings/)",
    "Solution": [
      [
        "C++",
        "C++/k-similar-strings.cpp"
      ],
      [
        "Python",
        "Python/k-similar-strings.py"
      ]
    ],
    "Time": "_O(n * n!/(c_a!*...*c_z!))_",
    "Space": "_O(n * n!/(c_a!*...*c_z!))_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 855,
    "Title": "[Exam Room](https://leetcode.com/problems/exam-room/)",
    "Solution": [
      [
        "C++",
        "C++/exam-room.cpp"
      ],
      [
        "Python",
        "Python/exam-room.py"
      ]
    ],
    "Time": "seat: _O(logn)_ <br> leave: _O(logn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "BST, Hash"
  },
  {
    "Index": 856,
    "Title": "[Score of Parentheses](https://leetcode.com/problems/score-of-parentheses/)",
    "Solution": [
      [
        "C++",
        "C++/score-of-parentheses.cpp"
      ],
      [
        "Python",
        "Python/score-of-parentheses.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 857,
    "Title": "[Minimum Cost to Hire K Workers](https://leetcode.com/problems/minimum-cost-to-hire-k-workers/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-to-hire-k-workers.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-to-hire-k-workers.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Sort"
  },
  {
    "Index": 858,
    "Title": "[Mirror Reflection](https://leetcode.com/problems/mirror-reflection/)",
    "Solution": [
      [
        "C++",
        "C++/mirror-reflection.cpp"
      ],
      [
        "Python",
        "Python/mirror-reflection.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 859,
    "Title": "[Buddy Strings](https://leetcode.com/problems/buddy-strings/)",
    "Solution": [
      [
        "C++",
        "C++/buddy-strings.cpp"
      ],
      [
        "Python",
        "Python/buddy-strings.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 860,
    "Title": "[Lemonade Change](https://leetcode.com/problems/lemonade-change/)",
    "Solution": [
      [
        "C++",
        "C++/lemonade-change.cpp"
      ],
      [
        "Python",
        "Python/lemonade-change.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 861,
    "Title": "[Score After Flipping Matrix](https://leetcode.com/problems/score-after-flipping-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/score-after-flipping-matrix.cpp"
      ],
      [
        "Python",
        "Python/score-after-flipping-matrix.py"
      ]
    ],
    "Time": "_O(r * c)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 862,
    "Title": "[Shortest Subarray with Sum at Least K](https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-subarray-with-sum-at-least-k.cpp"
      ],
      [
        "Python",
        "Python/shortest-subarray-with-sum-at-least-k.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Mono Deque, Sliding Window"
  },
  {
    "Index": 863,
    "Title": "[All Nodes Distance K in Binary Tree](https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/all-nodes-distance-k-in-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/all-nodes-distance-k-in-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS + BFS"
  },
  {
    "Index": 864,
    "Title": "[Shortest Path to Get All Keys](https://leetcode.com/problems/shortest-path-to-get-all-keys/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-path-to-get-all-keys.cpp"
      ],
      [
        "Python",
        "Python/shortest-path-to-get-all-keys.py"
      ]
    ],
    "Time": "_O(k * r * c + k^3*2^k)_",
    "Space": "_O(k*2^k)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "`Dijkstra's Algorithm`"
  },
  {
    "Index": 865,
    "Title": "[Smallest Subtree with all the Deepest Nodes](https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-subtree-with-all-the-deepest-nodes.cpp"
      ],
      [
        "Python",
        "Python/smallest-subtree-with-all-the-deepest-nodes.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 866,
    "Title": "[Prime Palindrome](https://leetcode.com/problems/prime-palindrome/)",
    "Solution": [
      [
        "C++",
        "C++/prime-palindrome.cpp"
      ],
      [
        "Python",
        "Python/prime-palindrome.py"
      ]
    ],
    "Time": "_O(n^(1/2) * (logn + n^(1/2)))_",
    "Space": "_O(logn)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 867,
    "Title": "[Transpose Matrix](https://leetcode.com/problems/transpose-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/transpose-matrix.cpp"
      ],
      [
        "Python",
        "Python/transpose-matrix.py"
      ]
    ],
    "Time": "_O(r * c)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 868,
    "Title": "[Binary Gap](https://leetcode.com/problems/binary-gap/)",
    "Solution": [
      [
        "C++",
        "C++/binary-gap.cpp"
      ],
      [
        "Python",
        "Python/binary-gap.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 869,
    "Title": "[Reordered Power of 2](https://leetcode.com/problems/reordered-power-of-2/)",
    "Solution": [
      [
        "C++",
        "C++/reordered-power-of-2.cpp"
      ],
      [
        "Python",
        "Python/reordered-power-of-2.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 870,
    "Title": "[Advantage Shuffle](https://leetcode.com/problems/advantage-shuffle/)",
    "Solution": [
      [
        "C++",
        "C++/advantage-shuffle.cpp"
      ],
      [
        "Python",
        "Python/advantage-shuffle.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 871,
    "Title": "[Minimum Number of Refueling Stops](https://leetcode.com/problems/minimum-number-of-refueling-stops/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-refueling-stops.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-refueling-stops.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Sort"
  },
  {
    "Index": 872,
    "Title": "[Leaf-Similar Trees](https://leetcode.com/problems/leaf-similar-trees/)",
    "Solution": [
      [
        "C++",
        "C++/leaf-similar-trees.cpp"
      ],
      [
        "Python",
        "Python/leaf-similar-trees.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 873,
    "Title": "[Length of Longest Fibonacci Subsequence](https://leetcode.com/problems/length-of-longest-fibonacci-subsequence/)",
    "Solution": [
      [
        "C++",
        "C++/length-of-longest-fibonacci-subsequence.cpp"
      ],
      [
        "Python",
        "Python/length-of-longest-fibonacci-subsequence.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 874,
    "Title": "[Walking Robot Simulation](https://leetcode.com/problems/walking-robot-simulation/)",
    "Solution": [
      [
        "C++",
        "C++/walking-robot-simulation.cpp"
      ],
      [
        "Python",
        "Python/walking-robot-simulation.py"
      ]
    ],
    "Time": "_O(n + k)_",
    "Space": "_O(k)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 875,
    "Title": "[Koko Eating Bananas](https://leetcode.com/problems/koko-eating-bananas/)",
    "Solution": [
      [
        "C++",
        "C++/koko-eating-bananas.cpp"
      ],
      [
        "Python",
        "Python/koko-eating-bananas.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 876,
    "Title": "[Middle of the Linked List](https://leetcode.com/problems/middle-of-the-linked-list/)",
    "Solution": [
      [
        "C++",
        "C++/middle-of-the-linked-list.cpp"
      ],
      [
        "Python",
        "Python/middle-of-the-linked-list.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 877,
    "Title": "[Stone Game](https://leetcode.com/problems/stone-game/)",
    "Solution": [
      [
        "C++",
        "C++/stone-game.cpp"
      ],
      [
        "Python",
        "Python/stone-game.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Predict the Winner](https://leetcode.com/problems/predict-the-winner/)",
    "Note": 0
  },
  {
    "Index": 878,
    "Title": "[Nth Magical Number](https://leetcode.com/problems/nth-magical-number/)",
    "Solution": [
      [
        "C++",
        "C++/nth-magical-number.cpp"
      ],
      [
        "Python",
        "Python/nth-magical-number.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 879,
    "Title": "[Profitable Schemes](https://leetcode.com/problems/profitable-schemes/)",
    "Solution": [
      [
        "C++",
        "C++/profitable-schemes.cpp"
      ],
      [
        "Python",
        "Python/profitable-schemes.py"
      ]
    ],
    "Time": "_O(n * p * g)_",
    "Space": "_O(p * g)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 880,
    "Title": "[Decoded String at Index](https://leetcode.com/problems/decoded-string-at-index/)",
    "Solution": [
      [
        "C++",
        "C++/decoded-string-at-index.cpp"
      ],
      [
        "Python",
        "Python/decoded-string-at-index.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 881,
    "Title": "[Boats to Save People](https://leetcode.com/problems/boats-to-save-people/)",
    "Solution": [
      [
        "C++",
        "C++/boats-to-save-people.cpp"
      ],
      [
        "Python",
        "Python/boats-to-save-people.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 882,
    "Title": "[Reachable Nodes In Subdivided Graph](https://leetcode.com/problems/reachable-nodes-in-subdivided-graph/)",
    "Solution": [
      [
        "C++",
        "C++/reachable-nodes-in-subdivided-graph.cpp"
      ],
      [
        "Python",
        "Python/reachable-nodes-in-subdivided-graph.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "E\\",
    "Difficulty": "* log\\",
    "Tag": "V\\",
    "Note": ")_"
  },
  {
    "Index": 883,
    "Title": "[Projection Area of 3D Shapes](https://leetcode.com/problems/projection-area-of-3d-shapes/)",
    "Solution": [
      [
        "C++",
        "C++/projection-area-of-3d-shapes.cpp"
      ],
      [
        "Python",
        "Python/projection-area-of-3d-shapes.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 884,
    "Title": "[Uncommon Words from Two Sentences](https://leetcode.com/problems/uncommon-words-from-two-sentences/)",
    "Solution": [
      [
        "C++",
        "C++/uncommon-words-from-two-sentences.cpp"
      ],
      [
        "Python",
        "Python/uncommon-words-from-two-sentences.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 885,
    "Title": "[Spiral Matrix III](https://leetcode.com/problems/spiral-matrix-iii/)",
    "Solution": [
      [
        "C++",
        "C++/spiral-matrix-iii.cpp"
      ],
      [
        "Python",
        "Python/spiral-matrix-iii.py"
      ]
    ],
    "Time": "_O(max(m, n)^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 886,
    "Title": "[Possible Bipartition](https://leetcode.com/problems/possible-bipartition/)",
    "Solution": [
      [
        "C++",
        "C++/possible-bipartition.cpp"
      ],
      [
        "Python",
        "Python/possible-bipartition.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "V\\",
    "Difficulty": "+ \\",
    "Tag": "E\\",
    "Note": ")_"
  },
  {
    "Index": 887,
    "Title": "[Super Egg Drop](https://leetcode.com/problems/super-egg-drop/)",
    "Solution": [
      [
        "C++",
        "C++/super-egg-drop.cpp"
      ],
      [
        "Python",
        "Python/super-egg-drop.py"
      ]
    ],
    "Time": "_O(klogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 888,
    "Title": "[Fair Candy Swap](https://leetcode.com/problems/fair-candy-swap/)",
    "Solution": [
      [
        "C++",
        "C++/fair-candy-swap.cpp"
      ],
      [
        "Python",
        "Python/fair-candy-swap.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 889,
    "Title": "[Construct Binary Tree from Preorder and Postorder Traversal](https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/)",
    "Solution": [
      [
        "C++",
        "C++/construct-binary-tree-from-preorder-and-postorder-traversal.cpp"
      ],
      [
        "Python",
        "Python/construct-binary-tree-from-preorder-and-postorder-traversal.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS, Stack"
  },
  {
    "Index": 890,
    "Title": "[Find and Replace Pattern](https://leetcode.com/problems/find-and-replace-pattern/)",
    "Solution": [
      [
        "C++",
        "C++/find-and-replace-pattern.cpp"
      ],
      [
        "Python",
        "Python/find-and-replace-pattern.py"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 891,
    "Title": "[Sum of Subsequence Widths](https://leetcode.com/problems/sum-of-subsequence-widths/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-subsequence-widths.cpp"
      ],
      [
        "Python",
        "Python/sum-of-subsequence-widths.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 892,
    "Title": "[Surface Area of 3D Shapes](https://leetcode.com/problems/surface-area-of-3d-shapes/)",
    "Solution": [
      [
        "C++",
        "C++/surface-area-of-3d-shapes.cpp"
      ],
      [
        "Python",
        "Python/surface-area-of-3d-shapes.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 893,
    "Title": "[Groups of Special-Equivalent Strings](https://leetcode.com/problems/groups-of-special-equivalent-strings/)",
    "Solution": [
      [
        "C++",
        "C++/groups-of-special-equivalent-strings.cpp"
      ],
      [
        "Python",
        "Python/groups-of-special-equivalent-strings.py"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 894,
    "Title": "[All Possible Full Binary Trees](https://leetcode.com/problems/all-possible-full-binary-trees/)",
    "Solution": [
      [
        "C++",
        "C++/all-possible-full-binary-trees.cpp"
      ],
      [
        "Python",
        "Python/all-possible-full-binary-trees.py"
      ]
    ],
    "Time": "_O(n * 4^n / n^(3/2))_",
    "Space": "_O(n * 4^n / n^(3/2))_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 895,
    "Title": "[Maximum Frequency Stack](https://leetcode.com/problems/maximum-frequency-stack/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-frequency-stack.cpp"
      ],
      [
        "Python",
        "Python/maximum-frequency-stack.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 896,
    "Title": "[Monotonic Array](https://leetcode.com/problems/monotonic-array/)",
    "Solution": [
      [
        "C++",
        "C++/monotonic-array.cpp"
      ],
      [
        "Python",
        "Python/monotonic-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 897,
    "Title": "[Increasing Order Search Tree](https://leetcode.com/problems/increasing-order-search-tree/)",
    "Solution": [
      [
        "C++",
        "C++/increasing-order-search-tree.cpp"
      ],
      [
        "Python",
        "Python/increasing-order-search-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 898,
    "Title": "[Bitwise ORs of Subarrays](https://leetcode.com/problems/bitwise-ors-of-subarrays/)",
    "Solution": [
      [
        "C++",
        "C++/bitwise-ors-of-subarrays.cpp"
      ],
      [
        "Python",
        "Python/bitwise-ors-of-subarrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 899,
    "Title": "[Orderly Queue](https://leetcode.com/problems/orderly-queues/)",
    "Solution": [
      [
        "C++",
        "C++/orderly-queue.cpp"
      ],
      [
        "Python",
        "Python/orderly-queue.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 900,
    "Title": "[RLE Iterator](https://leetcode.com/problems/rle-iterator/)",
    "Solution": [
      [
        "C++",
        "C++/rle-iterator.cpp"
      ],
      [
        "Python",
        "Python/rle-iterator.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 901,
    "Title": "[Online Stock Span](https://leetcode.com/problems/online-stock-span/)",
    "Solution": [
      [
        "C++",
        "C++/online-stock-span.cpp"
      ],
      [
        "Python",
        "Python/online-stock-span.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 902,
    "Title": "[Numbers At Most N Given Digit Set](https://leetcode.com/problems/numbers-at-most-n-given-digit-set/)",
    "Solution": [
      [
        "C++",
        "C++/numbers-at-most-n-given-digit-set.cpp"
      ],
      [
        "Python",
        "Python/numbers-at-most-n-given-digit-set.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(logn)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 903,
    "Title": "[Valid Permutations for DI Sequence](https://leetcode.com/problems/valid-permutations-for-di-sequence/)",
    "Solution": [
      [
        "C++",
        "C++/valid-permutations-for-di-sequence.cpp"
      ],
      [
        "Python",
        "Python/valid-permutations-for-di-sequence.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 904,
    "Title": "[Fruit Into Baskets](https://leetcode.com/problems/fruit-into-baskets/)",
    "Solution": [
      [
        "C++",
        "C++/fruit-into-baskets.cpp"
      ],
      [
        "Python",
        "Python/fruit-into-baskets.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 905,
    "Title": "[Sort Array By Parity](https://leetcode.com/problems/sort-array-by-parity/)",
    "Solution": [
      [
        "C++",
        "C++/sort-array-by-parity.cpp"
      ],
      [
        "Python",
        "Python/sort-array-by-parity.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 906,
    "Title": "[Super Palindromes](https://leetcode.com/problems/super-palindromes/)",
    "Solution": [
      [
        "C++",
        "C++/super-palindromes.cpp"
      ],
      [
        "Python",
        "Python/super-palindromes.py"
      ]
    ],
    "Time": "_O(n^0.25 * logn)_",
    "Space": "_O(logn)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 907,
    "Title": "[Sum of Subarray Minimums](https://leetcode.com/problems/sum-of-subarray-minimums/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-subarray-minimums.cpp"
      ],
      [
        "Python",
        "Python/sum-of-subarray-minimums.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Mono Stack"
  },
  {
    "Index": 908,
    "Title": "[Smallest Range I](https://leetcode.com/problems/smallest-range-i/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-range-i.cpp"
      ],
      [
        "Python",
        "Python/smallest-range-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 909,
    "Title": "[Snakes and Ladders](https://leetcode.com/problems/snakes-and-ladders/)",
    "Solution": [
      [
        "C++",
        "C++/snakes-and-ladders.cpp"
      ],
      [
        "Python",
        "Python/snakes-and-ladders.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 910,
    "Title": "[Smallest Range II](https://leetcode.com/problems/smallest-range-ii/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-range-ii.cpp"
      ],
      [
        "Python",
        "Python/smallest-range-ii.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 911,
    "Title": "[Online Election](https://leetcode.com/problems/online-election/)",
    "Solution": [
      [
        "C++",
        "C++/online-election.cpp"
      ],
      [
        "Python",
        "Python/online-election.py"
      ]
    ],
    "Time": "ctor: _O(n)_<br> query : _O(logn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 912,
    "Title": "[Sort an Array](https://leetcode.com/problems/sort-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/sort-an-array.cpp"
      ],
      [
        "Python",
        "Python/sort-an-array.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Merge Sort, Quick Sort"
  },
  {
    "Index": 913,
    "Title": "[Cat and Mouse](https://leetcode.com/problems/cat-and-mouse/)",
    "Solution": [
      [
        "C++",
        "C++/cat-and-mouse.cpp"
      ],
      [
        "Python",
        "Python/cat-and-mouse.py"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "MiniMax, Topological Sort"
  },
  {
    "Index": 914,
    "Title": "[X of a Kind in a Deck of Cards](https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards/)",
    "Solution": [
      [
        "C++",
        "C++/x-of-a-kind-in-a-deck-of-cards.cpp"
      ],
      [
        "Python",
        "Python/x-of-a-kind-in-a-deck-of-cards.py"
      ]
    ],
    "Time": "_O(n * (logn)^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 915,
    "Title": "[Partition Array into Disjoint Intervals](https://leetcode.com/problems/partition-array-into-disjoint-intervals/)",
    "Solution": [
      [
        "C++",
        "C++/partition-array-into-disjoint-intervals.cpp"
      ],
      [
        "Python",
        "Python/partition-array-into-disjoint-intervals.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 916,
    "Title": "[Word Subsets](https://leetcode.com/problems/word-subsets/)",
    "Solution": [
      [
        "C++",
        "C++/word-subsets.cpp"
      ],
      [
        "Python",
        "Python/word-subsets.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 917,
    "Title": "[Reverse Only Letters](https://leetcode.com/problems/reverse-only-letters/)",
    "Solution": [
      [
        "C++",
        "C++/reverse-only-letters.cpp"
      ],
      [
        "Python",
        "Python/reverse-only-letters.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 918,
    "Title": "[Maximum Sum Circular Subarray](https://leetcode.com/problems/maximum-sum-circular-subarray/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-sum-circular-subarray.cpp"
      ],
      [
        "Python",
        "Python/maximum-sum-circular-subarray.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 919,
    "Title": "[Complete Binary Tree Inserter](https://leetcode.com/problems/complete-binary-tree-inserter/)",
    "Solution": [
      [
        "C++",
        "C++/complete-binary-tree-inserter.cpp"
      ],
      [
        "Python",
        "Python/complete-binary-tree-inserter.py"
      ]
    ],
    "Time": "ctor: _O(n)_ <br> insert: _O(1)_ <br> get_root: _O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 920,
    "Title": "[Number of Music Playlists](https://leetcode.com/problems/number-of-music-playlists/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-music-playlists.cpp"
      ],
      [
        "Python",
        "Python/number-of-music-playlists.py"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(l)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 921,
    "Title": "[Minimum Add to Make Parentheses Valid](https://leetcode.com/problems/minimum-add-to-make-parentheses-valid/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-add-to-make-parentheses-valid.cpp"
      ],
      [
        "Python",
        "Python/minimum-add-to-make-parentheses-valid.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 922,
    "Title": "[Sort Array By Parity II](https://leetcode.com/problems/sort-array-by-parity-ii/)",
    "Solution": [
      [
        "C++",
        "C++/sort-array-by-parity-ii.cpp"
      ],
      [
        "Python",
        "Python/sort-array-by-parity-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 923,
    "Title": "[3Sum With Multiplicity](https://leetcode.com/problems/3sum-with-multiplicity/)",
    "Solution": [
      [
        "C++",
        "C++/3sum-with-multiplicity.cpp"
      ],
      [
        "Python",
        "Python/3sum-with-multiplicity.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 924,
    "Title": "[Minimize Malware Spread](https://leetcode.com/problems/minimize-malware-spread/)",
    "Solution": [
      [
        "C++",
        "C++/minimize-malware-spread.cpp"
      ],
      [
        "Python",
        "Python/minimize-malware-spread.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Union Find"
  },
  {
    "Index": 925,
    "Title": "[Long Pressed Name](https://leetcode.com/problems/long-pressed-name/)",
    "Solution": [
      [
        "C++",
        "C++/long-pressed-name.cpp"
      ],
      [
        "Python",
        "Python/long-pressed-name.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 926,
    "Title": "[Flip String to Monotone Increasing](https://leetcode.com/problems/flip-string-to-monotone-increasing/)",
    "Solution": [
      [
        "C++",
        "C++/flip-string-to-monotone-increasing.cpp"
      ],
      [
        "Python",
        "Python/flip-string-to-monotone-increasing.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 927,
    "Title": "[Three Equal Parts](https://leetcode.com/problems/three-equal-parts/)",
    "Solution": [
      [
        "C++",
        "C++/three-equal-parts.cpp"
      ],
      [
        "Python",
        "Python/three-equal-parts.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 928,
    "Title": "[Minimize Malware Spread II](https://leetcode.com/problems/minimize-malware-spread-ii/)",
    "Solution": [
      [
        "C++",
        "C++/minimize-malware-spread-ii.cpp"
      ],
      [
        "Python",
        "Python/minimize-malware-spread-ii.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Union Find"
  },
  {
    "Index": 929,
    "Title": "[Unique Email Addresses](https://leetcode.com/problems/unique-email-addresses/)",
    "Solution": [
      [
        "C++",
        "C++/unique-email-addresses.cpp"
      ],
      [
        "Python",
        "Python/unique-email-addresses.py"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(n * l)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 930,
    "Title": "[Binary Subarrays With Sum](https://leetcode.com/problems/binary-subarrays-with-sum/)",
    "Solution": [
      [
        "C++",
        "C++/binary-subarrays-with-sum.cpp"
      ],
      [
        "Python",
        "Python/binary-subarrays-with-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 931,
    "Title": "[Minimum Falling Path Sum](https://leetcode.com/problems/minimum-falling-path-sum/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-falling-path-sum.cpp"
      ],
      [
        "Python",
        "Python/minimum-falling-path-sum.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 932,
    "Title": "[Beautiful Array](https://leetcode.com/problems/beautiful-array/)",
    "Solution": [
      [
        "C++",
        "C++/beautiful-array.cpp"
      ],
      [
        "Python",
        "Python/beautiful-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 933,
    "Title": "[Number of Recent Calls](https://leetcode.com/problems/number-of-recent-calls/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-recent-calls.cpp"
      ],
      [
        "Python",
        "Python/number-of-recent-calls.py"
      ]
    ],
    "Time": "_O(1)_ on average",
    "Space": "_O(w)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 934,
    "Title": "[Shortest Bridge](https://leetcode.com/problems/shortest-bridge/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-bridge.cpp"
      ],
      [
        "Python",
        "Python/shortest-bridge.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "BFS, DFS"
  },
  {
    "Index": 935,
    "Title": "[Knight Dialer](https://leetcode.com/problems/knight-dialer/)",
    "Solution": [
      [
        "C++",
        "C++/knight-dialer.cpp"
      ],
      [
        "Python",
        "Python/knight-dialer.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Matrix Exponentiation"
  },
  {
    "Index": 936,
    "Title": "[Stamping The Sequence](https://leetcode.com/problems/stamping-the-sequence/)",
    "Solution": [
      [
        "C++",
        "C++/stamping-the-sequence.cpp"
      ],
      [
        "Python",
        "Python/stamping-the-sequence.py"
      ]
    ],
    "Time": "_O((n - m) * m)_",
    "Space": "_O((n - m) * m)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 937,
    "Title": "[Reorder Log Files](https://leetcode.com/problems/reorder-log-files/)",
    "Solution": [
      [
        "C++",
        "C++/reorder-log-files.cpp"
      ],
      [
        "Python",
        "Python/reorder-log-files.py"
      ]
    ],
    "Time": "_O(nlogn * l)_",
    "Space": "_O(l)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 938,
    "Title": "[Range Sum of BST](https://leetcode.com/problems/range-sum-of-bst/)",
    "Solution": [
      [
        "C++",
        "C++/range-sum-of-bst.cpp"
      ],
      [
        "Python",
        "Python/range-sum-of-bst.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 939,
    "Title": "[Minimum Area Rectangle](https://leetcode.com/problems/minimum-area-rectangle/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-area-rectangle.cpp"
      ],
      [
        "Python",
        "Python/minimum-area-rectangle.py"
      ]
    ],
    "Time": "_O(n^1.5)_ on average",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 940,
    "Title": "[Distinct Subsequences II](https://leetcode.com/problems/distinct-subsequences-ii/)",
    "Solution": [
      [
        "C++",
        "C++/distinct-subsequences-ii.cpp"
      ],
      [
        "Python",
        "Python/distinct-subsequences-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 941,
    "Title": "[Valid Mountain Array](https://leetcode.com/problems/valid-mountain-array/)",
    "Solution": [
      [
        "C++",
        "C++/valid-mountain-array.cpp"
      ],
      [
        "Python",
        "Python/valid-mountain-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 942,
    "Title": "[DI String Match](https://leetcode.com/problems/di-string-match/)",
    "Solution": [
      [
        "C++",
        "C++/di-string-match.cpp"
      ],
      [
        "Python",
        "Python/di-string-match.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 943,
    "Title": "[Find the Shortest Superstring](https://leetcode.com/problems/find-the-shortest-superstring/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-shortest-superstring.cpp"
      ],
      [
        "Python",
        "Python/find-the-shortest-superstring.py"
      ]
    ],
    "Time": "_O(n^2 * (l^2 + 2^n))_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 944,
    "Title": "[Delete Columns to Make Sorted](https://leetcode.com/problems/delete-columns-to-make-sorted/)",
    "Solution": [
      [
        "C++",
        "C++/delete-columns-to-make-sorted.cpp"
      ],
      [
        "Python",
        "Python/delete-columns-to-make-sorted.py"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 945,
    "Title": "[Minimum Increment to Make Array Unique](https://leetcode.com/problems/minimum-increment-to-make-array-unique/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-increment-to-make-array-unique.cpp"
      ],
      [
        "Python",
        "Python/minimum-increment-to-make-array-unique.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 946,
    "Title": "[Validate Stack Sequences](https://leetcode.com/problems/validate-stack-sequences/)",
    "Solution": [
      [
        "C++",
        "C++/validate-stack-sequences.cpp"
      ],
      [
        "Python",
        "Python/validate-stack-sequences.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 947,
    "Title": "[Most Stones Removed with Same Row or Column](https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/)",
    "Solution": [
      [
        "C++",
        "C++/most-stones-removed-with-same-row-or-column.cpp"
      ],
      [
        "Python",
        "Python/most-stones-removed-with-same-row-or-column.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 948,
    "Title": "[Bag of Tokens](https://leetcode.com/problems/bag-of-tokens/)",
    "Solution": [
      [
        "C++",
        "C++/bag-of-tokens.cpp"
      ],
      [
        "Python",
        "Python/bag-of-tokens.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 949,
    "Title": "[Largest Time for Given Digits](https://leetcode.com/problems/largest-time-for-given-digits/)",
    "Solution": [
      [
        "C++",
        "C++/largest-time-for-given-digits.cpp"
      ],
      [
        "Python",
        "Python/largest-time-for-given-digits.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 950,
    "Title": "[Reveal Cards In Increasing Order](https://leetcode.com/problems/reveal-cards-in-increasing-order/)",
    "Solution": [
      [
        "C++",
        "C++/reveal-cards-in-increasing-order.cpp"
      ],
      [
        "Python",
        "Python/reveal-cards-in-increasing-order.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 951,
    "Title": "[Flip Equivalent Binary Trees](https://leetcode.com/problems/flip-equivalent-binary-trees/)",
    "Solution": [
      [
        "C++",
        "C++/flip-equivalent-binary-trees.cpp"
      ],
      [
        "Python",
        "Python/flip-equivalent-binary-trees.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 952,
    "Title": "[Largest Component Size by Common Factor](https://leetcode.com/problems/largest-component-size-by-common-factor/)",
    "Solution": [
      [
        "C++",
        "C++/largest-component-size-by-common-factor.cpp"
      ],
      [
        "Python",
        "Python/largest-component-size-by-common-factor.py"
      ]
    ],
    "Time": "_O(f * n)_",
    "Space": "_O(p + n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 953,
    "Title": "[Verifying an Alien Dictionary](https://leetcode.com/problems/verifying-an-alien-dictionary/)",
    "Solution": [
      [
        "C++",
        "C++/verifying-an-alien-dictionary.cpp"
      ],
      [
        "Python",
        "Python/verifying-an-alien-dictionary.py"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 954,
    "Title": "[Array of Doubled Pairs](https://leetcode.com/problems/array-of-doubled-pairs/)",
    "Solution": [
      [
        "C++",
        "C++/array-of-doubled-pairs.cpp"
      ],
      [
        "Python",
        "Python/array-of-doubled-pairs.py"
      ]
    ],
    "Time": "_O(n + klogk)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 955,
    "Title": "[Delete Columns to Make Sorted II](https://leetcode.com/problems/delete-columns-to-make-sorted-ii/)",
    "Solution": [
      [
        "C++",
        "C++/delete-columns-to-make-sorted-ii.cpp"
      ],
      [
        "Python",
        "Python/delete-columns-to-make-sorted-ii.py"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 956,
    "Title": "[Tallest Billboard](https://leetcode.com/problems/tallest-billboard/)",
    "Solution": [
      [
        "C++",
        "C++/tallest-billboard.cpp"
      ],
      [
        "Python",
        "Python/tallest-billboard.py"
      ]
    ],
    "Time": "_O(n * 3^(n/2))_",
    "Space": "_O(3^(n/2))_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 957,
    "Title": "[Prison Cells After N Days](https://leetcode.com/problems/prison-cells-after-n-days/)",
    "Solution": [
      [
        "C++",
        "C++/prison-cells-after-n-days.cpp"
      ],
      [
        "Python",
        "Python/prison-cells-after-n-days.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 958,
    "Title": "[Check Completeness of a Binary Tree](https://leetcode.com/problems/check-completeness-of-a-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/check-completeness-of-a-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/check-completeness-of-a-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(w)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "BFS"
  },
  {
    "Index": 959,
    "Title": "[Regions Cut By Slashes](https://leetcode.com/problems/regions-cut-by-slashes/)",
    "Solution": [
      [
        "C++",
        "C++/regions-cut-by-slashes.cpp"
      ],
      [
        "Python",
        "Python/regions-cut-by-slashes.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Union Find"
  },
  {
    "Index": 960,
    "Title": "[Delete Columns to Make Sorted III](https://leetcode.com/problems/delete-columns-to-make-sorted-iii/)",
    "Solution": [
      [
        "C++",
        "C++/delete-columns-to-make-sorted-iii.cpp"
      ],
      [
        "Python",
        "Python/delete-columns-to-make-sorted-iii.py"
      ]
    ],
    "Time": "_O(n * l^2)_",
    "Space": "_O(l)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 961,
    "Title": "[N-Repeated Element in Size 2N Array](https://leetcode.com/problems/n-repeated-element-in-size-2n-array/)",
    "Solution": [
      [
        "C++",
        "C++/n-repeated-element-in-size-2n-array.cpp"
      ],
      [
        "Python",
        "Python/n-repeated-element-in-size-2n-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 962,
    "Title": "[Maximum Width Ramp](https://leetcode.com/problems/maximum-width-ramp/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-width-ramp.cpp"
      ],
      [
        "Python",
        "Python/maximum-width-ramp.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 963,
    "Title": "[Minimum Area Rectangle II](https://leetcode.com/problems/minimum-area-rectangle-ii/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-area-rectangle-ii.cpp"
      ],
      [
        "Python",
        "Python/minimum-area-rectangle-ii.py"
      ]
    ],
    "Time": "_O(n^2)_ ~ _O(n^3)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 964,
    "Title": "[Least Operators to Express Number](https://leetcode.com/problems/least-operators-to-express-number/)",
    "Solution": [
      [
        "C++",
        "C++/least-operators-to-express-number.cpp"
      ],
      [
        "Python",
        "Python/least-operators-to-express-number.py"
      ]
    ],
    "Time": "_O(logn / logx)_",
    "Space": "_O(logn)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 965,
    "Title": "[Univalued Binary Tree](https://leetcode.com/problems/univalued-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/univalued-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/univalued-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 966,
    "Title": "[Vowel Spellchecker](https://leetcode.com/problems/vowel-spellchecker/)",
    "Solution": [
      [
        "C++",
        "C++/vowel-spellchecker.cpp"
      ],
      [
        "Python",
        "Python/vowel-spellchecker.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(w)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 967,
    "Title": "[Numbers With Same Consecutive Differences](https://leetcode.com/problems/numbers-with-same-consecutive-differences/)",
    "Solution": [
      [
        "C++",
        "C++/numbers-with-same-consecutive-differences.cpp"
      ],
      [
        "Python",
        "Python/numbers-with-same-consecutive-differences.py"
      ]
    ],
    "Time": "_O(2^n)_",
    "Space": "_O(2^n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 968,
    "Title": "[Binary Tree Cameras](https://leetcode.com/problems/binary-tree-cameras/)",
    "Solution": [
      [
        "C++",
        "C++/binary-tree-cameras.cpp"
      ],
      [
        "Python",
        "Python/binary-tree-cameras.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 969,
    "Title": "[Pancake Sorting](https://leetcode.com/problems/pancake-sorting/)",
    "Solution": [
      [
        "C++",
        "C++/pancake-sorting.cpp"
      ],
      [
        "Python",
        "Python/pancake-sorting.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Count of Smaller Numbers After Self](https://leetcode.com/problems/count-of-smaller-numbers-after-self/)",
    "Note": "BIT, Fenwick Tree, Merge Sort"
  },
  {
    "Index": 970,
    "Title": "[Powerful Integers](https://leetcode.com/problems/powerful-integers/)",
    "Solution": [
      [
        "C++",
        "C++/powerful-integers.cpp"
      ],
      [
        "Python",
        "Python/powerful-integers.py"
      ]
    ],
    "Time": "_O((logn)^2)_",
    "Space": "_O(r)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 971,
    "Title": "[Flip Binary Tree To Match Preorder Traversal](https://leetcode.com/problems/flip-binary-tree-to-match-preorder-traversal/)",
    "Solution": [
      [
        "C++",
        "C++/flip-binary-tree-to-match-preorder-traversal.cpp"
      ],
      [
        "Python",
        "Python/flip-binary-tree-to-match-preorder-traversal.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 972,
    "Title": "[Equal Rational Numbers](https://leetcode.com/problems/equal-rational-numbers/)",
    "Solution": [
      [
        "C++",
        "C++/equal-rational-numbers.cpp"
      ],
      [
        "Python",
        "Python/equal-rational-numbers.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 973,
    "Title": "[K Closest Points to Origin](https://leetcode.com/problems/k-closest-points-to-origin/)",
    "Solution": [
      [
        "C++",
        "C++/k-closest-points-to-origin.cpp"
      ],
      [
        "Python",
        "Python/k-closest-points-to-origin.py"
      ]
    ],
    "Time": "_O(n)_ on average",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Quick Select, Heap"
  },
  {
    "Index": 974,
    "Title": "[Subarray Sums Divisible by K](https://leetcode.com/problems/subarray-sums-divisible-by-k/)",
    "Solution": [
      [
        "C++",
        "C++/subarray-sums-divisible-by-k.cpp"
      ],
      [
        "Python",
        "Python/subarray-sums-divisible-by-k.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Subarray Sum Equals K](https://leetcode.com/problems/subarray-sum-equals-k/)"
  },
  {
    "Index": 975,
    "Title": "[Odd Even Jump](https://leetcode.com/problems/odd-even-jump/)",
    "Solution": [
      [
        "C++",
        "C++/odd-even-jump.cpp"
      ],
      [
        "Python",
        "Python/odd-even-jump.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 976,
    "Title": "[Largest Perimeter Triangle](https://leetcode.com/problems/largest-perimeter-triangle/)",
    "Solution": [
      [
        "C++",
        "C++/largest-perimeter-triangle.cpp"
      ],
      [
        "Python",
        "Python/largest-perimeter-triangle.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 977,
    "Title": "[Squares of a Sorted Array](https://leetcode.com/problems/squares-of-a-sorted-array/)",
    "Solution": [
      [
        "C++",
        "C++/squares-of-a-sorted-array.cpp"
      ],
      [
        "Python",
        "Python/squares-of-a-sorted-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 978,
    "Title": "[Longest Turbulent Subarray](https://leetcode.com/problems/longest-turbulent-subarray/)",
    "Solution": [
      [
        "C++",
        "C++/longest-turbulent-subarray.cpp"
      ],
      [
        "Python",
        "Python/longest-turbulent-subarray.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 979,
    "Title": "[Distribute Coins in Binary Tree](https://leetcode.com/problems/distribute-coins-in-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/distribute-coins-in-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/distribute-coins-in-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 980,
    "Title": "[Unique Paths III](https://leetcode.com/problems/unique-paths-iii/)",
    "Solution": [
      [
        "C++",
        "C++/unique-paths-iii.cpp"
      ],
      [
        "Python",
        "Python/unique-paths-iii.py"
      ]
    ],
    "Time": "_O((m * n) * 2^(m * n))_",
    "Space": "_O((m * n) * 2^(m * n))_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 981,
    "Title": "[Time Based Key-Value Store](https://leetcode.com/problems/time-based-key-value-store/)",
    "Solution": [
      [
        "C++",
        "C++/time-based-key-value-store.cpp"
      ],
      [
        "Python",
        "Python/time-based-key-value-store.py"
      ]
    ],
    "Time": "set: _O(1)_<br> get : _O(logn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 982,
    "Title": "[Triples with Bitwise AND Equal To Zero](https://leetcode.com/problems/triples-with-bitwise-and-equal-to-zero/)",
    "Solution": [
      [
        "C++",
        "C++/triples-with-bitwise-and-equal-to-zero.cpp"
      ],
      [
        "Python",
        "Python/triples-with-bitwise-and-equal-to-zero.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 983,
    "Title": "[Minimum Cost For Tickets](https://leetcode.com/problems/minimum-cost-for-tickets/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-for-tickets.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-for-tickets.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 984,
    "Title": "[String Without AAA or BBB](https://leetcode.com/problems/string-without-aaa-or-bbb/)",
    "Solution": [
      [
        "C++",
        "C++/string-without-aaa-or-bbb.cpp"
      ],
      [
        "Python",
        "Python/string-without-aaa-or-bbb.py"
      ]
    ],
    "Time": "_O(a + b)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 985,
    "Title": "[Sum of Even Numbers After Queries](https://leetcode.com/problems/sum-of-even-numbers-after-queries/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-even-numbers-after-queries.cpp"
      ],
      [
        "Python",
        "Python/sum-of-even-numbers-after-queries.py"
      ]
    ],
    "Time": "_O(n + q)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 986,
    "Title": "[Interval List Intersections](https://leetcode.com/problems/interval-list-intersections/)",
    "Solution": [
      [
        "C++",
        "C++/interval-list-intersections.cpp"
      ],
      [
        "Python",
        "Python/interval-list-intersections.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 987,
    "Title": "[Vertical Order Traversal of a Binary Tree](https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/vertical-order-traversal-of-a-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/vertical-order-traversal-of-a-binary-tree.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 988,
    "Title": "[Smallest String Starting From Leaf](https://leetcode.com/problems/smallest-string-starting-from-leaf/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-string-starting-from-leaf.cpp"
      ],
      [
        "Python",
        "Python/smallest-string-starting-from-leaf.py"
      ]
    ],
    "Time": "_O(n + l * h)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 989,
    "Title": "[Add to Array-Form of Integer](https://leetcode.com/problems/add-to-array-form-of-integer/)",
    "Solution": [
      [
        "C++",
        "C++/add-to-array-form-of-integer.cpp"
      ],
      [
        "Python",
        "Python/add-to-array-form-of-integer.py"
      ]
    ],
    "Time": "_O(n + logk)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 990,
    "Title": "[Satisfiability of Equality Equations](https://leetcode.com/problems/satisfiability-of-equality-equations/)",
    "Solution": [
      [
        "C++",
        "C++/satisfiability-of-equality-equations.cpp"
      ],
      [
        "Python",
        "Python/satisfiability-of-equality-equations.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Union Find"
  },
  {
    "Index": 991,
    "Title": "[Broken Calculator](https://leetcode.com/problems/broken-calculator/)",
    "Solution": [
      [
        "C++",
        "C++/broken-calculator.cpp"
      ],
      [
        "Python",
        "Python/broken-calculator.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 992,
    "Title": "[Subarrays with K Different Integers](https://leetcode.com/problems/subarrays-with-k-different-integers/)",
    "Solution": [
      [
        "C++",
        "C++/subarrays-with-k-different-integers.cpp"
      ],
      [
        "Python",
        "Python/subarrays-with-k-different-integers.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(k)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 993,
    "Title": "[Cousins in Binary Tree](https://leetcode.com/problems/cousins-in-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/cousins-in-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/cousins-in-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 994,
    "Title": "[Rotting Oranges](https://leetcode.com/problems/rotting-oranges/)",
    "Solution": [
      [
        "C++",
        "C++/rotting-oranges.cpp"
      ],
      [
        "Python",
        "Python/rotting-oranges.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 995,
    "Title": "[Minimum Number of K Consecutive Bit Flips](https://leetcode.com/problems/minimum-number-of-k-consecutive-bit-flips/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-k-consecutive-bit-flips.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-k-consecutive-bit-flips.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 996,
    "Title": "[Number of Squareful Arrays](https://leetcode.com/problems/number-of-squareful-arrays/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-squareful-arrays.cpp"
      ],
      [
        "Python",
        "Python/number-of-squareful-arrays.py"
      ]
    ],
    "Time": "_O(n!)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 997,
    "Title": "[Find the Town Judge](https://leetcode.com/problems/find-the-town-judge/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-town-judge.cpp"
      ],
      [
        "Python",
        "Python/find-the-town-judge.py"
      ]
    ],
    "Time": "_O(t + n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 998,
    "Title": "[Maximum Binary Tree II](https://leetcode.com/problems/maximum-binary-tree-ii/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-binary-tree-ii.cpp"
      ],
      [
        "Python",
        "Python/maximum-binary-tree-ii.py"
      ]
    ],
    "Time": "_O(h)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Cartesian Tree"
  },
  {
    "Index": 999,
    "Title": "[Available Captures for Rook](https://leetcode.com/problems/available-captures-for-rook/)",
    "Solution": [
      [
        "C++",
        "C++/available-captures-for-rook.cpp"
      ],
      [
        "Python",
        "Python/available-captures-for-rook.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1000,
    "Title": "[Minimum Cost to Merge Stones](https://leetcode.com/problems/minimum-cost-to-merge-stones/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-to-merge-stones.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-to-merge-stones.py"
      ]
    ],
    "Time": "_O(n^3 / k)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1001,
    "Title": "[Grid Illumination](https://leetcode.com/problems/grid-illumination/)",
    "Solution": [
      [
        "C++",
        "C++/grid-illumination.cpp"
      ],
      [
        "Python",
        "Python/grid-illumination.py"
      ]
    ],
    "Time": "_O(l + q)_",
    "Space": "_O(l)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1002,
    "Title": "[Find Common Characters](https://leetcode.com/problems/find-common-characters/)",
    "Solution": [
      [
        "C++",
        "C++/find-common-characters.cpp"
      ],
      [
        "Python",
        "Python/find-common-characters.py"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1003,
    "Title": "[Check If Word Is Valid After Substitutions](https://leetcode.com/problems/check-if-word-is-valid-after-substitutions/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-word-is-valid-after-substitutions.cpp"
      ],
      [
        "Python",
        "Python/check-if-word-is-valid-after-substitutions.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1004,
    "Title": "[Max Consecutive Ones III](https://leetcode.com/problems/max-consecutive-ones-iii/)",
    "Solution": [
      [
        "C++",
        "C++/max-consecutive-ones-iii.cpp"
      ],
      [
        "Python",
        "Python/max-consecutive-ones-iii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1005,
    "Title": "[Maximize Sum Of Array After K Negations](https://leetcode.com/problems/maximize-sum-of-array-after-k-negations/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-sum-of-array-after-k-negations.cpp"
      ],
      [
        "Python",
        "Python/maximize-sum-of-array-after-k-negations.py"
      ]
    ],
    "Time": "_O(n)_ on average",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1006,
    "Title": "[Clumsy Factorial](https://leetcode.com/problems/clumsy-factorial/)",
    "Solution": [
      [
        "C++",
        "C++/clumsy-factorial.cpp"
      ],
      [
        "Python",
        "Python/clumsy-factorial.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1007,
    "Title": "[Minimum Domino Rotations For Equal Row](https://leetcode.com/problems/minimum-domino-rotations-for-equal-row/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-domino-rotations-for-equal-row.cpp"
      ],
      [
        "Python",
        "Python/minimum-domino-rotations-for-equal-row.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1008,
    "Title": "[Construct Binary Search Tree from Preorder Traversal](https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/)",
    "Solution": [
      [
        "C++",
        "C++/construct-binary-search-tree-from-preorder-traversal.cpp"
      ],
      [
        "Python",
        "Python/construct-binary-search-tree-from-preorder-traversal.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1009,
    "Title": "[Complement of Base 10 Integer](https://leetcode.com/problems/complement-of-base-10-integer/)",
    "Solution": [
      [
        "C++",
        "C++/complement-of-base-10-integer.cpp"
      ],
      [
        "Python",
        "Python/complement-of-base-10-integer.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1010,
    "Title": "[Pairs of Songs With Total Durations Divisible by 60](https://leetcode.com/problems/pairs-of-songs-with-total-durations-divisible-by-60/)",
    "Solution": [
      [
        "C++",
        "C++/pairs-of-songs-with-total-durations-divisible-by-60.cpp"
      ],
      [
        "Python",
        "Python/pairs-of-songs-with-total-durations-divisible-by-60.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1011,
    "Title": "[Capacity To Ship Packages Within D Days](https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/)",
    "Solution": [
      [
        "C++",
        "C++/capacity-to-ship-packages-within-d-days.cpp"
      ],
      [
        "Python",
        "Python/capacity-to-ship-packages-within-d-days.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1012,
    "Title": "[Numbers With Repeated Digits](https://leetcode.com/problems/numbers-with-repeated-digits/)",
    "Solution": [
      [
        "C++",
        "C++/numbers-with-repeated-digits.cpp"
      ],
      [
        "Python",
        "Python/numbers-with-repeated-digits.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(logn)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1013,
    "Title": "[Partition Array Into Three Parts With Equal Sum](https://leetcode.com/problems/partition-array-into-three-parts-with-equal-sum/)",
    "Solution": [
      [
        "C++",
        "C++/partition-array-into-three-parts-with-equal-sum.cpp"
      ],
      [
        "Python",
        "Python/partition-array-into-three-parts-with-equal-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1014,
    "Title": "[Best Sightseeing Pair](https://leetcode.com/problems/best-sightseeing-pair/)",
    "Solution": [
      [
        "C++",
        "C++/best-sightseeing-pair.cpp"
      ],
      [
        "Python",
        "Python/best-sightseeing-pair.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1015,
    "Title": "[Smallest Integer Divisible by K](https://leetcode.com/problems/smallest-integer-divisible-by-k/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-integer-divisible-by-k.cpp"
      ],
      [
        "Python",
        "Python/smallest-integer-divisible-by-k.py"
      ]
    ],
    "Time": "_O(k)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1016,
    "Title": "[Binary String With Substrings Representing 1 To N](https://leetcode.com/problems/binary-string-with-substrings-representing-1-to-n/)",
    "Solution": [
      [
        "C++",
        "C++/binary-string-with-substrings-representing-1-to-n.cpp"
      ],
      [
        "Python",
        "Python/binary-string-with-substrings-representing-1-to-n.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1017,
    "Title": "[Convert to Base -2](https://leetcode.com/problems/convert-to-base-2/)",
    "Solution": [
      [
        "C++",
        "C++/convert-to-base-2.cpp"
      ],
      [
        "Python",
        "Python/convert-to-base-2.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1018,
    "Title": "[Binary Prefix Divisible By 5](https://leetcode.com/problems/binary-prefix-divisible-by-5/)",
    "Solution": [
      [
        "C++",
        "C++/binary-prefix-divisible-by-5.cpp"
      ],
      [
        "Python",
        "Python/binary-prefix-divisible-by-5.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1019,
    "Title": "[Next Greater Node In Linked List](https://leetcode.com/problems/next-greater-node-in-linked-list/)",
    "Solution": [
      [
        "C++",
        "C++/next-greater-node-in-linked-list.cpp"
      ],
      [
        "Python",
        "Python/next-greater-node-in-linked-list.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1020,
    "Title": "[Number of Enclaves](https://leetcode.com/problems/number-of-enclaves/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-enclaves.cpp"
      ],
      [
        "Python",
        "Python/number-of-enclaves.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1021,
    "Title": "[Remove Outermost Parentheses](https://leetcode.com/problems/remove-outermost-parentheses/)",
    "Solution": [
      [
        "C++",
        "C++/remove-outermost-parentheses.cpp"
      ],
      [
        "Python",
        "Python/remove-outermost-parentheses.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1022,
    "Title": "[Sum of Root To Leaf Binary Numbers](https://leetcode.com/problems/sum-of-root-to-leaf-binary-numbers/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-root-to-leaf-binary-numbers.cpp"
      ],
      [
        "Python",
        "Python/sum-of-root-to-leaf-binary-numbers.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1023,
    "Title": "[Camelcase Matching](https://leetcode.com/problems/camelcase-matching/)",
    "Solution": [
      [
        "C++",
        "C++/camelcase-matching.cpp"
      ],
      [
        "Python",
        "Python/camelcase-matching.py"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1024,
    "Title": "[Video Stitching](https://leetcode.com/problems/video-stitching/)",
    "Solution": [
      [
        "C++",
        "C++/video-stitching.cpp"
      ],
      [
        "Python",
        "Python/video-stitching.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Jump Game II](https://leetcode.com/problems/jump-game-ii/)"
  },
  {
    "Index": 1025,
    "Title": "[Divisor Game](https://leetcode.com/problems/divisor-game/)",
    "Solution": [
      [
        "C++",
        "C++/divisor-game.cpp"
      ],
      [
        "Python",
        "Python/divisor-game.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1026,
    "Title": "[Maximum Difference Between Node and Ancestor](https://leetcode.com/problems/maximum-difference-between-node-and-ancestor/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-difference-between-node-and-ancestor.cpp"
      ],
      [
        "Python",
        "Python/maximum-difference-between-node-and-ancestor.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 1027,
    "Title": "[Longest Arithmetic Sequence](https://leetcode.com/problems/longest-arithmetic-sequence/)",
    "Solution": [
      [
        "C++",
        "C++/longest-arithmetic-sequence.cpp"
      ],
      [
        "Python",
        "Python/longest-arithmetic-sequence.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1028,
    "Title": "[Recover a Tree From Preorder Traversal](https://leetcode.com/problems/recover-a-tree-from-preorder-traversal/)",
    "Solution": [
      [
        "C++",
        "C++/recover-a-tree-from-preorder-traversal.cpp"
      ],
      [
        "Python",
        "Python/recover-a-tree-from-preorder-traversal.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 1029,
    "Title": "[Two City Scheduling](https://leetcode.com/problems/two-city-scheduling/)",
    "Solution": [
      [
        "C++",
        "C++/two-city-scheduling.cpp"
      ],
      [
        "Python",
        "Python/two-city-scheduling.py"
      ]
    ],
    "Time": "_O(n)_ on average",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1030,
    "Title": "[Matrix Cells in Distance Order](https://leetcode.com/problems/matrix-cells-in-distance-order/)",
    "Solution": [
      [
        "C++",
        "C++/matrix-cells-in-distance-order.cpp"
      ],
      [
        "Python",
        "Python/matrix-cells-in-distance-order.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1031,
    "Title": "[Maximum Sum of Two Non-Overlapping Subarrays](https://leetcode.com/problems/maximum-sum-of-two-non-overlapping-subarrays/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-sum-of-two-non-overlapping-subarrays.cpp"
      ],
      [
        "Python",
        "Python/maximum-sum-of-two-non-overlapping-subarrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1032,
    "Title": "[Stream of Characters](https://leetcode.com/problems/stream-of-characters/)",
    "Solution": [
      [
        "C++",
        "C++/stream-of-characters.cpp"
      ],
      [
        "C++",
        "C++/stream-of-characters2.cpp"
      ],
      [
        "Python",
        "Python/stream-of-characters.py"
      ],
      [
        "Python",
        "Python/stream-of-characters2.py"
      ]
    ],
    "Time": "ctor: _O(n)_ <br> query: _O(m)_",
    "Space": "_O(t)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "`Aho-Corasick Automata`, Trie"
  },
  {
    "Index": 1033,
    "Title": "[Moving Stones Until Consecutive](https://leetcode.com/problems/moving-stones-until-consecutive/)",
    "Solution": [
      [
        "C++",
        "C++/moving-stones-until-consecutive.cpp"
      ],
      [
        "Python",
        "Python/moving-stones-until-consecutive.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1034,
    "Title": "[Coloring A Border](https://leetcode.com/problems/coloring-a-border/)",
    "Solution": [
      [
        "C++",
        "C++/coloring-a-border.cpp"
      ],
      [
        "Python",
        "Python/coloring-a-border.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1035,
    "Title": "[Uncrossed Lines](https://leetcode.com/problems/uncrossed-lines/)",
    "Solution": [
      [
        "C++",
        "C++/uncrossed-lines.cpp"
      ],
      [
        "Python",
        "Python/uncrossed-lines.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(min(m, n))_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1036,
    "Title": "[Escape a Large Maze](https://leetcode.com/problems/escape-a-large-maze/)",
    "Solution": [
      [
        "C++",
        "C++/escape-a-large-maze.cpp"
      ],
      [
        "Python",
        "Python/escape-a-large-maze.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1037,
    "Title": "[Valid Boomerang](https://leetcode.com/problems/valid-boomerang/)",
    "Solution": [
      [
        "C++",
        "C++/valid-boomerang.cpp"
      ],
      [
        "Python",
        "Python/valid-boomerang.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1038,
    "Title": "[Binary Search Tree to Greater Sum Tree](https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/)",
    "Solution": [
      [
        "C++",
        "C++/binary-search-tree-to-greater-sum-tree.cpp"
      ],
      [
        "Python",
        "Python/binary-search-tree-to-greater-sum-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 1039,
    "Title": "[Minimum Score Triangulation of Polygon](https://leetcode.com/problems/minimum-score-triangulation-of-polygon/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-score-triangulation-of-polygon.cpp"
      ],
      [
        "Python",
        "Python/minimum-score-triangulation-of-polygon.py"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1040,
    "Title": "[Moving Stones Until Consecutive II](https://leetcode.com/problems/moving-stones-until-consecutive-ii/)",
    "Solution": [
      [
        "C++",
        "C++/moving-stones-until-consecutive-ii.cpp"
      ],
      [
        "Python",
        "Python/moving-stones-until-consecutive-ii.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1041,
    "Title": "[Robot Bounded In Circle](https://leetcode.com/problems/robot-bounded-in-circle/)",
    "Solution": [
      [
        "C++",
        "C++/robot-bounded-in-circle.cpp"
      ],
      [
        "Python",
        "Python/robot-bounded-in-circle.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1042,
    "Title": "[Flower Planting With No Adjacent](https://leetcode.com/problems/flower-planting-with-no-adjacent/)",
    "Solution": [
      [
        "C++",
        "C++/flower-planting-with-no-adjacent.cpp"
      ],
      [
        "Python",
        "Python/flower-planting-with-no-adjacent.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1043,
    "Title": "[Partition Array for Maximum Sum](https://leetcode.com/problems/partition-array-for-maximum-sum/)",
    "Solution": [
      [
        "C++",
        "C++/partition-array-for-maximum-sum.cpp"
      ],
      [
        "Python",
        "Python/partition-array-for-maximum-sum.py"
      ]
    ],
    "Time": "_O(n * k)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1044,
    "Title": "[Longest Duplicate Substring](https://leetcode.com/problems/longest-duplicate-substring/)",
    "Solution": [
      [
        "C++",
        "C++/longest-duplicate-substring.cpp"
      ],
      [
        "Python",
        "Python/longest-duplicate-substring.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1045,
    "Title": "[Customers Who Bought All Products](https://leetcode.com/problems/customers-who-bought-all-products/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/customers-who-bought-all-products.sql"
      ]
    ],
    "Time": "_O(n + k)_",
    "Space": "_O(n + k)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1046,
    "Title": "[Last Stone Weight](https://leetcode.com/problems/last-stone-weight/)",
    "Solution": [
      [
        "C++",
        "C++/last-stone-weight.cpp"
      ],
      [
        "Python",
        "Python/last-stone-weight.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1047,
    "Title": "[Remove All Adjacent Duplicates In String](https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/)",
    "Solution": [
      [
        "C++",
        "C++/remove-all-adjacent-duplicates-in-string.cpp"
      ],
      [
        "Python",
        "Python/remove-all-adjacent-duplicates-in-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1048,
    "Title": "[Longest String Chain](https://leetcode.com/problems/longest-string-chain/)",
    "Solution": [
      [
        "C++",
        "C++/longest-string-chain.cpp"
      ],
      [
        "Python",
        "Python/longest-string-chain.py"
      ]
    ],
    "Time": "_O(n * l^2)_",
    "Space": "_O(n * l)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1049,
    "Title": "[Last Stone Weight II](https://leetcode.com/problems/last-stone-weight-ii/)",
    "Solution": [
      [
        "C++",
        "C++/last-stone-weight-ii.cpp"
      ],
      [
        "Python",
        "Python/last-stone-weight-ii.py"
      ]
    ],
    "Time": "_O(2^n)_",
    "Space": "_O(2^n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1050,
    "Title": "[Actors and Directors Who Cooperated At Least Three Times](https://leetcode.com/problems/actors-and-directors-who-cooperated-at-least-three-times/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/actors-and-directors-who-cooperated-at-least-three-times.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1051,
    "Title": "[Height Checker](https://leetcode.com/problems/height-checker/)",
    "Solution": [
      [
        "C++",
        "C++/height-checker.cpp"
      ],
      [
        "Python",
        "Python/height-checker.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1052,
    "Title": "[Grumpy Bookstore Owner](https://leetcode.com/problems/grumpy-bookstore-owner/)",
    "Solution": [
      [
        "C++",
        "C++/grumpy-bookstore-owner.cpp"
      ],
      [
        "Python",
        "Python/grumpy-bookstore-owner.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1053,
    "Title": "[Previous Permutation With One Swap](https://leetcode.com/problems/previous-permutation-with-one-swap/)",
    "Solution": [
      [
        "C++",
        "C++/previous-permutation-with-one-swap.cpp"
      ],
      [
        "Python",
        "Python/previous-permutation-with-one-swap.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1054,
    "Title": "[Distant Barcodes](https://leetcode.com/problems/distant-barcodes/)",
    "Solution": [
      [
        "C++",
        "C++/distant-barcodes.cpp"
      ],
      [
        "Python",
        "Python/distant-barcodes.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Rearrange String k Distance Apart](https://leetcode.com/problems/rearrange-string-k-distance-apart/)",
    "Note": 0
  },
  {
    "Index": 1055,
    "Title": "[Shortest Way to Form String](https://leetcode.com/problems/shortest-way-to-form-string/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-way-to-form-string.cpp"
      ],
      [
        "Python",
        "Python/shortest-way-to-form-string.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(m)_",
    "Difficulty": "Medium",
    "Tag": "🔒, variant of [Minimum Window Subsequence](https://leetcode.com/problems/minimum-window-subsequence/)"
  },
  {
    "Index": 1056,
    "Title": "[Confusing Number](https://leetcode.com/problems/confusing-number/)",
    "Solution": [
      [
        "C++",
        "C++/confusing-number.cpp"
      ],
      [
        "Python",
        "Python/confusing-number.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(logn)_",
    "Difficulty": "Easy",
    "Tag": "🔒"
  },
  {
    "Index": 1057,
    "Title": "[Campus Bikes](https://leetcode.com/problems/campus-bikes/)",
    "Solution": [
      [
        "C++",
        "C++/campus-bikes.cpp"
      ],
      [
        "Python",
        "Python/campus-bikes.py"
      ]
    ],
    "Time": "_O((w * b) * log(w * b))_",
    "Space": "_O(w * b)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1058,
    "Title": "[Minimize Rounding Error to Meet Target](https://leetcode.com/problems/minimize-rounding-error-to-meet-target/)",
    "Solution": [
      [
        "C++",
        "C++/minimize-rounding-error-to-meet-target.cpp"
      ],
      [
        "Python",
        "Python/minimize-rounding-error-to-meet-target.py"
      ]
    ],
    "Time": "_O(n)_ on average",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 1059,
    "Title": "[All Paths from Source Lead to Destination](https://leetcode.com/problems/all-paths-from-source-lead-to-destination/)",
    "Solution": [
      [
        "C++",
        "C++/all-paths-from-source-lead-to-destination.cpp"
      ],
      [
        "Python",
        "Python/all-paths-from-source-lead-to-destination.py"
      ]
    ],
    "Time": "_O(n + e)_",
    "Space": "_O(n + e)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1060,
    "Title": "[Missing Element in Sorted Array](https://leetcode.com/problems/missing-element-in-sorted-array/)",
    "Solution": [
      [
        "C++",
        "C++/missing-element-in-sorted-array.cpp"
      ],
      [
        "Python",
        "Python/missing-element-in-sorted-array.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1061,
    "Title": "[Lexicographically Smallest Equivalent String](https://leetcode.com/problems/lexicographically-smallest-equivalent-string/)",
    "Solution": [
      [
        "C++",
        "C++/lexicographically-smallest-equivalent-string.cpp"
      ],
      [
        "Python",
        "Python/lexicographically-smallest-equivalent-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 1062,
    "Title": "[Longest Repeating Substring](https://leetcode.com/problems/longest-repeating-substring/)",
    "Solution": [
      [
        "C++",
        "C++/longest-repeating-substring.cpp"
      ],
      [
        "Python",
        "Python/longest-repeating-substring.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 1063,
    "Title": "[Number of Valid Subarrays](https://leetcode.com/problems/number-of-valid-subarrays/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-valid-subarrays.cpp"
      ],
      [
        "Python",
        "Python/number-of-valid-subarrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 1064,
    "Title": "[Fixed Point](https://leetcode.com/problems/fixed-point/)",
    "Solution": [
      [
        "C++",
        "C++/fixed-point.cpp"
      ],
      [
        "Python",
        "Python/fixed-point.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1065,
    "Title": "[Index Pairs of a String](https://leetcode.com/problems/index-pairs-of-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/index-pairs-of-a-string.cpp"
      ],
      [
        "Python",
        "Python/index-pairs-of-a-string.py"
      ]
    ],
    "Time": "_O(n + m + z)_",
    "Space": "_O(t)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": "`Aho-Corasick Automata`, Trie"
  },
  {
    "Index": 1066,
    "Title": "[Campus Bikes II](https://leetcode.com/problems/campus-bikes-ii/)",
    "Solution": [
      [
        "C++",
        "C++/campus-bikes-ii.cpp"
      ],
      [
        "Python",
        "Python/campus-bikes-ii.py"
      ]
    ],
    "Time": "_O(w * b * 2^b)_",
    "Space": "_O(w * b * 2^b)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1067,
    "Title": "[Digit Count in Range](https://leetcode.com/problems/digit-count-in-range/)",
    "Solution": [
      [
        "C++",
        "C++/digit-count-in-range.cpp"
      ],
      [
        "Python",
        "Python/digit-count-in-range.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": "🔒, variant of [Number of Digit One](https://leetcode.com/problems/number-of-digit-one/)"
  },
  {
    "Index": 1068,
    "Title": "[Product Sales Analysis I](https://leetcode.com/problems/product-sales-analysis-i/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/product-sales-analysis-i.sql"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1069,
    "Title": "[Product Sales Analysis II](https://leetcode.com/problems/product-sales-analysis-ii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/product-sales-analysis-ii.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1070,
    "Title": "[Product Sales Analysis III](https://leetcode.com/problems/product-sales-analysis-iii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/product-sales-analysis-iii.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1071,
    "Title": "[Greatest Common Divisor of Strings](https://leetcode.com/problems/greatest-common-divisor-of-strings/)",
    "Solution": [
      [
        "C++",
        "C++/greatest-common-divisor-of-strings.cpp"
      ],
      [
        "Python",
        "Python/greatest-common-divisor-of-strings.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1072,
    "Title": "[Flip Columns For Maximum Number of Equal Rows](https://leetcode.com/problems/flip-columns-for-maximum-number-of-equal-rows/)",
    "Solution": [
      [
        "C++",
        "C++/flip-columns-for-maximum-number-of-equal-rows.cpp"
      ],
      [
        "Python",
        "Python/flip-columns-for-maximum-number-of-equal-rows.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1073,
    "Title": "[Adding Two Negabinary Numbers](https://leetcode.com/problems/adding-two-negabinary-numbers/)",
    "Solution": [
      [
        "C++",
        "C++/adding-two-negabinary-numbers.cpp"
      ],
      [
        "Python",
        "Python/adding-two-negabinary-numbers.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1074,
    "Title": "[Number of Submatrices That Sum to Target](https://leetcode.com/problems/number-of-submatrices-that-sum-to-target/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-submatrices-that-sum-to-target.cpp"
      ],
      [
        "Python",
        "Python/number-of-submatrices-that-sum-to-target.py"
      ]
    ],
    "Time": "_O(m^2 * n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1075,
    "Title": "[Project Employees I](https://leetcode.com/problems/project-employees-i/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/project-employees-i.sql"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1076,
    "Title": "[Project Employees II](https://leetcode.com/problems/project-employees-ii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/project-employees-ii.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1077,
    "Title": "[Project Employees III](https://leetcode.com/problems/project-employees-iii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/project-employees-iii.sql"
      ]
    ],
    "Time": "_O((m + n)^2)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1078,
    "Title": "[Occurrences After Bigram](https://leetcode.com/problems/occurrences-after-bigram/)",
    "Solution": [
      [
        "C++",
        "C++/occurrences-after-bigram.cpp"
      ],
      [
        "Python",
        "Python/occurrences-after-bigram.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1079,
    "Title": "[Letter Tile Possibilities](https://leetcode.com/problems/letter-tile-possibilities/)",
    "Solution": [
      [
        "C++",
        "C++/letter-tile-possibilities.cpp"
      ],
      [
        "Python",
        "Python/letter-tile-possibilities.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1080,
    "Title": "[Insufficient Nodes in Root to Leaf Paths](https://leetcode.com/problems/insufficient-nodes-in-root-to-leaf-paths/)",
    "Solution": [
      [
        "C++",
        "C++/insufficient-nodes-in-root-to-leaf-paths.cpp"
      ],
      [
        "Python",
        "Python/insufficient-nodes-in-root-to-leaf-paths.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 1081,
    "Title": "[Smallest Subsequence of Distinct Characters](https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-subsequence-of-distinct-characters.cpp"
      ],
      [
        "Python",
        "Python/smallest-subsequence-of-distinct-characters.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "same as [Remove Duplicate Letters](https://leetcode.com/problems/remove-duplicate-letters/)",
    "Note": "Mono Stack"
  },
  {
    "Index": 1082,
    "Title": "[Sales Analysis I](https://leetcode.com/problems/sales-analysis-i/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/sales-analysis-i.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1083,
    "Title": "[Sales Analysis II](https://leetcode.com/problems/sales-analysis-ii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/sales-analysis-ii.sql"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1084,
    "Title": "[Sales Analysis III](https://leetcode.com/problems/sales-analysis-iii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/sales-analysis-iii.sql"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1085,
    "Title": "[Sum of Digits in the Minimum Number](https://leetcode.com/problems/sum-of-digits-in-the-minimum-number/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-digits-in-the-minimum-number.cpp"
      ],
      [
        "Python",
        "Python/sum-of-digits-in-the-minimum-number.py"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(l)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1086,
    "Title": "[High Five](https://leetcode.com/problems/high-five/)",
    "Solution": [
      [
        "C++",
        "C++/high-five.cpp"
      ],
      [
        "Python",
        "Python/high-five.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1087,
    "Title": "[Brace Expansion](https://leetcode.com/problems/brace-expansion/)",
    "Solution": [
      [
        "C++",
        "C++/brace-expansion.cpp"
      ],
      [
        "Python",
        "Python/brace-expansion.py"
      ]
    ],
    "Time": "_O(p * l * log(p * l))_",
    "Space": "_O(p * l)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1088,
    "Title": "[Confusing Number II](https://leetcode.com/problems/confusing-number-ii/)",
    "Solution": [
      [
        "C++",
        "C++/confusing-number-ii.cpp"
      ],
      [
        "Python",
        "Python/confusing-number-ii.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(logn)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 1089,
    "Title": "[Duplicate Zeros](https://leetcode.com/problems/duplicate-zeros/)",
    "Solution": [
      [
        "C++",
        "C++/duplicate-zeros.cpp"
      ],
      [
        "Python",
        "Python/duplicate-zeros.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1090,
    "Title": "[Largest Values From Labels](https://leetcode.com/problems/largest-values-from-labels/)",
    "Solution": [
      [
        "C++",
        "C++/largest-values-from-labels.cpp"
      ],
      [
        "Python",
        "Python/largest-values-from-labels.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1091,
    "Title": "[Shortest Path in Binary Matrix](https://leetcode.com/problems/shortest-path-in-binary-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-path-in-binary-matrix.cpp"
      ],
      [
        "Python",
        "Python/shortest-path-in-binary-matrix.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1092,
    "Title": "[Shortest Common Supersequence](https://leetcode.com/problems/shortest-common-supersequence/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-common-supersequence.cpp"
      ],
      [
        "Python",
        "Python/shortest-common-supersequence.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1093,
    "Title": "[Statistics from a Large Sample](https://leetcode.com/problems/statistics-from-a-large-sample/)",
    "Solution": [
      [
        "C++",
        "C++/statistics-from-a-large-sample.cpp"
      ],
      [
        "Python",
        "Python/statistics-from-a-large-sample.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1094,
    "Title": "[Car Pooling](https://leetcode.com/problems/car-pooling/)",
    "Solution": [
      [
        "C++",
        "C++/car-pooling.cpp"
      ],
      [
        "Python",
        "Python/car-pooling.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Meeting Rooms II](https://leetcode.com/problems/meeting-rooms-ii/)",
    "Note": 0
  },
  {
    "Index": 1095,
    "Title": "[Find in Mountain Array](https://leetcode.com/problems/find-in-mountain-array/)",
    "Solution": [
      [
        "C++",
        "C++/find-in-mountain-array.cpp"
      ],
      [
        "Python",
        "Python/find-in-mountain-array.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1096,
    "Title": "[Brace Expansion II](https://leetcode.com/problems/brace-expansion-ii/)",
    "Solution": [
      [
        "C++",
        "C++/brace-expansion-ii.cpp"
      ],
      [
        "Python",
        "Python/brace-expansion-ii.py"
      ]
    ],
    "Time": "_O(p * l * log(p * l))_",
    "Space": "_O(p * l)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1097,
    "Title": "[Game Play Analysis V](https://leetcode.com/problems/game-play-analysis-v/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/game-play-analysis-v.sql"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1098,
    "Title": "[Unpopular Books](https://leetcode.com/problems/unpopular-books/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/unpopular-books.sql"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1099,
    "Title": "[Two Sum Less Than K](https://leetcode.com/problems/two-sum-less-than-k/)",
    "Solution": [
      [
        "C++",
        "C++/two-sum-less-than-k.cpp"
      ],
      [
        "Python",
        "Python/two-sum-less-than-k.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒"
  },
  {
    "Index": 1100,
    "Title": "[Find K-Length Substrings With No Repeated Characters](https://leetcode.com/problems/find-k-length-substrings-with-no-repeated-characters/)",
    "Solution": [
      [
        "C++",
        "C++/find-k-length-substrings-with-no-repeated-characters.cpp"
      ],
      [
        "Python",
        "Python/find-k-length-substrings-with-no-repeated-characters.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 1101,
    "Title": "[The Earliest Moment When Everyone Become Friends](https://leetcode.com/problems/the-earliest-moment-when-everyone-become-friends/)",
    "Solution": [
      [
        "C++",
        "C++/the-earliest-moment-when-everyone-become-friends.cpp"
      ],
      [
        "Python",
        "Python/the-earliest-moment-when-everyone-become-friends.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Union Find"
  },
  {
    "Index": 1102,
    "Title": "[Path With Maximum Minimum Value](https://leetcode.com/problems/path-with-maximum-minimum-value/)",
    "Solution": [
      [
        "C++",
        "C++/path-with-maximum-minimum-value.cpp"
      ],
      [
        "Python",
        "Python/path-with-maximum-minimum-value.py"
      ]
    ],
    "Time": "_O((m * n) * log(m * n))_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Binary Search, DFS, `Dijkstra's Algorithm`"
  },
  {
    "Index": 1103,
    "Title": "[Distribute Candies to People](https://leetcode.com/problems/distribute-candies-to-people/)",
    "Solution": [
      [
        "C++",
        "C++/distribute-candies-to-people.cpp"
      ],
      [
        "Python",
        "Python/distribute-candies-to-people.py"
      ]
    ],
    "Time": "_O(n + logc)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1104,
    "Title": "[Path In Zigzag Labelled Binary Tree](https://leetcode.com/problems/path-in-zigzag-labelled-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/path-in-zigzag-labelled-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/path-in-zigzag-labelled-binary-tree.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(logn)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Math"
  },
  {
    "Index": 1105,
    "Title": "[Filling Bookcase Shelves](https://leetcode.com/problems/filling-bookcase-shelves/)",
    "Solution": [
      [
        "C++",
        "C++/filling-bookcase-shelves.cpp"
      ],
      [
        "Python",
        "Python/filling-bookcase-shelves.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1106,
    "Title": "[Parsing A Boolean Expression](https://leetcode.com/problems/parsing-a-boolean-expression/)",
    "Solution": [
      [
        "C++",
        "C++/parsing-a-boolean-expression.cpp"
      ],
      [
        "Python",
        "Python/parsing-a-boolean-expression.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1107,
    "Title": "[New Users Daily Count](https://leetcode.com/problems/new-users-daily-count/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/new-users-daily-count.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1108,
    "Title": "[Defanging an IP Address](https://leetcode.com/problems/defanging-an-ip-address/)",
    "Solution": [
      [
        "C++",
        "C++/defanging-an-ip-address.cpp"
      ],
      [
        "Python",
        "Python/defanging-an-ip-address.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1109,
    "Title": "[Corporate Flight Bookings](https://leetcode.com/problems/corporate-flight-bookings/)",
    "Solution": [
      [
        "C++",
        "C++/corporate-flight-bookings.cpp"
      ],
      [
        "Python",
        "Python/corporate-flight-bookings.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1110,
    "Title": "[Delete Nodes And Return Forest](https://leetcode.com/problems/delete-nodes-and-return-forest/)",
    "Solution": [
      [
        "C++",
        "C++/delete-nodes-and-return-forest.cpp"
      ],
      [
        "Python",
        "Python/delete-nodes-and-return-forest.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h + d)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1111,
    "Title": "[Maximum Nesting Depth of Two Valid Parentheses Strings](https://leetcode.com/problems/maximum-nesting-depth-of-two-valid-parentheses-strings/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-nesting-depth-of-two-valid-parentheses-strings.cpp"
      ],
      [
        "Python",
        "Python/maximum-nesting-depth-of-two-valid-parentheses-strings.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1112,
    "Title": "[Highest Grade For Each Student](https://leetcode.com/problems/highest-grade-for-each-student/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/highest-grade-for-each-student.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1113,
    "Title": "[Reported Posts](https://leetcode.com/problems/reported-posts/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/reported-posts.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1114,
    "Title": "[Print in Order](https://leetcode.com/problems/print-in-order/)",
    "Solution": [
      [
        "C++",
        "C++/print-in-order.cpp"
      ],
      [
        "Python",
        "Python/print-in-order.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1115,
    "Title": "[Print FooBar Alternately](https://leetcode.com/problems/print-foobar-alternately/)",
    "Solution": [
      [
        "C++",
        "C++/print-foobar-alternately.cpp"
      ],
      [
        "Python",
        "Python/print-foobar-alternately.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1116,
    "Title": "[Print Zero Even Odd](https://leetcode.com/problems/print-zero-even-odd/)",
    "Solution": [
      [
        "C++",
        "C++/print-zero-even-odd.cpp"
      ],
      [
        "Python",
        "Python/print-zero-even-odd.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1117,
    "Title": "[Building H2O](https://leetcode.com/problems/building-h2o/)",
    "Solution": [
      [
        "C++",
        "C++/building-h2o.cpp"
      ],
      [
        "Python",
        "Python/building-h2o.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1118,
    "Title": "[Number of Days in a Month](https://leetcode.com/problems/number-of-days-in-a-month/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-days-in-a-month.cpp"
      ],
      [
        "Python",
        "Python/number-of-days-in-a-month.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒"
  },
  {
    "Index": 1119,
    "Title": "[Remove Vowels from a String](https://leetcode.com/problems/remove-vowels-from-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/remove-vowels-from-a-string.cpp"
      ],
      [
        "Python",
        "Python/remove-vowels-from-a-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒"
  },
  {
    "Index": 1120,
    "Title": "[Maximum Average Subtree](https://leetcode.com/problems/maximum-average-subtree/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-average-subtree.cpp"
      ],
      [
        "Python",
        "Python/maximum-average-subtree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": "DFS"
  },
  {
    "Index": 1121,
    "Title": "[Divide Array Into Increasing Sequences](https://leetcode.com/problems/divide-array-into-increasing-sequences/)",
    "Solution": [
      [
        "C++",
        "C++/divide-array-into-increasing-sequences.cpp"
      ],
      [
        "Python",
        "Python/divide-array-into-increasing-sequences.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 1122,
    "Title": "[Relative Sort Array](https://leetcode.com/problems/relative-sort-array/)",
    "Solution": [
      [
        "C++",
        "C++/relative-sort-array.cpp"
      ],
      [
        "Python",
        "Python/relative-sort-array.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1123,
    "Title": "[Lowest Common Ancestor of Deepest Leaves](https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/)",
    "Solution": [
      [
        "C++",
        "C++/lowest-common-ancestor-of-deepest-leaves.cpp"
      ],
      [
        "Python",
        "Python/lowest-common-ancestor-of-deepest-leaves.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 1124,
    "Title": "[Longest Well-Performing Interval](https://leetcode.com/problems/longest-well-performing-interval/)",
    "Solution": [
      [
        "C++",
        "C++/longest-well-performing-interval.cpp"
      ],
      [
        "Python",
        "Python/longest-well-performing-interval.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1125,
    "Title": "[Smallest Sufficient Team](https://leetcode.com/problems/smallest-sufficient-team/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-sufficient-team.cpp"
      ],
      [
        "Python",
        "Python/smallest-sufficient-team.py"
      ]
    ],
    "Time": "_O(m * 2^n)_",
    "Space": "_O(2^n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1126,
    "Title": "[Active Businesses](https://leetcode.com/problems/active-businesses/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/active-businesses.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1127,
    "Title": "[User Purchase Platform](https://leetcode.com/problems//user-purchase-platform/)",
    "Solution": [
      [
        "MySQL",
        "MySQL//user-purchase-platform.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1128,
    "Title": "[Number of Equivalent Domino Pairs](https://leetcode.com/problems/number-of-equivalent-domino-pairs/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-equivalent-domino-pairs.cpp"
      ],
      [
        "Python",
        "Python/number-of-equivalent-domino-pairs.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1129,
    "Title": "[Shortest Path with Alternating Colors](https://leetcode.com/problems/shortest-path-with-alternating-colors/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-path-with-alternating-colors.cpp"
      ],
      [
        "Python",
        "Python/shortest-path-with-alternating-colors.py"
      ]
    ],
    "Time": "_O(n + e)_",
    "Space": "_O(n + e)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1130,
    "Title": "[Minimum Cost Tree From Leaf Values](https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-tree-from-leaf-values.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-tree-from-leaf-values.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1131,
    "Title": "[Maximum of Absolute Value Expression](https://leetcode.com/problems/maximum-of-absolute-value-expression/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-of-absolute-value-expression.cpp"
      ],
      [
        "Python",
        "Python/maximum-of-absolute-value-expression.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1132,
    "Title": "[Reported Posts II](https://leetcode.com/problems/reported-posts-ii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/reported-posts-ii.sql"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1133,
    "Title": "[Largest Unique Number](https://leetcode.com/problems/largest-unique-number/)",
    "Solution": [
      [
        "C++",
        "C++/largest-unique-number.cpp"
      ],
      [
        "Python",
        "Python/largest-unique-number.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": "Hash"
  },
  {
    "Index": 1134,
    "Title": "[Armstrong Number](https://leetcode.com/problems/armstrong-number/)",
    "Solution": [
      [
        "C++",
        "C++/armstrong-number.cpp"
      ],
      [
        "Python",
        "Python/armstrong-number.py"
      ]
    ],
    "Time": "_O(klogk)_",
    "Space": "_O(k)_",
    "Difficulty": "Easy",
    "Tag": "🔒"
  },
  {
    "Index": 1135,
    "Title": "[Connecting Cities With Minimum Cost](https://leetcode.com/problems/connecting-cities-with-minimum-cost/)",
    "Solution": [
      [
        "C++",
        "C++/connecting-cities-with-minimum-cost.cpp"
      ],
      [
        "Python",
        "Python/connecting-cities-with-minimum-cost.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Union Find, `Kruskal's Algorithm`, MST"
  },
  {
    "Index": 1136,
    "Title": "[Parallel Courses](https://leetcode.com/problems/parallel-courses/)",
    "Solution": [
      [
        "C++",
        "C++/parallel-courses.cpp"
      ],
      [
        "Python",
        "Python/parallel-courses.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "V\\",
    "Difficulty": "+ \\",
    "Tag": "E\\",
    "Note": ")_"
  },
  {
    "Index": 1137,
    "Title": "[N-th Tribonacci Number](https://leetcode.com/problems/n-th-tribonacci-number/)",
    "Solution": [
      [
        "C++",
        "C++/n-th-tribonacci-number.cpp"
      ],
      [
        "Python",
        "Python/n-th-tribonacci-number.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "variant of [Fibonacci Number](https://leetcode.com/problems/fibonacci-number/)"
  },
  {
    "Index": 1138,
    "Title": "[Alphabet Board Path](https://leetcode.com/problems/alphabet-board-path/)",
    "Solution": [
      [
        "C++",
        "C++/alphabet-board-path.cpp"
      ],
      [
        "Python",
        "Python/alphabet-board-path.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1139,
    "Title": "[Largest 1-Bordered Square](https://leetcode.com/problems/largest-1-bordered-square/)",
    "Solution": [
      [
        "C++",
        "C++/largest-1-bordered-square.cpp"
      ],
      [
        "Python",
        "Python/largest-1-bordered-square.py"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1140,
    "Title": "[Stone Game II](https://leetcode.com/problems/stone-game-ii/)",
    "Solution": [
      [
        "C++",
        "C++/stone-game-ii.cpp"
      ],
      [
        "Python",
        "Python/stone-game-ii.py"
      ]
    ],
    "Time": "_O(n*(logn)^2)_",
    "Space": "_O(nlogn)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1141,
    "Title": "[User Activity for the Past 30 Days I](https://leetcode.com/problems/user-activity-for-the-past-30-days-i/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/user-activity-for-the-past-30-days-i.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1142,
    "Title": "[User Activity for the Past 30 Days II](https://leetcode.com/problems/user-activity-for-the-past-30-days-ii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/user-activity-for-the-past-30-days-ii.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1143,
    "Title": "[Longest Common Subsequence](https://leetcode.com/problems/longest-common-subsequence/)",
    "Solution": [
      [
        "C++",
        "C++/longest-common-subsequence.cpp"
      ],
      [
        "Python",
        "Python/longest-common-subsequence.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(min(m, n))_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1144,
    "Title": "[Decrease Elements To Make Array Zigzag](https://leetcode.com/problems/decrease-elements-to-make-array-zigzag/)",
    "Solution": [
      [
        "C++",
        "C++/decrease-elements-to-make-array-zigzag.cpp"
      ],
      [
        "Python",
        "Python/decrease-elements-to-make-array-zigzag.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1145,
    "Title": "[Binary Tree Coloring Game](https://leetcode.com/problems/binary-tree-coloring-game/)",
    "Solution": [
      [
        "C++",
        "C++/binary-tree-coloring-game.cpp"
      ],
      [
        "Python",
        "Python/binary-tree-coloring-game.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 1146,
    "Title": "[Snapshot Array](https://leetcode.com/problems/snapshot-array/)",
    "Solution": [
      [
        "C++",
        "C++/snapshot-array.cpp"
      ],
      [
        "Python",
        "Python/snapshot-array.py"
      ]
    ],
    "Time": "set: _O(1)_<br> get: _O(logn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1147,
    "Title": "[Longest Chunked Palindrome Decomposition](https://leetcode.com/problems/longest-chunked-palindrome-decomposition/)",
    "Solution": [
      [
        "C++",
        "C++/longest-chunked-palindrome-decomposition.cpp"
      ],
      [
        "Python",
        "Python/longest-chunked-palindrome-decomposition.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1148,
    "Title": "[Article Views I](https://leetcode.com/problems/article-views-i/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/article-views-i.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1149,
    "Title": "[Article Views II](https://leetcode.com/problems/article-views-ii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/article-views-ii.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1150,
    "Title": "[Check If a Number Is Majority Element in a Sorted Array](https://leetcode.com/problems/check-if-a-number-is-majority-element-in-a-sorted-array/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-a-number-is-majority-element-in-a-sorted-array.cpp"
      ],
      [
        "Python",
        "Python/check-if-a-number-is-majority-element-in-a-sorted-array.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒"
  },
  {
    "Index": 1151,
    "Title": "[Minimum Swaps to Group All 1's Together](https://leetcode.com/problems/minimum-swaps-to-group-all-1s-together/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-swaps-to-group-all-1s-together.cpp"
      ],
      [
        "Python",
        "Python/minimum-swaps-to-group-all-1s-together.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 1152,
    "Title": "[Analyze User Website Visit Pattern](https://leetcode.com/problems/analyze-user-website-visit-pattern/)",
    "Solution": [
      [
        "C++",
        "C++/analyze-user-website-visit-pattern.cpp"
      ],
      [
        "Python",
        "Python/analyze-user-website-visit-pattern.py"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(n^3)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Hash"
  },
  {
    "Index": 1153,
    "Title": "[String Transforms Into Another String](https://leetcode.com/problems/string-transforms-into-another-string/)",
    "Solution": [
      [
        "C++",
        "C++/string-transforms-into-another-string.cpp"
      ],
      [
        "Python",
        "Python/string-transforms-into-another-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Hash"
  },
  {
    "Index": 1154,
    "Title": "[Day of the Year](https://leetcode.com/problems/day-of-the-year/)",
    "Solution": [
      [
        "C++",
        "C++/day-of-the-year.cpp"
      ],
      [
        "Python",
        "Python/day-of-the-year.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1155,
    "Title": "[Number of Dice Rolls With Target Sum](https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-dice-rolls-with-target-sum.cpp"
      ],
      [
        "Python",
        "Python/number-of-dice-rolls-with-target-sum.py"
      ]
    ],
    "Time": "_O(d * f * t)_",
    "Space": "_O(t)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1156,
    "Title": "[Swap For Longest Repeated Character Substring](https://leetcode.com/problems/swap-for-longest-repeated-character-substring/)",
    "Solution": [
      [
        "C++",
        "C++/swap-for-longest-repeated-character-substring.cpp"
      ],
      [
        "Python",
        "Python/swap-for-longest-repeated-character-substring.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1157,
    "Title": "[Online Majority Element In Subarray](https://leetcode.com/problems/online-majority-element-in-subarray/)",
    "Solution": [
      [
        "C++",
        "C++/online-majority-element-in-subarray.cpp"
      ],
      [
        "Python",
        "Python/online-majority-element-in-subarray.py"
      ]
    ],
    "Time": "ctor: _O(n)_<br>query: _O(klogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1158,
    "Title": "[Market Analysis I](https://leetcode.com/problems/market-analysis-i/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/market-analysis-i.sql"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1159,
    "Title": "[Market Analysis II](https://leetcode.com/problems/market-analysis-ii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/market-analysis-ii.sql"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1160,
    "Title": "[Find Words That Can Be Formed by Characters](https://leetcode.com/problems/find-words-that-can-be-formed-by-characters/)",
    "Solution": [
      [
        "C++",
        "C++/find-words-that-can-be-formed-by-characters.cpp"
      ],
      [
        "Python",
        "Python/find-words-that-can-be-formed-by-characters.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1161,
    "Title": "[Maximum Level Sum of a Binary Tree](https://leetcode.com/problems/maximum-level-sum-of-a-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-level-sum-of-a-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/maximum-level-sum-of-a-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(w)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 1162,
    "Title": "[As Far from Land as Possible](https://leetcode.com/problems/as-far-from-land-as-possible/)",
    "Solution": [
      [
        "C++",
        "C++/as-far-from-land-as-possible.cpp"
      ],
      [
        "Python",
        "Python/as-far-from-land-as-possible.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1163,
    "Title": "[Last Substring in Lexicographical Order](https://leetcode.com/problems/last-substring-in-lexicographical-order/)",
    "Solution": [
      [
        "C++",
        "C++/last-substring-in-lexicographical-order.cpp"
      ],
      [
        "Python",
        "Python/last-substring-in-lexicographical-order.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1164,
    "Title": "[Product Price at a Given Date](https://leetcode.com/problems/product-price-at-a-given-date/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/product-price-at-a-given-date.sql"
      ]
    ],
    "Time": "_O(mlogn)_",
    "Space": "_O(m)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1165,
    "Title": "[Single-Row Keyboard](https://leetcode.com/problems/single-row-keyboard/)",
    "Solution": [
      [
        "C++",
        "C++/single-row-keyboard.cpp"
      ],
      [
        "Python",
        "Python/single-row-keyboard.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1166,
    "Title": "[Design File System](https://leetcode.com/problems/design-file-system/)",
    "Solution": [
      [
        "C++",
        "C++/design-file-system.cpp"
      ],
      [
        "Python",
        "Python/design-file-system.py"
      ]
    ],
    "Time": "create: _O(n)_<br>get: _O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1167,
    "Title": "[Minimum Cost to Connect Sticks](https://leetcode.com/problems/minimum-cost-to-connect-sticks/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-to-connect-sticks.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-to-connect-sticks.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1168,
    "Title": "[Optimize Water Distribution in a Village](https://leetcode.com/problems/optimize-water-distribution-in-a-village/)",
    "Solution": [
      [
        "C++",
        "C++/optimize-water-distribution-in-a-village.cpp"
      ],
      [
        "Python",
        "Python/optimize-water-distribution-in-a-village.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Union Find"
  },
  {
    "Index": 1169,
    "Title": "[Invalid Transactions](https://leetcode.com/problems/invalid-transactions/)",
    "Solution": [
      [
        "C++",
        "C++/invalid-transactions.cpp"
      ],
      [
        "Python",
        "Python/invalid-transactions.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1170,
    "Title": "[Compare Strings by Frequency of the Smallest Character](https://leetcode.com/problems/compare-strings-by-frequency-of-the-smallest-character/)",
    "Solution": [
      [
        "C++",
        "C++/compare-strings-by-frequency-of-the-smallest-character.cpp"
      ],
      [
        "Python",
        "Python/compare-strings-by-frequency-of-the-smallest-character.py"
      ]
    ],
    "Time": "_O((m + n)logn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1171,
    "Title": "[Remove Zero Sum Consecutive Nodes from Linked List](https://leetcode.com/problems/remove-zero-sum-consecutive-nodes-from-linked-list/)",
    "Solution": [
      [
        "C++",
        "C++/remove-zero-sum-consecutive-nodes-from-linked-list.cpp"
      ],
      [
        "Python",
        "Python/remove-zero-sum-consecutive-nodes-from-linked-list.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1172,
    "Title": "[Dinner Plate Stacks](https://leetcode.com/problems/dinner-plate-stacks/)",
    "Solution": [
      [
        "C++",
        "C++/dinner-plate-stacks.cpp"
      ],
      [
        "Python",
        "Python/dinner-plate-stacks.py"
      ]
    ],
    "Time": "push: _O(logn)_<br>pop: _O(1)_, amortized<br>popAtStack: _(logn)_",
    "Space": "_O(n * c)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1173,
    "Title": "[Immediate Food Delivery I](https://leetcode.com/problems/immediate-food-delivery-i/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/immediate-food-delivery-i.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1174,
    "Title": "[Immediate Food Delivery II](https://leetcode.com/problems/immediate-food-delivery-ii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/immediate-food-delivery-ii.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(m)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1175,
    "Title": "[Prime Arrangements](https://leetcode.com/problems/prime-arrangements/)",
    "Solution": [
      [
        "C++",
        "C++/prime-arrangements.cpp"
      ],
      [
        "Python",
        "Python/prime-arrangements.py"
      ]
    ],
    "Time": "_O(nlog(logn))_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1176,
    "Title": "[Diet Plan Performance](https://leetcode.com/problems/diet-plan-performance/)",
    "Solution": [
      [
        "C++",
        "C++/diet-plan-performance.cpp"
      ],
      [
        "Python",
        "Python/diet-plan-performance.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1177,
    "Title": "[Can Make Palindrome from Substring](https://leetcode.com/problems/can-make-palindrome-from-substring/)",
    "Solution": [
      [
        "C++",
        "C++/can-make-palindrome-from-substring.cpp"
      ],
      [
        "Python",
        "Python/can-make-palindrome-from-substring.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1178,
    "Title": "[Number of Valid Words for Each Puzzle](https://leetcode.com/problems/number-of-valid-words-for-each-puzzle/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-valid-words-for-each-puzzle.cpp"
      ],
      [
        "Python",
        "Python/number-of-valid-words-for-each-puzzle.py"
      ]
    ],
    "Time": "_O(n * l + m * L)_",
    "Space": "_O(L!)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1179,
    "Title": "[Reformat Department Table](https://leetcode.com/problems/reformat-department-table/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/reformat-department-table.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1180,
    "Title": "[Count Substrings with Only One Distinct Letter](https://leetcode.com/problems/count-substrings-with-only-one-distinct-letter/)",
    "Solution": [
      [
        "C++",
        "C++/count-substrings-with-only-one-distinct-letter.cpp"
      ],
      [
        "Python",
        "Python/count-substrings-with-only-one-distinct-letter.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1181,
    "Title": "[Before and After Puzzle](https://leetcode.com/problems/before-and-after-puzzle/)",
    "Solution": [
      [
        "C++",
        "C++/before-and-after-puzzle.cpp"
      ],
      [
        "Python",
        "Python/before-and-after-puzzle.py"
      ]
    ],
    "Time": "_O(l * rlogr)_",
    "Space": "_O(l * (n + r))_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Hash"
  },
  {
    "Index": 1182,
    "Title": "[Shortest Distance to Target Color](https://leetcode.com/problems/shortest-distance-to-target-color/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-distance-to-target-color.cpp"
      ],
      [
        "Python",
        "Python/shortest-distance-to-target-color.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1183,
    "Title": "[Maximum Number of Ones](https://leetcode.com/problems/maximum-number-of-ones/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-ones.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-ones.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1184,
    "Title": "[Distance Between Bus Stops](https://leetcode.com/problems/distance-between-bus-stops/)",
    "Solution": [
      [
        "C++",
        "C++/distance-between-bus-stops.cpp"
      ],
      [
        "Python",
        "Python/distance-between-bus-stops.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1185,
    "Title": "[Day of the Week](https://leetcode.com/problems/day-of-the-week/)",
    "Solution": [
      [
        "C++",
        "C++/day-of-the-week.cpp"
      ],
      [
        "Python",
        "Python/day-of-the-week.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1186,
    "Title": "[Maximum Subarray Sum with One Deletion](https://leetcode.com/problems/maximum-subarray-sum-with-one-deletion/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-subarray-sum-with-one-deletion.cpp"
      ],
      [
        "Python",
        "Python/maximum-subarray-sum-with-one-deletion.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1187,
    "Title": "[Make Array Strictly Increasing](https://leetcode.com/problems/make-array-strictly-increasing/)",
    "Solution": [
      [
        "C++",
        "C++/make-array-strictly-increasing.cpp"
      ],
      [
        "Python",
        "Python/make-array-strictly-increasing.py"
      ]
    ],
    "Time": "_O(n^2 * logn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1188,
    "Title": "[Design Bounded Blocking Queue](https://leetcode.com/problems/design-bounded-blocking-queue/)",
    "Solution": [
      [
        "C++",
        "C++/design-bounded-blocking-queue.cpp"
      ],
      [
        "Python",
        "Python/design-bounded-blocking-queue.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1189,
    "Title": "[Maximum Number of Balloons](https://leetcode.com/problems/maximum-number-of-balloons/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-balloons.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-balloons.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1190,
    "Title": "[Reverse Substrings Between Each Pair of Parentheses](https://leetcode.com/problems/reverse-substrings-between-each-pair-of-parentheses/)",
    "Solution": [
      [
        "C++",
        "C++/reverse-substrings-between-each-pair-of-parentheses.cpp"
      ],
      [
        "Python",
        "Python/reverse-substrings-between-each-pair-of-parentheses.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1191,
    "Title": "[K-Concatenation Maximum Sum](https://leetcode.com/problems/k-concatenation-maximum-sum/)",
    "Solution": [
      [
        "C++",
        "C++/k-concatenation-maximum-sum.cpp"
      ],
      [
        "Python",
        "Python/k-concatenation-maximum-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1192,
    "Title": "[Critical Connections in a Network](https://leetcode.com/problems/critical-connections-in-a-network/)",
    "Solution": [
      [
        "C++",
        "C++/critical-connections-in-a-network.cpp"
      ],
      [
        "Python",
        "Python/critical-connections-in-a-network.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "V\\",
    "Difficulty": "+ \\",
    "Tag": "E\\",
    "Note": ")_"
  },
  {
    "Index": 1193,
    "Title": "[Monthly Transactions I](https://leetcode.com/problems/monthly-transactions-i/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/monthly-transactions-i.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1194,
    "Title": "[Tournament Winners](https://leetcode.com/problems/tournament-winners/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/tournament-winners.sql"
      ]
    ],
    "Time": "_O(m + n + nlogn)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1195,
    "Title": "[Fizz Buzz Multithreaded](https://leetcode.com/problems/fizz-buzz-multithreaded/)",
    "Solution": [
      [
        "C++",
        "C++/fizz-buzz-multithreaded.cpp"
      ],
      [
        "Python",
        "Python/fizz-buzz-multithreaded.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1196,
    "Title": "[How Many Apples Can You Put into the Basket](https://leetcode.com/problems/how-many-apples-can-you-put-into-the-basket/)",
    "Solution": [
      [
        "C++",
        "C++/how-many-apples-can-you-put-into-the-basket.cpp"
      ],
      [
        "Python",
        "Python/how-many-apples-can-you-put-into-the-basket.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒"
  },
  {
    "Index": 1197,
    "Title": "[Minimum Knight Moves](https://leetcode.com/problems/minimum-knight-moves/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-knight-moves.cpp"
      ],
      [
        "Python",
        "Python/minimum-knight-moves.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "DP, Math"
  },
  {
    "Index": 1198,
    "Title": "[Find Smallest Common Element in All Rows](https://leetcode.com/problems/find-smallest-common-element-in-all-rows/)",
    "Solution": [
      [
        "C++",
        "C++/find-smallest-common-element-in-all-rows.cpp"
      ],
      [
        "Python",
        "Python/find-smallest-common-element-in-all-rows.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1199,
    "Title": "[Minimum Time to Build Blocks](https://leetcode.com/problems/minimum-time-to-build-blocks/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-time-to-build-blocks.cpp"
      ],
      [
        "Python",
        "Python/minimum-time-to-build-blocks.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 1200,
    "Title": "[Minimum Absolute Difference](https://leetcode.com/problems/minimum-absolute-difference/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-absolute-difference.cpp"
      ],
      [
        "Python",
        "Python/minimum-absolute-difference.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1201,
    "Title": "[Ugly Number III](https://leetcode.com/problems/ugly-number-iii/)",
    "Solution": [
      [
        "C++",
        "C++/ugly-number-iii.cpp"
      ],
      [
        "Python",
        "Python/ugly-number-iii.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1202,
    "Title": "[Smallest String With Swaps](https://leetcode.com/problems/smallest-string-with-swaps/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-string-with-swaps.cpp"
      ],
      [
        "Python",
        "Python/smallest-string-with-swaps.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Union Find"
  },
  {
    "Index": 1203,
    "Title": "[Sort Items by Groups Respecting Dependencies](https://leetcode.com/problems/sort-items-by-groups-respecting-dependencies/)",
    "Solution": [
      [
        "C++",
        "C++/sort-items-by-groups-respecting-dependencies.cpp"
      ],
      [
        "Python",
        "Python/sort-items-by-groups-respecting-dependencies.py"
      ]
    ],
    "Time": "_O(n + e)_",
    "Space": "_O(n + e)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Topological Sort"
  },
  {
    "Index": 1204,
    "Title": "[Last Person to Fit in the Elevator](https://leetcode.com/problems/last-person-to-fit-in-the-elevator/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/last-person-to-fit-in-the-elevator.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1205,
    "Title": "[Monthly Transactions II](https://leetcode.com/problems/monthly-transactions-ii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/monthly-transactions-ii.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1206,
    "Title": "[Design Skiplist](https://leetcode.com/problems/design-skiplist/)",
    "Solution": [
      [
        "C++",
        "C++/design-skiplist.cpp"
      ],
      [
        "Python",
        "Python/design-skiplist.py"
      ]
    ],
    "Time": "_O(logn)_, on average",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1207,
    "Title": "[Unique Number of Occurrences](https://leetcode.com/problems/unique-number-of-occurrences/)",
    "Solution": [
      [
        "C++",
        "C++/unique-number-of-occurrences.cpp"
      ],
      [
        "Python",
        "Python/unique-number-of-occurrences.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1208,
    "Title": "[Get Equal Substrings Within Budget](https://leetcode.com/problems/get-equal-substrings-within-budget/)",
    "Solution": [
      [
        "C++",
        "C++/get-equal-substrings-within-budget.cpp"
      ],
      [
        "Python",
        "Python/get-equal-substrings-within-budget.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1209,
    "Title": "[Remove All Adjacent Duplicates in String II](https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string-ii/)",
    "Solution": [
      [
        "C++",
        "C++/remove-all-adjacent-duplicates-in-string-ii.cpp"
      ],
      [
        "Python",
        "Python/remove-all-adjacent-duplicates-in-string-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1210,
    "Title": "[Minimum Moves to Reach Target with Rotations](https://leetcode.com/problems/minimum-moves-to-reach-target-with-rotations/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-moves-to-reach-target-with-rotations.cpp"
      ],
      [
        "Python",
        "Python/minimum-moves-to-reach-target-with-rotations.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1211,
    "Title": "[Queries Quality and Percentage](https://leetcode.com/problems/queries-quality-and-percentage/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/queries-quality-and-percentage.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1212,
    "Title": "[Team Scores in Football Tournament](https://leetcode.com/problems/team-scores-in-football-tournament/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/team-scores-in-football-tournament.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1213,
    "Title": "[Intersection of Three Sorted Arrays](https://leetcode.com/problems/intersection-of-three-sorted-arrays/)",
    "Solution": [
      [
        "C++",
        "C++/intersection-of-three-sorted-arrays.cpp"
      ],
      [
        "Python",
        "Python/intersection-of-three-sorted-arrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒"
  },
  {
    "Index": 1214,
    "Title": "[Two Sum BSTs](https://leetcode.com/problems/two-sum-bsts/)",
    "Solution": [
      [
        "C++",
        "C++/two-sum-bsts.cpp"
      ],
      [
        "Python",
        "Python/two-sum-bsts.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Stack"
  },
  {
    "Index": 1215,
    "Title": "[Stepping Numbers](https://leetcode.com/problems/stepping-numbers/)",
    "Solution": [
      [
        "C++",
        "C++/stepping-numbers.cpp"
      ],
      [
        "Python",
        "Python/stepping-numbers.py"
      ]
    ],
    "Time": "_O(logk + r)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Precompute, Binary Search"
  },
  {
    "Index": 1216,
    "Title": "[Valid Palindrome III](https://leetcode.com/problems/valid-palindrome-iii/)",
    "Solution": [
      [
        "C++",
        "C++/valid-palindrome-iii.cpp"
      ],
      [
        "Python",
        "Python/valid-palindrome-iii.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒, variant of [Longest Palindromic Subsequence](https://leetcode.com/problems/longest-palindromic-subsequence/)",
    "Note": 0
  },
  {
    "Index": 1217,
    "Title": "[Play with Chips](https://leetcode.com/problems/play-with-chips/)",
    "Solution": [
      [
        "C++",
        "C++/play-with-chips.cpp"
      ],
      [
        "Python",
        "Python/play-with-chips.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1218,
    "Title": "[Longest Arithmetic Subsequence of Given Difference](https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/)",
    "Solution": [
      [
        "C++",
        "C++/longest-arithmetic-subsequence-of-given-difference.cpp"
      ],
      [
        "Python",
        "Python/longest-arithmetic-subsequence-of-given-difference.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1219,
    "Title": "[Path with Maximum Gold](https://leetcode.com/problems/path-with-maximum-gold/)",
    "Solution": [
      [
        "C++",
        "C++/path-with-maximum-gold.cpp"
      ],
      [
        "Python",
        "Python/path-with-maximum-gold.py"
      ]
    ],
    "Time": "_O(m^2 * n^2)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1220,
    "Title": "[Count Vowels Permutation](https://leetcode.com/problems/count-vowels-permutation/)",
    "Solution": [
      [
        "C++",
        "C++/count-vowels-permutation.cpp"
      ],
      [
        "Python",
        "Python/count-vowels-permutation.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Matrix Exponentiation"
  },
  {
    "Index": 1221,
    "Title": "[Split a String in Balanced Strings](https://leetcode.com/problems/split-a-string-in-balanced-strings/)",
    "Solution": [
      [
        "C++",
        "C++/split-a-string-in-balanced-strings.cpp"
      ],
      [
        "Python",
        "Python/split-a-string-in-balanced-strings.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1222,
    "Title": "[Queens That Can Attack the King](https://leetcode.com/problems/queens-that-can-attack-the-king/)",
    "Solution": [
      [
        "C++",
        "C++/queens-that-can-attack-the-king.cpp"
      ],
      [
        "Python",
        "Python/queens-that-can-attack-the-king.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1223,
    "Title": "[Dice Roll Simulation](https://leetcode.com/problems/dice-roll-simulation/)",
    "Solution": [
      [
        "C++",
        "C++/dice-roll-simulation.cpp"
      ],
      [
        "Python",
        "Python/dice-roll-simulation.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1224,
    "Title": "[Maximum Equal Frequency](https://leetcode.com/problems/maximum-equal-frequency/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-equal-frequency.cpp"
      ],
      [
        "Python",
        "Python/maximum-equal-frequency.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1225,
    "Title": "[Report Contiguous Dates](https://leetcode.com/problems/report-contiguous-dates/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/report-contiguous-dates.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1226,
    "Title": "[The Dining Philosophers](https://leetcode.com/problems/the-dining-philosophers/)",
    "Solution": [
      [
        "C++",
        "C++/the-dining-philosophers.cpp"
      ],
      [
        "Python",
        "Python/the-dining-philosophers.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1227,
    "Title": "[Airplane Seat Assignment Probability](https://leetcode.com/problems/airplane-seat-assignment-probability/)",
    "Solution": [
      [
        "C++",
        "C++/airplane-seat-assignment-probability.cpp"
      ],
      [
        "Python",
        "Python/airplane-seat-assignment-probability.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1228,
    "Title": "[Missing Number In Arithmetic Progression](https://leetcode.com/problems/missing-number-in-arithmetic-progression/)",
    "Solution": [
      [
        "C++",
        "C++/missing-number-in-arithmetic-progression.cpp"
      ],
      [
        "Python",
        "Python/missing-number-in-arithmetic-progression.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1229,
    "Title": "[Meeting Scheduler](https://leetcode.com/problems/meeting-scheduler/)",
    "Solution": [
      [
        "C++",
        "C++/meeting-scheduler.cpp"
      ],
      [
        "Python",
        "Python/meeting-scheduler.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1230,
    "Title": "[Toss Strange Coins](https://leetcode.com/problems/toss-strange-coins/)",
    "Solution": [
      [
        "C++",
        "C++/toss-strange-coins.cpp"
      ],
      [
        "Python",
        "Python/toss-strange-coins.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1231,
    "Title": "[Divide Chocolate](https://leetcode.com/problems/divide-chocolate/)",
    "Solution": [
      [
        "C++",
        "C++/divide-chocolate.cpp"
      ],
      [
        "Python",
        "Python/divide-chocolate.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1232,
    "Title": "[Check If It Is a Straight Line](https://leetcode.com/problems/check-if-it-is-a-straight-line/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-it-is-a-straight-line.cpp"
      ],
      [
        "Python",
        "Python/check-if-it-is-a-straight-line.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1233,
    "Title": "[Remove Sub-Folders from the Filesystem](https://leetcode.com/problems/remove-sub-folders-from-the-filesystem/)",
    "Solution": [
      [
        "C++",
        "C++/remove-sub-folders-from-the-filesystem.cpp"
      ],
      [
        "Python",
        "Python/remove-sub-folders-from-the-filesystem.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(t)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1234,
    "Title": "[Replace the Substring for Balanced String](https://leetcode.com/problems/replace-the-substring-for-balanced-string/)",
    "Solution": [
      [
        "C++",
        "C++/replace-the-substring-for-balanced-string.cpp"
      ],
      [
        "Python",
        "Python/replace-the-substring-for-balanced-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(t)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1235,
    "Title": "[Maximum Profit in Job Scheduling](https://leetcode.com/problems/maximum-profit-in-job-scheduling/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-profit-in-job-scheduling.cpp"
      ],
      [
        "Python",
        "Python/maximum-profit-in-job-scheduling.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "DP, Heap"
  },
  {
    "Index": 1236,
    "Title": "[Web Crawler](https://leetcode.com/problems/web-crawler/)",
    "Solution": [
      [
        "C++",
        "C++/web-crawler.cpp"
      ],
      [
        "Python",
        "Python/web-crawler.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "V\\",
    "Difficulty": "+ \\",
    "Tag": "E\\",
    "Note": ")_"
  },
  {
    "Index": 1237,
    "Title": "[Find Positive Integer Solution for a Given Equation](https://leetcode.com/problems/find-positive-integer-solution-for-a-given-equation/)",
    "Solution": [
      [
        "C++",
        "C++/find-positive-integer-solution-for-a-given-equation.cpp"
      ],
      [
        "Python",
        "Python/find-positive-integer-solution-for-a-given-equation.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1238,
    "Title": "[Circular Permutation in Binary Representation](https://leetcode.com/problems/circular-permutation-in-binary-representation/)",
    "Solution": [
      [
        "C++",
        "C++/circular-permutation-in-binary-representation.cpp"
      ],
      [
        "Python",
        "Python/circular-permutation-in-binary-representation.py"
      ]
    ],
    "Time": "_O(2^n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Gray Code](https://leetcode.com/problems/gray-code/)"
  },
  {
    "Index": 1239,
    "Title": "[Maximum Length of a Concatenated String with Unique Characters](https://leetcode.com/problems/maximum-length-of-a-concatenated-string-with-unique-characters/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-length-of-a-concatenated-string-with-unique-characters.cpp"
      ],
      [
        "Python",
        "Python/maximum-length-of-a-concatenated-string-with-unique-characters.py"
      ]
    ],
    "Time": "_O(n)_ ~ _O(2^n)_",
    "Space": "_O(1)_ ~ _O(2^n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DP, Bit Manipulation"
  },
  {
    "Index": 1240,
    "Title": "[Tiling a Rectangle with the Fewest Squares](https://leetcode.com/problems/tiling-a-rectangle-with-the-fewest-squares/)",
    "Solution": [
      [
        "C++",
        "C++/tiling-a-rectangle-with-the-fewest-squares.cpp"
      ],
      [
        "Python",
        "Python/tiling-a-rectangle-with-the-fewest-squares.py"
      ]
    ],
    "Time": "_O(n^2 * m^2 * m^(n * m))_",
    "Space": "_O(n * m)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1241,
    "Title": "[Number of Comments per Post](https://leetcode.com/problems/number-of-comments-per-post/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/number-of-comments-per-post.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1242,
    "Title": "[Web Crawler Multithreaded](https://leetcode.com/problems/web-crawler-multithreaded/)",
    "Solution": [
      [
        "C++",
        "C++/web-crawler-multithreaded.cpp"
      ],
      [
        "Python",
        "Python/web-crawler-multithreaded.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "V\\",
    "Difficulty": "+ \\",
    "Tag": "E\\",
    "Note": ")_"
  },
  {
    "Index": 1243,
    "Title": "[Array Transformation](https://leetcode.com/problems/array-transformation/)",
    "Solution": [
      [
        "C++",
        "C++/array-transformation.cpp"
      ],
      [
        "Python",
        "Python/array-transformation.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1244,
    "Title": "[Design A Leaderboard](https://leetcode.com/problems/design-a-leaderboard/)",
    "Solution": [
      [
        "C++",
        "C++/design-a-leaderboard.cpp"
      ],
      [
        "Python",
        "Python/design-a-leaderboard.py"
      ]
    ],
    "Time": "ctor: _O(1)_<br> add: _O(1)_<br> top: _O(n)_<br> reset: _O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1245,
    "Title": "[Tree Diameter](https://leetcode.com/problems/tree-diameter/)",
    "Solution": [
      [
        "C++",
        "C++/tree-diameter.cpp"
      ],
      [
        "Python",
        "Python/tree-diameter.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "V\\",
    "Difficulty": "+ \\",
    "Tag": "E\\",
    "Note": ")_"
  },
  {
    "Index": 1246,
    "Title": "[Palindrome Removal](https://leetcode.com/problems/palindrome-removal/)",
    "Solution": [
      [
        "C++",
        "C++/palindrome-removal.cpp"
      ],
      [
        "Python",
        "Python/palindrome-removal.py"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1247,
    "Title": "[Minimum Swaps to Make Strings Equal](https://leetcode.com/problems/minimum-swaps-to-make-strings-equal/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-swaps-to-make-strings-equal.cpp"
      ],
      [
        "Python",
        "Python/minimum-swaps-to-make-strings-equal.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1248,
    "Title": "[Count Number of Nice Subarrays](https://leetcode.com/problems/count-number-of-nice-subarrays/)",
    "Solution": [
      [
        "C++",
        "C++/count-number-of-nice-subarrays.cpp"
      ],
      [
        "Python",
        "Python/count-number-of-nice-subarrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Subarrays with K Different Integers](https://leetcode.com/problems/subarrays-with-k-different-integers/)"
  },
  {
    "Index": 1249,
    "Title": "[Minimum Remove to Make Valid Parentheses](https://leetcode.com/problems/minimum-remove-to-make-valid-parentheses/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-remove-to-make-valid-parentheses.cpp"
      ],
      [
        "Python",
        "Python/minimum-remove-to-make-valid-parentheses.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1250,
    "Title": "[Check If It Is a Good Array](https://leetcode.com/problems/check-if-it-is-a-good-array/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-it-is-a-good-array.cpp"
      ],
      [
        "Python",
        "Python/check-if-it-is-a-good-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "`Bézout's identity`"
  },
  {
    "Index": 1251,
    "Title": "[Average Selling Price](https://leetcode.com/problems/average-selling-price/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/average-selling-price.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1252,
    "Title": "[Cells with Odd Values in a Matrix](https://leetcode.com/problems/cells-with-odd-values-in-a-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/cells-with-odd-values-in-a-matrix.cpp"
      ],
      [
        "Python",
        "Python/cells-with-odd-values-in-a-matrix.py"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(n + m)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1253,
    "Title": "[Reconstruct a 2-Row Binary Matrix](https://leetcode.com/problems/reconstruct-a-2-row-binary-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/reconstruct-a-2-row-binary-matrix.cpp"
      ],
      [
        "Python",
        "Python/reconstruct-a-2-row-binary-matrix.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1254,
    "Title": "[Number of Closed Islands](https://leetcode.com/problems/number-of-closed-islands/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-closed-islands.cpp"
      ],
      [
        "Python",
        "Python/number-of-closed-islands.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1255,
    "Title": "[Maximum Score Words Formed by Letters](https://leetcode.com/problems/maximum-score-words-formed-by-letters/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-score-words-formed-by-letters.cpp"
      ],
      [
        "Python",
        "Python/maximum-score-words-formed-by-letters.py"
      ]
    ],
    "Time": "_O(n * 2^n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1256,
    "Title": "[Encode Number](https://leetcode.com/problems/encode-number/)",
    "Solution": [
      [
        "C++",
        "C++/encode-number.cpp"
      ],
      [
        "Python",
        "Python/encode-number.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1257,
    "Title": "[Smallest Common Region](https://leetcode.com/problems/smallest-common-region/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-common-region.cpp"
      ],
      [
        "Python",
        "Python/smallest-common-region.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1258,
    "Title": "[Synonymous Sentences](https://leetcode.com/problems/synonymous-sentences/)",
    "Solution": [
      [
        "C++",
        "C++/synonymous-sentences.cpp"
      ],
      [
        "Python",
        "Python/synonymous-sentences.py"
      ]
    ],
    "Time": "_O(p * l * log(p * l))_",
    "Space": "_O(p * l)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Union Find"
  },
  {
    "Index": 1259,
    "Title": "[Handshakes That Don't Cross](https://leetcode.com/problems/handshakes-that-dont-cross/)",
    "Solution": [
      [
        "C++",
        "C++/handshakes-that-dont-cross.cpp"
      ],
      [
        "Python",
        "Python/handshakes-that-dont-cross.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1260,
    "Title": "[Shift 2D Grid](https://leetcode.com/problems/shift-2d-grid/)",
    "Solution": [
      [
        "C++",
        "C++/shift-2d-grid.cpp"
      ],
      [
        "Python",
        "Python/shift-2d-grid.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1261,
    "Title": "[Find Elements in a Contaminated Binary Tree](https://leetcode.com/problems/find-elements-in-a-contaminated-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/find-elements-in-a-contaminated-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/find-elements-in-a-contaminated-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 1262,
    "Title": "[Greatest Sum Divisible by Three](https://leetcode.com/problems/greatest-sum-divisible-by-three/)",
    "Solution": [
      [
        "C++",
        "C++/greatest-sum-divisible-by-three.cpp"
      ],
      [
        "Python",
        "Python/greatest-sum-divisible-by-three.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1263,
    "Title": "[Minimum Moves to Move a Box to Their Target Location](https://leetcode.com/problems/minimum-moves-to-move-a-box-to-their-target-location/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-moves-to-move-a-box-to-their-target-location.cpp"
      ],
      [
        "Python",
        "Python/minimum-moves-to-move-a-box-to-their-target-location.py"
      ]
    ],
    "Time": "_O(m^2 * n^2)_",
    "Space": "_O(m^2 * n^2)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "`A* Search Algorithm`"
  },
  {
    "Index": 1264,
    "Title": "[Page Recommendations](https://leetcode.com/problems/page-recommendations/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/page-recommendations.sql"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(m)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1265,
    "Title": "[Print Immutable Linked List in Reverse](https://leetcode.com/problems/print-immutable-linked-list-in-reverse/)",
    "Solution": [
      [
        "C++",
        "C++/print-immutable-linked-list-in-reverse.cpp"
      ],
      [
        "Python",
        "Python/print-immutable-linked-list-in-reverse.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(sqrt(n))_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1266,
    "Title": "[Minimum Time Visiting All Points](https://leetcode.com/problems/minimum-time-visiting-all-points/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-time-visiting-all-points.cpp"
      ],
      [
        "Python",
        "Python/minimum-time-visiting-all-points.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1267,
    "Title": "[Count Servers that Communicate](https://leetcode.com/problems/count-servers-that-communicate/)",
    "Solution": [
      [
        "C++",
        "C++/count-servers-that-communicate.cpp"
      ],
      [
        "Python",
        "Python/count-servers-that-communicate.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1268,
    "Title": "[Search Suggestions System](https://leetcode.com/problems/search-suggestions-system/)",
    "Solution": [
      [
        "C++",
        "C++/search-suggestions-system.cpp"
      ],
      [
        "Python",
        "Python/search-suggestions-system.py"
      ]
    ],
    "Time": "ctor: _O(n * l)_<br> suggest: _O(l^2)_",
    "Space": "_O(t)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Trie"
  },
  {
    "Index": 1269,
    "Title": "[Number of Ways to Stay in the Same Place After Some Steps](https://leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-ways-to-stay-in-the-same-place-after-some-steps.cpp"
      ],
      [
        "Python",
        "Python/number-of-ways-to-stay-in-the-same-place-after-some-steps.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1270,
    "Title": "[All People Report to the Given Manager](https://leetcode.com/problems/all-people-report-to-the-given-manager/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/all-people-report-to-the-given-manager.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1271,
    "Title": "[Hexspeak](https://leetcode.com/problems/hexspeak/)",
    "Solution": [
      [
        "C++",
        "C++/hexspeak.cpp"
      ],
      [
        "Python",
        "Python/hexspeak.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1272,
    "Title": "[Remove Interval](https://leetcode.com/problems/remove-interval/)",
    "Solution": [
      [
        "C++",
        "C++/remove-interval.cpp"
      ],
      [
        "Python",
        "Python/remove-interval.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1273,
    "Title": "[Delete Tree Nodes](https://leetcode.com/problems/delete-tree-nodes/)",
    "Solution": [
      [
        "C++",
        "C++/delete-tree-nodes.cpp"
      ],
      [
        "Python",
        "Python/delete-tree-nodes.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS, DP"
  },
  {
    "Index": 1274,
    "Title": "[Number of Ships in a Rectangle](https://leetcode.com/problems/number-of-ships-in-a-rectangle/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-ships-in-a-rectangle.cpp"
      ],
      [
        "Python",
        "Python/number-of-ships-in-a-rectangle.py"
      ]
    ],
    "Time": "_O(log(m * n))_",
    "Space": "_O(log(m * n))_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1275,
    "Title": "[Find Winner on a Tic Tac Toe Game](https://leetcode.com/problems/find-winner-on-a-tic-tac-toe-game/)",
    "Solution": [
      [
        "C++",
        "C++/find-winner-on-a-tic-tac-toe-game.cpp"
      ],
      [
        "Python",
        "Python/find-winner-on-a-tic-tac-toe-game.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1276,
    "Title": "[Number of Burgers with No Waste of Ingredients](https://leetcode.com/problems/number-of-burgers-with-no-waste-of-ingredients/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-burgers-with-no-waste-of-ingredients.cpp"
      ],
      [
        "Python",
        "Python/number-of-burgers-with-no-waste-of-ingredients.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1277,
    "Title": "[Count Square Submatrices with All Ones](https://leetcode.com/problems/count-square-submatrices-with-all-ones/)",
    "Solution": [
      [
        "C++",
        "C++/count-square-submatrices-with-all-ones.cpp"
      ],
      [
        "Python",
        "Python/count-square-submatrices-with-all-ones.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1278,
    "Title": "[Palindrome Partitioning III](https://leetcode.com/problems/palindrome-partitioning-iii/)",
    "Solution": [
      [
        "C++",
        "C++/palindrome-partitioning-iii.cpp"
      ],
      [
        "Python",
        "Python/palindrome-partitioning-iii.py"
      ]
    ],
    "Time": "_O(k * n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1279,
    "Title": "[Traffic Light Controlled Intersection](https://leetcode.com/problems/traffic-light-controlled-intersection/)",
    "Solution": [
      [
        "C++",
        "C++/traffic-light-controlled-intersection.cpp"
      ],
      [
        "Python",
        "Python/traffic-light-controlled-intersection.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1280,
    "Title": "[Students and Examinations](https://leetcode.com/problems/students-and-examinations/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/students-and-examinations.sql"
      ]
    ],
    "Time": "_O((m * n) * log(m * n))_",
    "Space": "_O(m * n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1281,
    "Title": "[Subtract the Product and Sum of Digits of an Integer](https://leetcode.com/problems/subtract-the-product-and-sum-of-digits-of-an-integer/)",
    "Solution": [
      [
        "C++",
        "C++/subtract-the-product-and-sum-of-digits-of-an-integer.cpp"
      ],
      [
        "Python",
        "Python/subtract-the-product-and-sum-of-digits-of-an-integer.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1282,
    "Title": "[Group the People Given the Group Size They Belong To](https://leetcode.com/problems/group-the-people-given-the-group-size-they-belong-to/)",
    "Solution": [
      [
        "C++",
        "C++/group-the-people-given-the-group-size-they-belong-to.cpp"
      ],
      [
        "Python",
        "Python/group-the-people-given-the-group-size-they-belong-to.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1283,
    "Title": "[Find the Smallest Divisor Given a Threshold](https://leetcode.com/problems/find-the-smallest-divisor-given-a-threshold/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-smallest-divisor-given-a-threshold.cpp"
      ],
      [
        "Python",
        "Python/find-the-smallest-divisor-given-a-threshold.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1284,
    "Title": "[Minimum Number of Flips to Convert Binary Matrix to Zero Matrix](https://leetcode.com/problems/minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix.py"
      ]
    ],
    "Time": "_O((m * n) * 2^(m * n))_",
    "Space": "_O((m * n) * 2^(m * n))_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1285,
    "Title": "[Find the Start and End Number of Continuous Ranges](https://leetcode.com/problems/find-the-start-and-end-number-of-continuous-ranges/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-the-start-and-end-number-of-continuous-ranges.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1286,
    "Title": "[Iterator for Combination](https://leetcode.com/problems/iterator-for-combination/)",
    "Solution": [
      [
        "C++",
        "C++/iterator-for-combination.cpp"
      ],
      [
        "Python",
        "Python/iterator-for-combination.py"
      ]
    ],
    "Time": "_O(k)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Stack"
  },
  {
    "Index": 1287,
    "Title": "[Element Appearing More Than 25% In Sorted Array](https://leetcode.com/problems/element-appearing-more-than-25-in-sorted-array/)",
    "Solution": [
      [
        "C++",
        "C++/element-appearing-more-than-25-in-sorted-array.cpp"
      ],
      [
        "Python",
        "Python/element-appearing-more-than-25-in-sorted-array.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1288,
    "Title": "[Remove Covered Intervals](https://leetcode.com/problems/remove-covered-intervals/)",
    "Solution": [
      [
        "C++",
        "C++/remove-covered-intervals.cpp"
      ],
      [
        "Python",
        "Python/remove-covered-intervals.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1289,
    "Title": "[Minimum Falling Path Sum II](https://leetcode.com/problems/minimum-falling-path-sum-ii/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-falling-path-sum-ii.cpp"
      ],
      [
        "Python",
        "Python/minimum-falling-path-sum-ii.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1290,
    "Title": "[Convert Binary Number in a Linked List to Integer](https://leetcode.com/problems/convert-binary-number-in-a-linked-list-to-integer/)",
    "Solution": [
      [
        "C++",
        "C++/convert-binary-number-in-a-linked-list-to-integer.cpp"
      ],
      [
        "Python",
        "Python/convert-binary-number-in-a-linked-list-to-integer.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1291,
    "Title": "[Sequential Digits](https://leetcode.com/problems/sequential-digits/)",
    "Solution": [
      [
        "C++",
        "C++/sequential-digits.cpp"
      ],
      [
        "Python",
        "Python/sequential-digits.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1292,
    "Title": "[Maximum Side Length of a Square with Sum Less than or Equal to Threshold](https://leetcode.com/problems/maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold.cpp"
      ],
      [
        "Python",
        "Python/maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold.py"
      ]
    ],
    "Time": "_O(m * n * log(min(m, n)))_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Binary Search"
  },
  {
    "Index": 1293,
    "Title": "[Shortest Path in a Grid with Obstacles Elimination](https://leetcode.com/problems/shortest-path-in-a-grid-with-obstacles-elimination/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-path-in-a-grid-with-obstacles-elimination.cpp"
      ],
      [
        "Python",
        "Python/shortest-path-in-a-grid-with-obstacles-elimination.py"
      ]
    ],
    "Time": "_O(m * n * k)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "`A* Search Algorithm`"
  },
  {
    "Index": 1294,
    "Title": "[Weather Type in Each Country](https://leetcode.com/problems/weather-type-in-each-country/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/weather-type-in-each-country.sql"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1295,
    "Title": "[Find Numbers with Even Number of Digits](https://leetcode.com/problems/find-numbers-with-even-number-of-digits/)",
    "Solution": [
      [
        "C++",
        "C++/find-numbers-with-even-number-of-digits.cpp"
      ],
      [
        "Python",
        "Python/find-numbers-with-even-number-of-digits.py"
      ]
    ],
    "Time": "_O(nlog(logm))_",
    "Space": "_O(logm)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1296,
    "Title": "[Divide Array in Sets of K Consecutive Numbers](https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/)",
    "Solution": [
      [
        "C++",
        "C++/divide-array-in-sets-of-k-consecutive-numbers.cpp"
      ],
      [
        "Python",
        "Python/divide-array-in-sets-of-k-consecutive-numbers.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1297,
    "Title": "[Maximum Number of Occurrences of a Substring](https://leetcode.com/problems/maximum-number-of-occurrences-of-a-substring/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-occurrences-of-a-substring.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-occurrences-of-a-substring.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1298,
    "Title": "[Maximum Candies You Can Get from Boxes](https://leetcode.com/problems/maximum-candies-you-can-get-from-boxes/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-candies-you-can-get-from-boxes.cpp"
      ],
      [
        "Python",
        "Python/maximum-candies-you-can-get-from-boxes.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1299,
    "Title": "[Replace Elements with Greatest Element on Right Side](https://leetcode.com/problems/replace-elements-with-greatest-element-on-right-side/)",
    "Solution": [
      [
        "C++",
        "C++/replace-elements-with-greatest-element-on-right-side.cpp"
      ],
      [
        "Python",
        "Python/replace-elements-with-greatest-element-on-right-side.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1300,
    "Title": "[Sum of Mutated Array Closest to Target](https://leetcode.com/problems/sum-of-mutated-array-closest-to-target/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-mutated-array-closest-to-target.cpp"
      ],
      [
        "Python",
        "Python/sum-of-mutated-array-closest-to-target.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1301,
    "Title": "[Number of Paths with Max Score](https://leetcode.com/problems/number-of-paths-with-max-score/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-paths-with-max-score.cpp"
      ],
      [
        "Python",
        "Python/number-of-paths-with-max-score.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1302,
    "Title": "[Deepest Leaves Sum](https://leetcode.com/problems/deepest-leaves-sum/)",
    "Solution": [
      [
        "C++",
        "C++/deepest-leaves-sum.cpp"
      ],
      [
        "Python",
        "Python/deepest-leaves-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(w)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1303,
    "Title": "[Find the Team Size](https://leetcode.com/problems/find-the-team-size/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-the-team-size.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1304,
    "Title": "[Find N Unique Integers Sum up to Zero](https://leetcode.com/problems/find-n-unique-integers-sum-up-to-zero/)",
    "Solution": [
      [
        "C++",
        "C++/find-n-unique-integers-sum-up-to-zero.cpp"
      ],
      [
        "Python",
        "Python/find-n-unique-integers-sum-up-to-zero.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1305,
    "Title": "[All Elements in Two Binary Search Trees](https://leetcode.com/problems/all-elements-in-two-binary-search-trees/)",
    "Solution": [
      [
        "C++",
        "C++/all-elements-in-two-binary-search-trees.cpp"
      ],
      [
        "Python",
        "Python/all-elements-in-two-binary-search-trees.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Stack"
  },
  {
    "Index": 1306,
    "Title": "[Jump Game III](https://leetcode.com/problems/jump-game-iii/)",
    "Solution": [
      [
        "C++",
        "C++/jump-game-iii.cpp"
      ],
      [
        "Python",
        "Python/jump-game-iii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1307,
    "Title": "[Verbal Arithmetic Puzzle](https://leetcode.com/problems/verbal-arithmetic-puzzle/)",
    "Solution": [
      [
        "C++",
        "C++/verbal-arithmetic-puzzle.cpp"
      ],
      [
        "Python",
        "Python/verbal-arithmetic-puzzle.py"
      ]
    ],
    "Time": "_O(10! * n * l)_",
    "Space": "_O(n * l)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1308,
    "Title": "[Running Total for Different Genders](https://leetcode.com/problems/running-total-for-different-genders/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/running-total-for-different-genders.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1309,
    "Title": "[Decrypt String from Alphabet to Integer Mapping](https://leetcode.com/problems/decrypt-string-from-alphabet-to-integer-mapping/)",
    "Solution": [
      [
        "C++",
        "C++/decrypt-string-from-alphabet-to-integer-mapping.cpp"
      ],
      [
        "Python",
        "Python/decrypt-string-from-alphabet-to-integer-mapping.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1310,
    "Title": "[XOR Queries of a Subarray](https://leetcode.com/problems/xor-queries-of-a-subarray/)",
    "Solution": [
      [
        "C++",
        "C++/xor-queries-of-a-subarray.cpp"
      ],
      [
        "Python",
        "Python/xor-queries-of-a-subarray.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1311,
    "Title": "[Get Watched Videos by Your Friends](https://leetcode.com/problems/get-watched-videos-by-your-friends/)",
    "Solution": [
      [
        "C++",
        "C++/get-watched-videos-by-your-friends.cpp"
      ],
      [
        "Python",
        "Python/get-watched-videos-by-your-friends.py"
      ]
    ],
    "Time": "_O(n + vlogv)_",
    "Space": "_O(w)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1312,
    "Title": "[Minimum Insertion Steps to Make a String Palindrome](https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-insertion-steps-to-make-a-string-palindrome.cpp"
      ],
      [
        "Python",
        "Python/minimum-insertion-steps-to-make-a-string-palindrome.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Longest Common Subsequence](https://leetcode.com/problems/longest-common-subsequence/)",
    "Note": 0
  },
  {
    "Index": 1313,
    "Title": "[Decompress Run-Length Encoded List](https://leetcode.com/problems/decompress-run-length-encoded-list/)",
    "Solution": [
      [
        "C++",
        "C++/decompress-run-length-encoded-list.cpp"
      ],
      [
        "Python",
        "Python/decompress-run-length-encoded-list.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1314,
    "Title": "[Matrix Block Sum](https://leetcode.com/problems/matrix-block-sum/)",
    "Solution": [
      [
        "C++",
        "C++/matrix-block-sum.cpp"
      ],
      [
        "Python",
        "Python/matrix-block-sum.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Range Sum Query 2D - Immutable](https://leetcode.com/problems/range-sum-query-2d-immutable/)",
    "Note": 0
  },
  {
    "Index": 1315,
    "Title": "[Sum of Nodes with Even-Valued Grandparent](https://leetcode.com/problems/sum-of-nodes-with-even-valued-grandparent/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-nodes-with-even-valued-grandparent.cpp"
      ],
      [
        "Python",
        "Python/sum-of-nodes-with-even-valued-grandparent.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1316,
    "Title": "[Distinct Echo Substrings](https://leetcode.com/problems/distinct-echo-substrings/)",
    "Solution": [
      [
        "C++",
        "C++/distinct-echo-substrings.cpp"
      ],
      [
        "Python",
        "Python/distinct-echo-substrings.py"
      ]
    ],
    "Time": "_O(n^2 + d)_",
    "Space": "_O(r)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1317,
    "Title": "[Convert Integer to the Sum of Two No-Zero Integers](https://leetcode.com/problems/convert-integer-to-the-sum-of-two-no-zero-integers/)",
    "Solution": [
      [
        "C++",
        "C++/convert-integer-to-the-sum-of-two-no-zero-integers.cpp"
      ],
      [
        "Python",
        "Python/convert-integer-to-the-sum-of-two-no-zero-integers.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1318,
    "Title": "[Minimum Flips to Make a OR b Equal to c](https://leetcode.com/problems/minimum-flips-to-make-a-or-b-equal-to-c/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-flips-to-make-a-or-b-equal-to-c.cpp"
      ],
      [
        "Python",
        "Python/minimum-flips-to-make-a-or-b-equal-to-c.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1319,
    "Title": "[Number of Operations to Make Network Connected](https://leetcode.com/problems/number-of-operations-to-make-network-connected/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-operations-to-make-network-connected.cpp"
      ],
      [
        "Python",
        "Python/number-of-operations-to-make-network-connected.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "E\\",
    "Difficulty": "+ \\",
    "Tag": "V\\",
    "Note": ")_"
  },
  {
    "Index": 1320,
    "Title": "[Minimum Distance to Type a Word Using Two Fingers](https://leetcode.com/problems/minimum-distance-to-type-a-word-using-two-fingers/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-distance-to-type-a-word-using-two-fingers.cpp"
      ],
      [
        "Python",
        "Python/minimum-distance-to-type-a-word-using-two-fingers.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1321,
    "Title": "[Restaurant Growth](https://leetcode.com/problems/restaurant-growth/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/restaurant-growth.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1322,
    "Title": "[Ads Performance](https://leetcode.com/problems/ads-performance/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/ads-performance.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1323,
    "Title": "[Maximum 69 Number](https://leetcode.com/problems/maximum-69-number/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-69-number.cpp"
      ],
      [
        "Python",
        "Python/maximum-69-number.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1324,
    "Title": "[Print Words Vertically](https://leetcode.com/problems/print-words-vertically/)",
    "Solution": [
      [
        "C++",
        "C++/print-words-vertically.cpp"
      ],
      [
        "Python",
        "Python/print-words-vertically.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1325,
    "Title": "[Delete Leaves With a Given Value](https://leetcode.com/problems/delete-leaves-with-a-given-value/)",
    "Solution": [
      [
        "C++",
        "C++/delete-leaves-with-a-given-value.cpp"
      ],
      [
        "Python",
        "Python/delete-leaves-with-a-given-value.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 1326,
    "Title": "[Minimum Number of Taps to Open to Water a Garden](https://leetcode.com/problems/minimum-number-of-taps-to-open-to-water-a-garden/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-taps-to-open-to-water-a-garden.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-taps-to-open-to-water-a-garden.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Jump Game II](https://leetcode.com/problems/jump-game-ii/)"
  },
  {
    "Index": 1327,
    "Title": "[List the Products Ordered in a Period](https://leetcode.com/problems/list-the-products-ordered-in-a-period/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/list-the-products-ordered-in-a-period.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1328,
    "Title": "[Break a Palindrome](https://leetcode.com/problems/break-a-palindrome/)",
    "Solution": [
      [
        "C++",
        "C++/break-a-palindrome.cpp"
      ],
      [
        "Python",
        "Python/break-a-palindrome.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1329,
    "Title": "[Sort the Matrix Diagonally](https://leetcode.com/problems/sort-the-matrix-diagonally/)",
    "Solution": [
      [
        "C++",
        "C++/sort-the-matrix-diagonally.cpp"
      ],
      [
        "Python",
        "Python/sort-the-matrix-diagonally.py"
      ]
    ],
    "Time": "_O(m * n * log(min(m, n))_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1330,
    "Title": "[Reverse Subarray To Maximize Array Value](https://leetcode.com/problems/reverse-subarray-to-maximize-array-value/)",
    "Solution": [
      [
        "C++",
        "C++/reverse-subarray-to-maximize-array-value.cpp"
      ],
      [
        "Python",
        "Python/reverse-subarray-to-maximize-array-value.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1331,
    "Title": "[Rank Transform of an Array](https://leetcode.com/problems/rank-transform-of-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/rank-transform-of-an-array.cpp"
      ],
      [
        "Python",
        "Python/rank-transform-of-an-array.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1332,
    "Title": "[Remove Palindromic Subsequences](https://leetcode.com/problems/remove-palindromic-subsequences/)",
    "Solution": [
      [
        "C++",
        "C++/remove-palindromic-subsequences.cpp"
      ],
      [
        "Python",
        "Python/remove-palindromic-subsequences.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1333,
    "Title": "[Filter Restaurants by Vegan-Friendly, Price and Distance](https://leetcode.com/problems/filter-restaurants-by-vegan-friendly-price-and-distance/)",
    "Solution": [
      [
        "C++",
        "C++/filter-restaurants-by-vegan-friendly-price-and-distance.cpp"
      ],
      [
        "Python",
        "Python/filter-restaurants-by-vegan-friendly-price-and-distance.py"
      ]
    ],
    "Time": "_O(rlogr)_",
    "Space": "_O(r)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1334,
    "Title": "[Find the City With the Smallest Number of Neighbors at a Threshold Distance](https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance.cpp"
      ],
      [
        "Python",
        "Python/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance.py"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "`Floyd-Warshall Algorithm`"
  },
  {
    "Index": 1335,
    "Title": "[Minimum Difficulty of a Job Schedule](https://leetcode.com/problems/minimum-difficulty-of-a-job-schedule/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-difficulty-of-a-job-schedule.cpp"
      ],
      [
        "Python",
        "Python/minimum-difficulty-of-a-job-schedule.py"
      ]
    ],
    "Time": "_O(d * n^2)_",
    "Space": "_O(d * n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1336,
    "Title": "[Number of Transactions per Visit](https://leetcode.com/problems/number-of-transactions-per-visit/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/number-of-transactions-per-visit.sql"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1337,
    "Title": "[The K Weakest Rows in a Matrix](https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/the-k-weakest-rows-in-a-matrix.cpp"
      ],
      [
        "Python",
        "Python/the-k-weakest-rows-in-a-matrix.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(k)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1338,
    "Title": "[Reduce Array Size to The Half](https://leetcode.com/problems/reduce-array-size-to-the-half/)",
    "Solution": [
      [
        "C++",
        "C++/reduce-array-size-to-the-half.cpp"
      ],
      [
        "Python",
        "Python/reduce-array-size-to-the-half.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1339,
    "Title": "[Maximum Product of Splitted Binary Tree](https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-product-of-splitted-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/maximum-product-of-splitted-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 1340,
    "Title": "[Jump Game V](https://leetcode.com/problems/jump-game-v/)",
    "Solution": [
      [
        "C++",
        "C++/jump-game-v.cpp"
      ],
      [
        "Python",
        "Python/jump-game-v.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Sliding Window, Mono Stack, Segment Tree"
  },
  {
    "Index": 1341,
    "Title": "[Movie Rating](https://leetcode.com/problems/movie-rating/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/movie-rating.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1342,
    "Title": "[Number of Steps to Reduce a Number to Zero](https://leetcode.com/problems/number-of-steps-to-reduce-a-number-to-zero/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-steps-to-reduce-a-number-to-zero.cpp"
      ],
      [
        "Python",
        "Python/number-of-steps-to-reduce-a-number-to-zero.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1343,
    "Title": "[Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold](https://leetcode.com/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold.cpp"
      ],
      [
        "Python",
        "Python/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1344,
    "Title": "[Angle Between Hands of a Clock](https://leetcode.com/problems/angle-between-hands-of-a-clock/)",
    "Solution": [
      [
        "C++",
        "C++/angle-between-hands-of-a-clock.cpp"
      ],
      [
        "Python",
        "Python/angle-between-hands-of-a-clock.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1345,
    "Title": "[Jump Game IV](https://leetcode.com/problems/jump-game-iv/)",
    "Solution": [
      [
        "C++",
        "C++/jump-game-iv.cpp"
      ],
      [
        "Python",
        "Python/jump-game-iv.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1346,
    "Title": "[Check If N and Its Double Exist](https://leetcode.com/problems/check-if-n-and-its-double-exist/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-n-and-its-double-exist.cpp"
      ],
      [
        "Python",
        "Python/check-if-n-and-its-double-exist.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1347,
    "Title": "[Minimum Number of Steps to Make Two Strings Anagram](https://leetcode.com/problems/minimum-number-of-steps-to-make-two-strings-anagram/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-steps-to-make-two-strings-anagram.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-steps-to-make-two-strings-anagram.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1348,
    "Title": "[Tweet Counts Per Frequency](https://leetcode.com/problems/tweet-counts-per-frequency/)",
    "Solution": [
      [
        "C++",
        "C++/tweet-counts-per-frequency.cpp"
      ],
      [
        "Python",
        "Python/tweet-counts-per-frequency.py"
      ]
    ],
    "Time": "add: _O(logn)_<br>query: _O(c)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1349,
    "Title": "[Maximum Students Taking Exam](https://leetcode.com/problems/maximum-students-taking-exam/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-students-taking-exam.cpp"
      ],
      [
        "Python",
        "Python/maximum-students-taking-exam.py"
      ]
    ],
    "Time": "_O(m * n * sqrt(m * n))_",
    "Space": "_O(m + n)_",
    "Difficulty": "Hard",
    "Tag": "[GCJ2008 - Round 3](https://codingcompetitions.withgoogle.com/codejam/round/00000000004329f5/000000000043314f)",
    "Note": "`Hopcroft-Karp Bipartite Matching`, `Hungarian Bipartite Matching`, Maximum Independent Set"
  },
  {
    "Index": 1350,
    "Title": "[Students With Invalid Departments](https://leetcode.com/problems/students-with-invalid-departments/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/students-with-invalid-departments.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1351,
    "Title": "[Count Negative Numbers in a Sorted Matrix](https://leetcode.com/problems/count-negative-numbers-in-a-sorted-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/count-negative-numbers-in-a-sorted-matrix.cpp"
      ],
      [
        "Python",
        "Python/count-negative-numbers-in-a-sorted-matrix.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1352,
    "Title": "[Product of the Last K Numbers](https://leetcode.com/problems/product-of-the-last-k-numbers/)",
    "Solution": [
      [
        "C++",
        "C++/product-of-the-last-k-numbers.cpp"
      ],
      [
        "Python",
        "Python/product-of-the-last-k-numbers.py"
      ]
    ],
    "Time": "ctor: _O(1)_<br>add: _O(1)_<br>get: _O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1353,
    "Title": "[Maximum Number of Events That Can Be Attended](https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-events-that-can-be-attended.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-events-that-can-be-attended.py"
      ]
    ],
    "Time": "_O(r + nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Heap, Sort"
  },
  {
    "Index": 1354,
    "Title": "[Construct Target Array With Multiple Sums](https://leetcode.com/problems/construct-target-array-with-multiple-sums/)",
    "Solution": [
      [
        "C++",
        "C++/construct-target-array-with-multiple-sums.cpp"
      ],
      [
        "Python",
        "Python/construct-target-array-with-multiple-sums.py"
      ]
    ],
    "Time": "_O(log(max(t)) * logn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Heap"
  },
  {
    "Index": 1355,
    "Title": "[Activity Participants](https://leetcode.com/problems/activity-participants/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/activity-participants.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1356,
    "Title": "[Sort Integers by The Number of 1 Bits](https://leetcode.com/problems/sort-integers-by-the-number-of-1-bits/)",
    "Solution": [
      [
        "C++",
        "C++/sort-integers-by-the-number-of-1-bits.cpp"
      ],
      [
        "Python",
        "Python/sort-integers-by-the-number-of-1-bits.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1357,
    "Title": "[Apply Discount Every n Orders](https://leetcode.com/problems/apply-discount-every-n-orders/)",
    "Solution": [
      [
        "C++",
        "C++/apply-discount-every-n-orders.cpp"
      ],
      [
        "Python",
        "Python/apply-discount-every-n-orders.py"
      ]
    ],
    "Time": "ctor: _O(m)_<br>getBill: _O(p)_",
    "Space": "_O(m)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1358,
    "Title": "[Number of Substrings Containing All Three Characters](https://leetcode.com/problems/number-of-substrings-containing-all-three-characters/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-substrings-containing-all-three-characters.cpp"
      ],
      [
        "Python",
        "Python/number-of-substrings-containing-all-three-characters.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1359,
    "Title": "[Count All Valid Pickup and Delivery Options](https://leetcode.com/problems/count-all-valid-pickup-and-delivery-options/)",
    "Solution": [
      [
        "C++",
        "C++/count-all-valid-pickup-and-delivery-options.cpp"
      ],
      [
        "Python",
        "Python/count-all-valid-pickup-and-delivery-options.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1360,
    "Title": "[Number of Days Between Two Dates](https://leetcode.com/problems/number-of-days-between-two-dates/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-days-between-two-dates.cpp"
      ],
      [
        "Python",
        "Python/number-of-days-between-two-dates.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "variant of [Day of the Year](https://leetcode.com/problems/day-of-the-year/)"
  },
  {
    "Index": 1361,
    "Title": "[Validate Binary Tree Nodes](https://leetcode.com/problems/validate-binary-tree-nodes/)",
    "Solution": [
      [
        "C++",
        "C++/validate-binary-tree-nodes.cpp"
      ],
      [
        "Python",
        "Python/validate-binary-tree-nodes.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS, Tree"
  },
  {
    "Index": 1362,
    "Title": "[Closest Divisors](https://leetcode.com/problems/closest-divisors/)",
    "Solution": [
      [
        "C++",
        "C++/closest-divisors.cpp"
      ],
      [
        "Python",
        "Python/closest-divisors.py"
      ]
    ],
    "Time": "_O(sqrt(n))_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1363,
    "Title": "[Largest Multiple of Three](https://leetcode.com/problems/largest-multiple-of-three/)",
    "Solution": [
      [
        "C++",
        "C++/largest-multiple-of-three.cpp"
      ],
      [
        "Python",
        "Python/largest-multiple-of-three.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1364,
    "Title": "[Number of Trusted Contacts of a Customer](https://leetcode.com/problems/number-of-trusted-contacts-of-a-customer/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/number-of-trusted-contacts-of-a-customer.sql"
      ]
    ],
    "Time": "_O(n + m + l + nlogn)_",
    "Space": "_O(n + m + l)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1365,
    "Title": "[How Many Numbers Are Smaller Than the Current Number](https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/)",
    "Solution": [
      [
        "C++",
        "C++/how-many-numbers-are-smaller-than-the-current-number.cpp"
      ],
      [
        "Python",
        "Python/how-many-numbers-are-smaller-than-the-current-number.py"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(m)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1366,
    "Title": "[Rank Teams by Votes](https://leetcode.com/problems/rank-teams-by-votes/)",
    "Solution": [
      [
        "C++",
        "C++/rank-teams-by-votes.cpp"
      ],
      [
        "Python",
        "Python/rank-teams-by-votes.py"
      ]
    ],
    "Time": "_O(m * (n + mlogm))_",
    "Space": "_O(m^2)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1367,
    "Title": "[Linked List in Binary Tree](https://leetcode.com/problems/linked-list-in-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/linked-list-in-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/linked-list-in-binary-tree.py"
      ]
    ],
    "Time": "_O(n + l)_",
    "Space": "_O(h + l)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "`KMP Algorithm`"
  },
  {
    "Index": 1368,
    "Title": "[Minimum Cost to Make at Least One Valid Path in a Grid](https://leetcode.com/problems/minimum-cost-to-make-at-least-one-valid-path-in-a-grid/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-to-make-at-least-one-valid-path-in-a-grid.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-to-make-at-least-one-valid-path-in-a-grid.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "`A* Search Algorithm`, 0-1 BFS, Deque"
  },
  {
    "Index": 1369,
    "Title": "[Get the Second Most Recent Activity](https://leetcode.com/problems/get-the-second-most-recent-activity/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/get-the-second-most-recent-activity.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1370,
    "Title": "[Increasing Decreasing String](https://leetcode.com/problems/increasing-decreasing-string/)",
    "Solution": [
      [
        "C++",
        "C++/increasing-decreasing-string.cpp"
      ],
      [
        "Python",
        "Python/increasing-decreasing-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Sort"
  },
  {
    "Index": 1371,
    "Title": "[Find the Longest Substring Containing Vowels in Even Counts](https://leetcode.com/problems/find-the-longest-substring-containing-vowels-in-even-counts/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-longest-substring-containing-vowels-in-even-counts.cpp"
      ],
      [
        "Python",
        "Python/find-the-longest-substring-containing-vowels-in-even-counts.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1372,
    "Title": "[Longest ZigZag Path in a Binary Tree](https://leetcode.com/problems/longest-zigzag-path-in-a-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/longest-zigzag-path-in-a-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/longest-zigzag-path-in-a-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1373,
    "Title": "[Maximum Sum BST in Binary Tree](https://leetcode.com/problems/maximum-sum-bst-in-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-sum-bst-in-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/maximum-sum-bst-in-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "DFS, Stack"
  },
  {
    "Index": 1374,
    "Title": "[Generate a String With Characters That Have Odd Count](https://leetcode.com/problems/generate-a-string-with-characters-that-have-odd-counts/)",
    "Solution": [
      [
        "C++",
        "C++/generate-a-string-with-characters-that-have-odd-counts.cpp"
      ],
      [
        "Python",
        "Python/generate-a-string-with-characters-that-have-odd-counts.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1375,
    "Title": "[Bulb Switcher III](https://leetcode.com/problems/bulb-switcher-iii/)",
    "Solution": [
      [
        "C++",
        "C++/bulb-switcher-iii.cpp"
      ],
      [
        "Python",
        "Python/bulb-switcher-iii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1376,
    "Title": "[Time Needed to Inform All Employees](https://leetcode.com/problems/time-needed-to-inform-all-employees/)",
    "Solution": [
      [
        "C++",
        "C++/time-needed-to-inform-all-employees.cpp"
      ],
      [
        "Python",
        "Python/time-needed-to-inform-all-employees.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1377,
    "Title": "[Frog Position After T Seconds](https://leetcode.com/problems/frog-position-after-t-seconds/)",
    "Solution": [
      [
        "C++",
        "C++/frog-position-after-t-seconds.cpp"
      ],
      [
        "Python",
        "Python/frog-position-after-t-seconds.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "DFS, Stack, BFS"
  },
  {
    "Index": 1378,
    "Title": "[Replace Employee ID With The Unique Identifier](https://leetcode.com/problems/replace-employee-id-with-the-unique-identifier/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/replace-employee-id-with-the-unique-identifier.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1379,
    "Title": "[Find a Corresponding Node of a Binary Tree in a Clone of That Tree](https://leetcode.com/problems/find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree/)",
    "Solution": [
      [
        "C++",
        "C++/find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree.cpp"
      ],
      [
        "Python",
        "Python/find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Stack"
  },
  {
    "Index": 1380,
    "Title": "[Lucky Numbers in a Matrix](https://leetcode.com/problems/lucky-numbers-in-a-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/lucky-numbers-in-a-matrix.cpp"
      ],
      [
        "Python",
        "Python/lucky-numbers-in-a-matrix.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1381,
    "Title": "[Design a Stack With Increment Operation](https://leetcode.com/problems/design-a-stack-with-increment-operation/)",
    "Solution": [
      [
        "C++",
        "C++/design-a-stack-with-increment-operation.cpp"
      ],
      [
        "Python",
        "Python/design-a-stack-with-increment-operation.py"
      ]
    ],
    "Time": "ctor: _O(1)_<br>push: _O(1)_<br>pop: _O(1)_<br>increment: _O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1382,
    "Title": "[Balance a Binary Search Tree](https://leetcode.com/problems/balance-a-binary-search-tree/)",
    "Solution": [
      [
        "C++",
        "C++/balance-a-binary-search-tree.cpp"
      ],
      [
        "Python",
        "Python/balance-a-binary-search-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS, Stack"
  },
  {
    "Index": 1383,
    "Title": "[Maximum Performance of a Team](https://leetcode.com/problems/maximum-performance-of-a-team/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-performance-of-a-team.cpp"
      ],
      [
        "Python",
        "Python/maximum-performance-of-a-team.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Minimum Cost to Hire K Workers](https://leetcode.com/problems/minimum-cost-to-hire-k-workers/)",
    "Note": "Greedy, Heap"
  },
  {
    "Index": 1384,
    "Title": "[Total Sales Amount by Year](https://leetcode.com/problems/total-sales-amount-by-year/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/total-sales-amount-by-year.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1385,
    "Title": "[Find the Distance Value Between Two Arrays](https://leetcode.com/problems/find-the-distance-value-between-two-arrays/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-distance-value-between-two-arrays.cpp"
      ],
      [
        "Python",
        "Python/find-the-distance-value-between-two-arrays.py"
      ]
    ],
    "Time": "_O((n + m) * logm)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1386,
    "Title": "[Cinema Seat Allocation](https://leetcode.com/problems/cinema-seat-allocation/)",
    "Solution": [
      [
        "C++",
        "C++/cinema-seat-allocation.cpp"
      ],
      [
        "Python",
        "Python/cinema-seat-allocation.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1387,
    "Title": "[Sort Integers by The Power Value](https://leetcode.com/problems/sort-integers-by-the-power-value/)",
    "Solution": [
      [
        "C++",
        "C++/sort-integers-by-the-power-value.cpp"
      ],
      [
        "Python",
        "Python/sort-integers-by-the-power-value.py"
      ]
    ],
    "Time": "_O(n)_ on average",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Quick Select"
  },
  {
    "Index": 1388,
    "Title": "[Pizza With 3n Slices](https://leetcode.com/problems/pizza-with-3n-slices/)",
    "Solution": [
      [
        "C++",
        "C++/pizza-with-3n-slices.cpp"
      ],
      [
        "Python",
        "Python/pizza-with-3n-slices.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "variant of [House Robber II](https://leetcode.com/problems/house-robber-ii/)"
  },
  {
    "Index": 1389,
    "Title": "[Create Target Array in the Given Order](https://leetcode.com/problems/create-target-array-in-the-given-order/)",
    "Solution": [
      [
        "C++",
        "C++/create-target-array-in-the-given-order.cpp"
      ],
      [
        "Python",
        "Python/create-target-array-in-the-given-order.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1390,
    "Title": "[Four Divisors](https://leetcode.com/problems/four-divisors/)",
    "Solution": [
      [
        "C++",
        "C++/four-divisors.cpp"
      ],
      [
        "Python",
        "Python/four-divisors.py"
      ]
    ],
    "Time": "_O(n * sqrt(n))_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1391,
    "Title": "[Check if There is a Valid Path in a Grid](https://leetcode.com/problems/check-if-there-is-a-valid-path-in-a-grid/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-there-is-a-valid-path-in-a-grid.cpp"
      ],
      [
        "Python",
        "Python/check-if-there-is-a-valid-path-in-a-grid.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Simulation"
  },
  {
    "Index": 1392,
    "Title": "[Longest Happy Prefix](https://leetcode.com/problems/longest-happy-prefix/)",
    "Solution": [
      [
        "C++",
        "C++/longest-happy-prefix.cpp"
      ],
      [
        "Python",
        "Python/longest-happy-prefix.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "`KMP Algorithm`, `Rabin-Karp Algorithm`"
  },
  {
    "Index": 1393,
    "Title": "[Capital Gain/Loss](https://leetcode.com/problems/capital-gainloss/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/capital-gainloss.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1394,
    "Title": "[Find Lucky Integer in an Array](https://leetcode.com/problems/find-lucky-integer-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/find-lucky-integer-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/find-lucky-integer-in-an-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1395,
    "Title": "[Count Number of Teams](https://leetcode.com/problems/count-number-of-teams/)",
    "Solution": [
      [
        "C++",
        "C++/count-number-of-teams.cpp"
      ],
      [
        "Python",
        "Python/count-number-of-teams.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1396,
    "Title": "[Design Underground System](https://leetcode.com/problems/design-underground-system/)",
    "Solution": [
      [
        "C++",
        "C++/design-underground-system.cpp"
      ],
      [
        "Python",
        "Python/design-underground-system.py"
      ]
    ],
    "Time": "ctor: _O(1)_<br>checkin: _O(1)_<br>checkout: _O(1)_<br>getaverage: _O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1397,
    "Title": "[Find All Good Strings](https://leetcode.com/problems/find-all-good-strings/)",
    "Solution": [
      [
        "C++",
        "C++/find-all-good-strings.cpp"
      ],
      [
        "Python",
        "Python/find-all-good-strings.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1398,
    "Title": "[Customers Who Bought Products A and B but Not C](https://leetcode.com/problems/customers-who-bought-products-a-and-b-but-not-c/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/customers-who-bought-products-a-and-b-but-not-c.sql"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1399,
    "Title": "[Count Largest Group](https://leetcode.com/problems/count-largest-group/)",
    "Solution": [
      [
        "C++",
        "C++/count-largest-group.cpp"
      ],
      [
        "Python",
        "Python/count-largest-group.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1400,
    "Title": "[Construct K Palindrome Strings](https://leetcode.com/problems/construct-k-palindrome-strings/)",
    "Solution": [
      [
        "C++",
        "C++/construct-k-palindrome-strings.cpp"
      ],
      [
        "Python",
        "Python/construct-k-palindrome-strings.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1401,
    "Title": "[Circle and Rectangle Overlapping](https://leetcode.com/problems/circle-and-rectangle-overlapping/)",
    "Solution": [
      [
        "C++",
        "C++/circle-and-rectangle-overlapping.cpp"
      ],
      [
        "Python",
        "Python/circle-and-rectangle-overlapping.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1402,
    "Title": "[Reducing Dishes](https://leetcode.com/problems/reducing-dishes/)",
    "Solution": [
      [
        "C++",
        "C++/reducing-dishes.cpp"
      ],
      [
        "Python",
        "Python/reducing-dishes.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1403,
    "Title": "[Minimum Subsequence in Non-Increasing Order](https://leetcode.com/problems/minimum-subsequence-in-non-increasing-order/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-subsequence-in-non-increasing-order.cpp"
      ],
      [
        "Python",
        "Python/minimum-subsequence-in-non-increasing-order.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1404,
    "Title": "[Number of Steps to Reduce a Number in Binary Representation to One](https://leetcode.com/problems/number-of-steps-to-reduce-a-number-in-binary-representation-to-one/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-steps-to-reduce-a-number-in-binary-representation-to-one.cpp"
      ],
      [
        "Python",
        "Python/number-of-steps-to-reduce-a-number-in-binary-representation-to-one.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1405,
    "Title": "[Longest Happy String](https://leetcode.com/problems/longest-happy-string/)",
    "Solution": [
      [
        "C++",
        "C++/longest-happy-string.cpp"
      ],
      [
        "Python",
        "Python/longest-happy-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1406,
    "Title": "[Stone Game III](https://leetcode.com/problems/stone-game-iii/)",
    "Solution": [
      [
        "C++",
        "C++/stone-game-iii.cpp"
      ],
      [
        "Python",
        "Python/stone-game-iii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1407,
    "Title": "[Top Travellers](https://leetcode.com/problems/top-travellers/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/top-travellers.sql"
      ]
    ],
    "Time": "_O(m + nlogn)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1408,
    "Title": "[String Matching in an Array](https://leetcode.com/problems/string-matching-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/string-matching-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/string-matching-in-an-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(t)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "`KMP Algorithm`, `Aho-Corasick Automata`, Trie"
  },
  {
    "Index": 1409,
    "Title": "[Queries on a Permutation With Key](https://leetcode.com/problems/queries-on-a-permutation-with-key/)",
    "Solution": [
      [
        "C++",
        "C++/queries-on-a-permutation-with-key.cpp"
      ],
      [
        "Python",
        "Python/queries-on-a-permutation-with-key.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1410,
    "Title": "[HTML Entity Parser](https://leetcode.com/problems/html-entity-parser/)",
    "Solution": [
      [
        "C++",
        "C++/html-entity-parser.cpp"
      ],
      [
        "Python",
        "Python/html-entity-parser.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(t)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "`Aho-Corasick Automata`, Trie"
  },
  {
    "Index": 1411,
    "Title": "[Number of Ways to Paint N × 3 Grid](https://leetcode.com/problems/number-of-ways-to-paint-n-3-grid/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-ways-to-paint-n-3-grid.cpp"
      ],
      [
        "Python",
        "Python/number-of-ways-to-paint-n-3-grid.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1412,
    "Title": "[Find the Quiet Students in All Exams](https://leetcode.com/problems/find-the-quiet-students-in-all-exams/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-the-quiet-students-in-all-exams.sql"
      ]
    ],
    "Time": "_O(m + nlogn)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1413,
    "Title": "[Minimum Value to Get Positive Step by Step Sum](https://leetcode.com/problems/minimum-value-to-get-positive-step-by-step-sum/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-value-to-get-positive-step-by-step-sum.cpp"
      ],
      [
        "Python",
        "Python/minimum-value-to-get-positive-step-by-step-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1414,
    "Title": "[Find the Minimum Number of Fibonacci Numbers Whose Sum Is K](https://leetcode.com/problems/find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k.cpp"
      ],
      [
        "Python",
        "Python/find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k.py"
      ]
    ],
    "Time": "_O(logk)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1415,
    "Title": "[The k-th Lexicographical String of All Happy Strings of Length n](https://leetcode.com/problems/the-k-th-lexicographical-string-of-all-happy-strings-of-length-n/)",
    "Solution": [
      [
        "C++",
        "C++/the-k-th-lexicographical-string-of-all-happy-strings-of-length-n.cpp"
      ],
      [
        "Python",
        "Python/the-k-th-lexicographical-string-of-all-happy-strings-of-length-n.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1416,
    "Title": "[Restore The Array](https://leetcode.com/problems/restore-the-array/)",
    "Solution": [
      [
        "C++",
        "C++/restore-the-array.cpp"
      ],
      [
        "Python",
        "Python/restore-the-array.py"
      ]
    ],
    "Time": "_O(nlogk)_",
    "Space": "_O(logk)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1417,
    "Title": "[Reformat The String](https://leetcode.com/problems/reformat-the-string/)",
    "Solution": [
      [
        "C++",
        "C++/reformat-the-string.cpp"
      ],
      [
        "Python",
        "Python/reformat-the-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1418,
    "Title": "[Display Table of Food Orders in a Restaurant](https://leetcode.com/problems/display-table-of-food-orders-in-a-restaurant/)",
    "Solution": [
      [
        "C++",
        "C++/display-table-of-food-orders-in-a-restaurant.cpp"
      ],
      [
        "Python",
        "Python/display-table-of-food-orders-in-a-restaurant.py"
      ]
    ],
    "Time": "_O(n + tlogt + flogf)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1419,
    "Title": "[Minimum Number of Frogs Croaking](https://leetcode.com/problems/minimum-number-of-frogs-croaking/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-frogs-croaking.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-frogs-croaking.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1420,
    "Title": "[Build Array Where You Can Find The Maximum Exactly K Comparisons](https://leetcode.com/problems/build-array-where-you-can-find-the-maximum-exactly-k-comparisons/)",
    "Solution": [
      [
        "C++",
        "C++/build-array-where-you-can-find-the-maximum-exactly-k-comparisons.cpp"
      ],
      [
        "Python",
        "Python/build-array-where-you-can-find-the-maximum-exactly-k-comparisons.py"
      ]
    ],
    "Time": "_O(n * m * k)_",
    "Space": "_O(m * k)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1421,
    "Title": "[NPV Queries](https://leetcode.com/problems/npv-queries/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/npv-queries.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1422,
    "Title": "[Maximum Score After Splitting a String](https://leetcode.com/problems/maximum-score-after-splitting-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-score-after-splitting-a-string.cpp"
      ],
      [
        "Python",
        "Python/maximum-score-after-splitting-a-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1423,
    "Title": "[Maximum Points You Can Obtain from Cards](https://leetcode.com/problems/maximum-points-you-can-obtain-from-cards/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-points-you-can-obtain-from-cards.cpp"
      ],
      [
        "Python",
        "Python/maximum-points-you-can-obtain-from-cards.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1424,
    "Title": "[Diagonal Traverse II](https://leetcode.com/problems/diagonal-traverse-ii/)",
    "Solution": [
      [
        "C++",
        "C++/diagonal-traverse-ii.cpp"
      ],
      [
        "Python",
        "Python/diagonal-traverse-ii.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1425,
    "Title": "[Constrained Subset Sum](https://leetcode.com/problems/constrained-subset-sum/)",
    "Solution": [
      [
        "C++",
        "C++/constrained-subset-sum.cpp"
      ],
      [
        "Python",
        "Python/constrained-subset-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(k)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Sliding Window Maximum](https://leetcode.com/problems/sliding-window-maximum/)",
    "Note": "Mono Deque, Sliding Window"
  },
  {
    "Index": 1426,
    "Title": "[Counting Elements](https://leetcode.com/problems/counting-elements/)",
    "Solution": [
      [
        "C++",
        "C++/counting-elements.cpp"
      ],
      [
        "Python",
        "Python/counting-elements.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒"
  },
  {
    "Index": 1427,
    "Title": "[Perform String Shifts](https://leetcode.com/problems/perform-string-shifts/)",
    "Solution": [
      [
        "C++",
        "C++/perform-string-shifts.cpp"
      ],
      [
        "Python",
        "Python/perform-string-shifts.py"
      ]
    ],
    "Time": "_O(n + l)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒"
  },
  {
    "Index": 1428,
    "Title": "[Leftmost Column with at Least a One](https://leetcode.com/problems/leftmost-column-with-at-least-a-one/)",
    "Solution": [
      [
        "C++",
        "C++/leftmost-column-with-at-least-a-one.cpp"
      ],
      [
        "Python",
        "Python/leftmost-column-with-at-least-a-one.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 1429,
    "Title": "[First Unique Number](https://leetcode.com/problems/first-unique-number/)",
    "Solution": [
      [
        "C++",
        "C++/first-unique-number.cpp"
      ],
      [
        "Python",
        "Python/first-unique-number.py"
      ]
    ],
    "Time": "ctor: _O(k)_<br>add: _O(1)_<br>showFirstUnique: _O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 1430,
    "Title": "[Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree](https://leetcode.com/problems/check-if-a-string-is-a-valid-sequence-from-root-to-leaves-path-in-a-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-a-string-is-a-valid-sequence-from-root-to-leaves-path-in-a-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/check-if-a-string-is-a-valid-sequence-from-root-to-leaves-path-in-a-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 1431,
    "Title": "[Kids With the Greatest Number of Candies](https://leetcode.com/problems/kids-with-the-greatest-number-of-candies/)",
    "Solution": [
      [
        "C++",
        "C++/kids-with-the-greatest-number-of-candies.cpp"
      ],
      [
        "Python",
        "Python/kids-with-the-greatest-number-of-candies.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1432,
    "Title": "[Max Difference You Can Get From Changing an Integer](https://leetcode.com/problems/max-difference-you-can-get-from-changing-an-integer/)",
    "Solution": [
      [
        "C++",
        "C++/max-difference-you-can-get-from-changing-an-integer.cpp"
      ],
      [
        "Python",
        "Python/max-difference-you-can-get-from-changing-an-integer.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(logn)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1433,
    "Title": "[Check If a String Can Break Another String](https://leetcode.com/problems/check-if-a-string-can-break-another-string/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-a-string-can-break-another-string.cpp"
      ],
      [
        "Python",
        "Python/check-if-a-string-can-break-another-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1434,
    "Title": "[Number of Ways to Wear Different Hats to Each Other](https://leetcode.com/problems/number-of-ways-to-wear-different-hats-to-each-other/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-ways-to-wear-different-hats-to-each-other.cpp"
      ],
      [
        "Python",
        "Python/number-of-ways-to-wear-different-hats-to-each-other.py"
      ]
    ],
    "Time": "_O(h * 2^n)_",
    "Space": "_O(2^n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1435,
    "Title": "[Create a Session Bar Chart](https://leetcode.com/problems/create-a-session-bar-chart/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/create-a-session-bar-chart.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1436,
    "Title": "[Destination City](https://leetcode.com/problems/destination-city/)",
    "Solution": [
      [
        "C++",
        "C++/destination-city.cpp"
      ],
      [
        "Python",
        "Python/destination-city.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1437,
    "Title": "[Check If All 1's Are at Least Length K Places Away](https://leetcode.com/problems/check-if-all-1s-are-at-least-length-k-places-away/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-all-1s-are-at-least-length-k-places-away.cpp"
      ],
      [
        "Python",
        "Python/check-if-all-1s-are-at-least-length-k-places-away.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1438,
    "Title": "[Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit](https://leetcode.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/)",
    "Solution": [
      [
        "C++",
        "C++/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit.cpp"
      ],
      [
        "Python",
        "Python/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Mono Deque"
  },
  {
    "Index": 1439,
    "Title": "[Find the Kth Smallest Sum of a Matrix With Sorted Rows](https://leetcode.com/problems/find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows.cpp"
      ],
      [
        "Python",
        "Python/find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows.py"
      ]
    ],
    "Time": "_O(m * klogk)_",
    "Space": "_O(k)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Binary Search"
  },
  {
    "Index": 1440,
    "Title": "[Evaluate Boolean Expression](https://leetcode.com/problems/evaluate-boolean-expression/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/evaluate-boolean-expression.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1441,
    "Title": "[Build an Array With Stack Operations](https://leetcode.com/problems/build-an-array-with-stack-operations/)",
    "Solution": [
      [
        "C++",
        "C++/build-an-array-with-stack-operations.cpp"
      ],
      [
        "Python",
        "Python/build-an-array-with-stack-operations.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1442,
    "Title": "[Count Triplets That Can Form Two Arrays of Equal XOR](https://leetcode.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/)",
    "Solution": [
      [
        "C++",
        "C++/count-triplets-that-can-form-two-arrays-of-equal-xor.cpp"
      ],
      [
        "Python",
        "Python/count-triplets-that-can-form-two-arrays-of-equal-xor.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1443,
    "Title": "[Minimum Time to Collect All Apples in a Tree](https://leetcode.com/problems/minimum-time-to-collect-all-apples-in-a-tree/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-time-to-collect-all-apples-in-a-tree.cpp"
      ],
      [
        "Python",
        "Python/minimum-time-to-collect-all-apples-in-a-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS, Stack"
  },
  {
    "Index": 1444,
    "Title": "[Number of Ways of Cutting a Pizza](https://leetcode.com/problems/number-of-ways-of-cutting-a-pizza/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-ways-of-cutting-a-pizza.cpp"
      ],
      [
        "Python",
        "Python/number-of-ways-of-cutting-a-pizza.py"
      ]
    ],
    "Time": "_O(m * n * k * (m + n))_",
    "Space": "_O(m * n * k)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1445,
    "Title": "[Apples & Oranges](https://leetcode.com/problems/apples-oranges/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/apples-oranges.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1446,
    "Title": "[Consecutive Characters](https://leetcode.com/problems/consecutive-characters/)",
    "Solution": [
      [
        "C++",
        "C++/consecutive-characters.cpp"
      ],
      [
        "Python",
        "Python/consecutive-characters.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1447,
    "Title": "[Simplified Fractions](https://leetcode.com/problems/simplified-fractions/)",
    "Solution": [
      [
        "C++",
        "C++/simplified-fractions.cpp"
      ],
      [
        "Python",
        "Python/simplified-fractions.py"
      ]
    ],
    "Time": "_O(n^2 * logn)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1448,
    "Title": "[Count Good Nodes in Binary Tree](https://leetcode.com/problems/count-good-nodes-in-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/count-good-nodes-in-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/count-good-nodes-in-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1449,
    "Title": "[Form Largest Integer With Digits That Add up to Target](https://leetcode.com/problems/form-largest-integer-with-digits-that-add-up-to-target/)",
    "Solution": [
      [
        "C++",
        "C++/form-largest-integer-with-digits-that-add-up-to-target.cpp"
      ],
      [
        "Python",
        "Python/form-largest-integer-with-digits-that-add-up-to-target.py"
      ]
    ],
    "Time": "_O(t)_",
    "Space": "_O(t)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1450,
    "Title": "[Number of Students Doing Homework at a Given Time](https://leetcode.com/problems/number-of-students-doing-homework-at-a-given-time/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-students-doing-homework-at-a-given-time.cpp"
      ],
      [
        "Python",
        "Python/number-of-students-doing-homework-at-a-given-time.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1451,
    "Title": "[Rearrange Words in a Sentence](https://leetcode.com/problems/rearrange-words-in-a-sentence/)",
    "Solution": [
      [
        "C++",
        "C++/rearrange-words-in-a-sentence.cpp"
      ],
      [
        "Python",
        "Python/rearrange-words-in-a-sentence.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1452,
    "Title": "[People Whose List of Favorite Companies Is Not a Subset of Another List](https://leetcode.com/problems/people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list/)",
    "Solution": [
      [
        "C++",
        "C++/people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list.cpp"
      ],
      [
        "Python",
        "Python/people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list.py"
      ]
    ],
    "Time": "_O(n * m * l + n^2 * m)_",
    "Space": "_O(n * m * l)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1453,
    "Title": "[Maximum Number of Darts Inside of a Circular Dartboard](https://leetcode.com/problems/maximum-number-of-darts-inside-of-a-circular-dartboard/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-darts-inside-of-a-circular-dartboard.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-darts-inside-of-a-circular-dartboard.py"
      ]
    ],
    "Time": "_O(n^2 * logn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Line Sweep"
  },
  {
    "Index": 1454,
    "Title": "[Active Users](https://leetcode.com/problems/active-users/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/active-users.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1455,
    "Title": "[Check If a Word Occurs As a Prefix of Any Word in a Sentence](https://leetcode.com/problems/check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence.cpp"
      ],
      [
        "Python",
        "Python/check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "`KMP Algorithm`"
  },
  {
    "Index": 1456,
    "Title": "[Maximum Number of Vowels in a Substring of Given Length](https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-vowels-in-a-substring-of-given-length.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-vowels-in-a-substring-of-given-length.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Sliding Window"
  },
  {
    "Index": 1457,
    "Title": "[Pseudo-Palindromic Paths in a Binary Tree](https://leetcode.com/problems/pseudo-palindromic-paths-in-a-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/pseudo-palindromic-paths-in-a-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/pseudo-palindromic-paths-in-a-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1458,
    "Title": "[Max Dot Product of Two Subsequences](https://leetcode.com/problems/max-dot-product-of-two-subsequences/)",
    "Solution": [
      [
        "C++",
        "C++/max-dot-product-of-two-subsequences.cpp"
      ],
      [
        "Python",
        "Python/max-dot-product-of-two-subsequences.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(min(m, n))_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1459,
    "Title": "[Rectangles Area](https://leetcode.com/problems/rectangles-area/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/rectangles-area.sql"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1460,
    "Title": "[Make Two Arrays Equal by Reversing Sub-arrays](https://leetcode.com/problems/make-two-arrays-equal-by-reversing-sub-arrays/)",
    "Solution": [
      [
        "C++",
        "C++/make-two-arrays-equal-by-reversing-sub-arrays.cpp"
      ],
      [
        "Python",
        "Python/make-two-arrays-equal-by-reversing-sub-arrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1461,
    "Title": "[Check If a String Contains All Binary Codes of Size K](https://leetcode.com/problems/check-if-a-string-contains-all-binary-codes-of-size-k/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-a-string-contains-all-binary-codes-of-size-k.cpp"
      ],
      [
        "Python",
        "Python/check-if-a-string-contains-all-binary-codes-of-size-k.py"
      ]
    ],
    "Time": "_O(n * k)_",
    "Space": "_O(k * 2^k)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Bit Manipulation"
  },
  {
    "Index": 1462,
    "Title": "[Course Schedule IV](https://leetcode.com/problems/course-schedule-iv/)",
    "Solution": [
      [
        "C++",
        "C++/course-schedule-iv.cpp"
      ],
      [
        "Python",
        "Python/course-schedule-iv.py"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "`Floyd-Warshall Algorithm`"
  },
  {
    "Index": 1463,
    "Title": "[Cherry Pickup II](https://leetcode.com/problems/cherry-pickup-ii/)",
    "Solution": [
      [
        "C++",
        "C++/cherry-pickup-ii.cpp"
      ],
      [
        "Python",
        "Python/cherry-pickup-ii.py"
      ]
    ],
    "Time": "_O(m * n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1464,
    "Title": "[Maximum Product of Two Elements in an Array](https://leetcode.com/problems/maximum-product-of-two-elements-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-product-of-two-elements-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/maximum-product-of-two-elements-in-an-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1465,
    "Title": "[Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts](https://leetcode.com/problems/maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts.cpp"
      ],
      [
        "Python",
        "Python/maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts.py"
      ]
    ],
    "Time": "_O(hlogh + wlogw)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1466,
    "Title": "[Reorder Routes to Make All Paths Lead to the City Zero](https://leetcode.com/problems/reorder-routes-to-make-all-paths-lead-to-the-city-zero/)",
    "Solution": [
      [
        "C++",
        "C++/reorder-routes-to-make-all-paths-lead-to-the-city-zero.cpp"
      ],
      [
        "Python",
        "Python/reorder-routes-to-make-all-paths-lead-to-the-city-zero.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS, Stack"
  },
  {
    "Index": 1467,
    "Title": "[Probability of a Two Boxes Having The Same Number of Distinct Balls](https://leetcode.com/problems/probability-of-a-two-boxes-having-the-same-number-of-distinct-balls/)",
    "Solution": [
      [
        "C++",
        "C++/probability-of-a-two-boxes-having-the-same-number-of-distinct-balls.cpp"
      ],
      [
        "Python",
        "Python/probability-of-a-two-boxes-having-the-same-number-of-distinct-balls.py"
      ]
    ],
    "Time": "_O(k^3 * n^2)_",
    "Space": "_O(k^2 * n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1468,
    "Title": "[Calculate Salaries](https://leetcode.com/problems/calculate-salaries/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/calculate-salaries.sql"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1469,
    "Title": "[Find All The Lonely Nodes](https://leetcode.com/problems/find-all-the-lonely-nodes/)",
    "Solution": [
      [
        "C++",
        "C++/find-all-the-lonely-nodes.cpp"
      ],
      [
        "Python",
        "Python/find-all-the-lonely-nodes.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": "🔒"
  },
  {
    "Index": 1470,
    "Title": "[Shuffle the Array](https://leetcode.com/problems/shuffle-the-array/)",
    "Solution": [
      [
        "C++",
        "C++/shuffle-the-array.cpp"
      ],
      [
        "Python",
        "Python/shuffle-the-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1471,
    "Title": "[The k Strongest Values in an Array](https://leetcode.com/problems/the-k-strongest-values-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/the-k-strongest-values-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/the-k-strongest-values-in-an-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1472,
    "Title": "[Design Browser History](https://leetcode.com/problems/design-browser-history/)",
    "Solution": [
      [
        "C++",
        "C++/design-browser-history.cpp"
      ],
      [
        "Python",
        "Python/design-browser-history.py"
      ]
    ],
    "Time": "ctor: _O(1)_<br>visit: _O(1)_<br>back: _O(1)_<br>forward: _O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1473,
    "Title": "[Paint House III](https://leetcode.com/problems/paint-house-iii/)",
    "Solution": [
      [
        "C++",
        "C++/paint-house-iii.cpp"
      ],
      [
        "Python",
        "Python/paint-house-iii.py"
      ]
    ],
    "Time": "_O(m * t * n^2)_",
    "Space": "_O(t * n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1474,
    "Title": "[Delete N Nodes After M Nodes of a Linked List](https://leetcode.com/problems/delete-n-nodes-after-m-nodes-of-a-linked-list/)",
    "Solution": [
      [
        "C++",
        "C++/delete-n-nodes-after-m-nodes-of-a-linked-list.cpp"
      ],
      [
        "Python",
        "Python/delete-n-nodes-after-m-nodes-of-a-linked-list.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1475,
    "Title": "[Final Prices With a Special Discount in a Shop](https://leetcode.com/problems/final-prices-with-a-special-discount-in-a-shop/)",
    "Solution": [
      [
        "C++",
        "C++/final-prices-with-a-special-discount-in-a-shop.cpp"
      ],
      [
        "Python",
        "Python/final-prices-with-a-special-discount-in-a-shop.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1476,
    "Title": "[Subrectangle Queries](https://leetcode.com/problems/subrectangle-queries/)",
    "Solution": [
      [
        "C++",
        "C++/subrectangle-queries.cpp"
      ],
      [
        "Python",
        "Python/subrectangle-queries.py"
      ]
    ],
    "Time": "ctor: _O(1)_<br>update: _O(1)_<br>get: _O(u)_",
    "Space": "_O(u)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1477,
    "Title": "[Find Two Non-overlapping Sub-arrays Each With Target Sum](https://leetcode.com/problems/find-two-non-overlapping-sub-arrays-each-with-target-sum/)",
    "Solution": [
      [
        "C++",
        "C++/find-two-non-overlapping-sub-arrays-each-with-target-sum.cpp"
      ],
      [
        "Python",
        "Python/find-two-non-overlapping-sub-arrays-each-with-target-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1478,
    "Title": "[Allocate Mailboxes](https://leetcode.com/problems/allocate-mailboxes/)",
    "Solution": [
      [
        "C++",
        "C++/allocate-mailboxes.cpp"
      ],
      [
        "Python",
        "Python/allocate-mailboxes.py"
      ]
    ],
    "Time": "_O(m * n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1479,
    "Title": "[Sales by Day of the Week](https://leetcode.com/problems/sales-by-day-of-the-week/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/sales-by-day-of-the-week.sql"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1480,
    "Title": "[Running Sum of 1d Array](https://leetcode.com/problems/running-sum-of-1d-array/)",
    "Solution": [
      [
        "C++",
        "C++/running-sum-of-1d-array.cpp"
      ],
      [
        "Python",
        "Python/running-sum-of-1d-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1481,
    "Title": "[Least Number of Unique Integers after K Removals](https://leetcode.com/problems/least-number-of-unique-integers-after-k-removals/)",
    "Solution": [
      [
        "C++",
        "C++/least-number-of-unique-integers-after-k-removals.cpp"
      ],
      [
        "Python",
        "Python/least-number-of-unique-integers-after-k-removals.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1482,
    "Title": "[Minimum Number of Days to Make m Bouquets](https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-days-to-make-m-bouquets.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-days-to-make-m-bouquets.py"
      ]
    ],
    "Time": "_O(nlogd)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1483,
    "Title": "[Kth Ancestor of a Tree Node](https://leetcode.com/problems/kth-ancestor-of-a-tree-node/)",
    "Solution": [
      [
        "C++",
        "C++/kth-ancestor-of-a-tree-node.cpp"
      ],
      [
        "Python",
        "Python/kth-ancestor-of-a-tree-node.py"
      ]
    ],
    "Time": "ctor: _O(n * logh)_<br>get: _O(logh)_",
    "Space": "_O(n * logh)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "DP, Binary Lifting"
  },
  {
    "Index": 1484,
    "Title": "[Group Sold Products By The Date](https://leetcode.com/problems/group-sold-products-by-the-date/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/group-sold-products-by-the-date.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1485,
    "Title": "[Clone Binary Tree With Random Pointer](https://leetcode.com/problems/clone-binary-tree-with-random-pointer/)",
    "Solution": [
      [
        "C++",
        "C++/clone-binary-tree-with-random-pointer.cpp"
      ],
      [
        "Python",
        "Python/clone-binary-tree-with-random-pointer.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "DFS, Stack"
  },
  {
    "Index": 1486,
    "Title": "[XOR Operation in an Array](https://leetcode.com/problems/xor-operation-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/xor-operation-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/xor-operation-in-an-array.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1487,
    "Title": "[Making File Names Unique](https://leetcode.com/problems/making-file-names-unique/)",
    "Solution": [
      [
        "C++",
        "C++/making-file-names-unique.cpp"
      ],
      [
        "Python",
        "Python/making-file-names-unique.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1488,
    "Title": "[Avoid Flood in The City](https://leetcode.com/problems/avoid-flood-in-the-city/)",
    "Solution": [
      [
        "C++",
        "C++/avoid-flood-in-the-city.cpp"
      ],
      [
        "Python",
        "Python/avoid-flood-in-the-city.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1489,
    "Title": "[Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree](https://leetcode.com/problems/find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree/)",
    "Solution": [
      [
        "C++",
        "C++/find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree.cpp"
      ],
      [
        "Python",
        "Python/find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "`Kruskal Algorithm`"
  },
  {
    "Index": 1490,
    "Title": "[Clone N-ary Tree](https://leetcode.com/problems/clone-n-ary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/clone-n-ary-tree.cpp"
      ],
      [
        "Python",
        "Python/clone-n-ary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "DFS, Stack"
  },
  {
    "Index": 1491,
    "Title": "[Average Salary Excluding the Minimum and Maximum Salary](https://leetcode.com/problems/average-salary-excluding-the-minimum-and-maximum-salary/)",
    "Solution": [
      [
        "C++",
        "C++/average-salary-excluding-the-minimum-and-maximum-salary.cpp"
      ],
      [
        "Python",
        "Python/average-salary-excluding-the-minimum-and-maximum-salary.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1492,
    "Title": "[The kth Factor of n](https://leetcode.com/problems/the-kth-factor-of-n/)",
    "Solution": [
      [
        "C++",
        "C++/the-kth-factor-of-n.cpp"
      ],
      [
        "Python",
        "Python/the-kth-factor-of-n.py"
      ]
    ],
    "Time": "_O(sqrt(n))_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1493,
    "Title": "[Longest Subarray of 1's After Deleting One Element](https://leetcode.com/problems/longest-subarray-of-1s-after-deleting-one-element/)",
    "Solution": [
      [
        "C++",
        "C++/longest-subarray-of-1s-after-deleting-one-element.cpp"
      ],
      [
        "Python",
        "Python/longest-subarray-of-1s-after-deleting-one-element.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1494,
    "Title": "[Parallel Courses II](https://leetcode.com/problems/parallel-courses-ii/)",
    "Solution": [
      [
        "C++",
        "C++/parallel-courses-ii.cpp"
      ],
      [
        "Python",
        "Python/parallel-courses-ii.py"
      ]
    ],
    "Time": "_O((n * C(c, min(c, k))) * 2^n)_",
    "Space": "_O(2^n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1495,
    "Title": "[Friendly Movies Streamed Last Month](https://leetcode.com/problems/friendly-movies-streamed-last-month/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/friendly-movies-streamed-last-month.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1496,
    "Title": "[Path Crossing](https://leetcode.com/problems/path-crossing/)",
    "Solution": [
      [
        "C++",
        "C++/path-crossing.cpp"
      ],
      [
        "Python",
        "Python/path-crossing.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1497,
    "Title": "[Check If Array Pairs Are Divisible by k](https://leetcode.com/problems/check-if-array-pairs-are-divisible-by-k/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-array-pairs-are-divisible-by-k.cpp"
      ],
      [
        "Python",
        "Python/check-if-array-pairs-are-divisible-by-k.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1498,
    "Title": "[Number of Subsequences That Satisfy the Given Sum Condition](https://leetcode.com/problems//number-of-subsequences-that-satisfy-the-given-sum-condition/)",
    "Solution": [
      [
        "C++",
        "C++//number-of-subsequences-that-satisfy-the-given-sum-condition.cpp"
      ],
      [
        "Python",
        "Python//number-of-subsequences-that-satisfy-the-given-sum-condition.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Two Pointers"
  },
  {
    "Index": 1499,
    "Title": "[Max Value of Equation](https://leetcode.com/problems/max-value-of-equation/)",
    "Solution": [
      [
        "C++",
        "C++/max-value-of-equation.cpp"
      ],
      [
        "Python",
        "Python/max-value-of-equation.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Mono Deque"
  },
  {
    "Index": 1500,
    "Title": "[Design a File Sharing System](https://leetcode.com/problems/design-a-file-sharing-system/)",
    "Solution": [
      [
        "C++",
        "C++/design-a-file-sharing-system.cpp"
      ],
      [
        "Python",
        "Python/design-a-file-sharing-system.py"
      ]
    ],
    "Time": "ctor: _O(1)_<br>join: _O(logu + c)_<br>leave: _O(logu + c)_<br>request: _O(u)_",
    "Space": "_O(u * c)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1501,
    "Title": "[Countries You Can Safely Invest In](https://leetcode.com/problems/countries-you-can-safely-invest-in/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/countries-you-can-safely-invest-in.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1502,
    "Title": "[Can Make Arithmetic Progression From Sequence](https://leetcode.com/problems/can-make-arithmetic-progression-from-sequence/)",
    "Solution": [
      [
        "C++",
        "C++/can-make-arithmetic-progression-from-sequence.cpp"
      ],
      [
        "Python",
        "Python/can-make-arithmetic-progression-from-sequence.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1503,
    "Title": "[Last Moment Before All Ants Fall Out of a Plank](https://leetcode.com/problems/last-moment-before-all-ants-fall-out-of-a-plank/)",
    "Solution": [
      [
        "C++",
        "C++/last-moment-before-all-ants-fall-out-of-a-plank.cpp"
      ],
      [
        "Python",
        "Python/last-moment-before-all-ants-fall-out-of-a-plank.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1504,
    "Title": "[Count Submatrices With All Ones](https://leetcode.com/problems/count-submatrices-with-all-ones/)",
    "Solution": [
      [
        "C++",
        "C++/count-submatrices-with-all-ones.cpp"
      ],
      [
        "Python",
        "Python/count-submatrices-with-all-ones.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1505,
    "Title": "[Minimum Possible Integer After at Most K Adjacent Swaps On Digits](https://leetcode.com/problems/minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits.cpp"
      ],
      [
        "Python",
        "Python/minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1506,
    "Title": "[Find Root of N-Ary Tree](https://leetcode.com/problems/find-root-of-n-ary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/find-root-of-n-ary-tree.cpp"
      ],
      [
        "Python",
        "Python/find-root-of-n-ary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 1507,
    "Title": "[Reformat Date](https://leetcode.com/problems/reformat-date/)",
    "Solution": [
      [
        "C++",
        "C++/reformat-date.cpp"
      ],
      [
        "Python",
        "Python/reformat-date.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1508,
    "Title": "[Range Sum of Sorted Subarray Sums](https://leetcode.com/problems/range-sum-of-sorted-subarray-sums/)",
    "Solution": [
      [
        "C++",
        "C++/range-sum-of-sorted-subarray-sums.cpp"
      ],
      [
        "Python",
        "Python/range-sum-of-sorted-subarray-sums.py"
      ]
    ],
    "Time": "_O(nlog(sum(nums)))_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1509,
    "Title": "[Minimum Difference Between Largest and Smallest Value in Three Moves](https://leetcode.com/problems/minimum-difference-between-largest-and-smallest-value-in-three-moves/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-difference-between-largest-and-smallest-value-in-three-moves.cpp"
      ],
      [
        "Python",
        "Python/minimum-difference-between-largest-and-smallest-value-in-three-moves.py"
      ]
    ],
    "Time": "_O(n + klogk)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1510,
    "Title": "[Stone Game IV](https://leetcode.com/problems/stone-game-iv/)",
    "Solution": [
      [
        "C++",
        "C++/stone-game-iv.cpp"
      ],
      [
        "Python",
        "Python/stone-game-iv.py"
      ]
    ],
    "Time": "_O(n * sqrt(n))_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1511,
    "Title": "[Customer Order Frequency](https://leetcode.com/problems/customer-order-frequency/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/customer-order-frequency.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1512,
    "Title": "[Number of Good Pairs](https://leetcode.com/problems/number-of-good-pairs/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-good-pairs.cpp"
      ],
      [
        "Python",
        "Python/number-of-good-pairs.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1513,
    "Title": "[Number of Substrings With Only 1s](https://leetcode.com/problems/number-of-substrings-with-only-1s/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-substrings-with-only-1s.cpp"
      ],
      [
        "Python",
        "Python/number-of-substrings-with-only-1s.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1514,
    "Title": "[Path with Maximum Probability](https://leetcode.com/problems/path-with-maximum-probability/)",
    "Solution": [
      [
        "C++",
        "C++/path-with-maximum-probability.cpp"
      ],
      [
        "Python",
        "Python/path-with-maximum-probability.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "E\\",
    "Difficulty": "* log\\",
    "Tag": "V\\",
    "Note": ")_"
  },
  {
    "Index": 1515,
    "Title": "[Best Position for a Service Centre](https://leetcode.com/problems/best-position-for-a-service-centre/)",
    "Solution": [
      [
        "C++",
        "C++/best-position-for-a-service-centre.cpp"
      ],
      [
        "Python",
        "Python/best-position-for-a-service-centre.py"
      ]
    ],
    "Time": "_O(n * iter)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Geometric Median, Gradient Descent, Weiszfeld's Algorithm"
  },
  {
    "Index": 1516,
    "Title": "[Move Sub-Tree of N-Ary Tree](https://leetcode.com/problems/move-sub-tree-of-n-ary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/move-sub-tree-of-n-ary-tree.cpp"
      ],
      [
        "Python",
        "Python/move-sub-tree-of-n-ary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 1517,
    "Title": "[Find Users With Valid E-Mails](https://leetcode.com/problems/find-users-with-valid-e-mails/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-users-with-valid-e-mails.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": "Regex"
  },
  {
    "Index": 1518,
    "Title": "[Water Bottles](https://leetcode.com/problems/water-bottles/)",
    "Solution": [
      [
        "C++",
        "C++/water-bottles.cpp"
      ],
      [
        "Python",
        "Python/water-bottles.py"
      ]
    ],
    "Time": "_O(logn/logm)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1519,
    "Title": "[Number of Nodes in the Sub-Tree With the Same Label](https://leetcode.com/problems/number-of-nodes-in-the-sub-tree-with-the-same-label/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-nodes-in-the-sub-tree-with-the-same-label.cpp"
      ],
      [
        "Python",
        "Python/number-of-nodes-in-the-sub-tree-with-the-same-label.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS, Stack"
  },
  {
    "Index": 1520,
    "Title": "[Maximum Number of Non-Overlapping Substrings](https://leetcode.com/problems/maximum-number-of-non-overlapping-substrings/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-non-overlapping-substrings.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-non-overlapping-substrings.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1521,
    "Title": "[Find a Value of a Mysterious Function Closest to Target](https://leetcode.com/problems/find-a-value-of-a-mysterious-function-closest-to-target/)",
    "Solution": [
      [
        "C++",
        "C++/find-a-value-of-a-mysterious-function-closest-to-target.cpp"
      ],
      [
        "Python",
        "Python/find-a-value-of-a-mysterious-function-closest-to-target.py"
      ]
    ],
    "Time": "_O(nlogm)_",
    "Space": "_O(logm)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1522,
    "Title": "[Diameter of N-Ary Tree](https://leetcode.com/problems/diameter-of-n-ary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/diameter-of-n-ary-tree.cpp"
      ],
      [
        "Python",
        "Python/diameter-of-n-ary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": "🔒, variant of [Tree Diameter](https://leetcode.com/problems/tree-diameter/)",
    "Note": "DFS, Stack"
  },
  {
    "Index": 1523,
    "Title": "[Count Odd Numbers in an Interval Range](https://leetcode.com/problems/count-odd-numbers-in-an-interval-range/)",
    "Solution": [
      [
        "C++",
        "C++/count-odd-numbers-in-an-interval-range.cpp"
      ],
      [
        "Python",
        "Python/count-odd-numbers-in-an-interval-range.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1524,
    "Title": "[Number of Sub-arrays With Odd Sum](https://leetcode.com/problems/number-of-sub-arrays-with-odd-sum/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-sub-arrays-with-odd-sum.cpp"
      ],
      [
        "Python",
        "Python/number-of-sub-arrays-with-odd-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1525,
    "Title": "[Number of Good Ways to Split a String](https://leetcode.com/problems/number-of-good-ways-to-split-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-good-ways-to-split-a-string.cpp"
      ],
      [
        "Python",
        "Python/number-of-good-ways-to-split-a-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1526,
    "Title": "[Minimum Number of Increments on Subarrays to Form a Target Array](https://leetcode.com/problems/minimum-number-of-increments-on-subarrays-to-form-a-target-array/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-increments-on-subarrays-to-form-a-target-array.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-increments-on-subarrays-to-form-a-target-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1527,
    "Title": "[Patients With a Condition](https://leetcode.com/problems/patients-with-a-condition/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/patients-with-a-condition.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": "Regex"
  },
  {
    "Index": 1528,
    "Title": "[Shuffle String](https://leetcode.com/problems/shuffle-string/)",
    "Solution": [
      [
        "C++",
        "C++/shuffle-string.cpp"
      ],
      [
        "Python",
        "Python/shuffle-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1529,
    "Title": "[Bulb Switcher IV](https://leetcode.com/problems/bulb-switcher-iv/)",
    "Solution": [
      [
        "C++",
        "C++/bulb-switcher-iv.cpp"
      ],
      [
        "Python",
        "Python/bulb-switcher-iv.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1530,
    "Title": "[Number of Good Leaf Nodes Pairs](https://leetcode.com/problems/number-of-good-leaf-nodes-pairs/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-good-leaf-nodes-pairs.cpp"
      ],
      [
        "Python",
        "Python/number-of-good-leaf-nodes-pairs.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1531,
    "Title": "[String Compression II](https://leetcode.com/problems/string-compression-ii/)",
    "Solution": [
      [
        "C++",
        "C++/string-compression-ii.cpp"
      ],
      [
        "Python",
        "Python/string-compression-ii.py"
      ]
    ],
    "Time": "_O(n^2 * k)_",
    "Space": "_O(n * k)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1532,
    "Title": "[The Most Recent Three Orders](https://leetcode.com/problems/the-most-recent-three-orders/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/the-most-recent-three-orders.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1533,
    "Title": "[Find the Index of the Large Integer](https://leetcode.com/problems/find-the-index-of-the-large-integer/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-index-of-the-large-integer.cpp"
      ],
      [
        "Python",
        "Python/find-the-index-of-the-large-integer.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 1534,
    "Title": "[Count Good Triplets](https://leetcode.com/problems/count-good-triplets/)",
    "Solution": [
      [
        "C++",
        "C++/count-good-triplets.cpp"
      ],
      [
        "Python",
        "Python/count-good-triplets.py"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1535,
    "Title": "[Find the Winner of an Array Game](https://leetcode.com/problems/find-the-winner-of-an-array-game/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-winner-of-an-array-game.cpp"
      ],
      [
        "Python",
        "Python/find-the-winner-of-an-array-game.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1536,
    "Title": "[Minimum Swaps to Arrange a Binary Grid](https://leetcode.com/problems/minimum-swaps-to-arrange-a-binary-grid/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-swaps-to-arrange-a-binary-grid.cpp"
      ],
      [
        "Python",
        "Python/minimum-swaps-to-arrange-a-binary-grid.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1537,
    "Title": "[Get the Maximum Score](https://leetcode.com/problems/get-the-maximum-score/)",
    "Solution": [
      [
        "C++",
        "C++/get-the-maximum-score.cpp"
      ],
      [
        "Python",
        "Python/get-the-maximum-score.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1538,
    "Title": "[Guess the Majority in a Hidden Array](https://leetcode.com/problems/guess-the-majority-in-a-hidden-array/)",
    "Solution": [
      [
        "C++",
        "C++/guess-the-majority-in-a-hidden-array.cpp"
      ],
      [
        "Python",
        "Python/guess-the-majority-in-a-hidden-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 1539,
    "Title": "[Kth Missing Positive Number](https://leetcode.com/problems/kth-missing-positive-number/)",
    "Solution": [
      [
        "C++",
        "C++/kth-missing-positive-number.cpp"
      ],
      [
        "Python",
        "Python/kth-missing-positive-number.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1540,
    "Title": "[Can Convert String in K Moves](https://leetcode.com/problems/can-convert-string-in-k-moves/)",
    "Solution": [
      [
        "C++",
        "C++/can-convert-string-in-k-moves.cpp"
      ],
      [
        "Python",
        "Python/can-convert-string-in-k-moves.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1541,
    "Title": "[Minimum Insertions to Balance a Parentheses String](https://leetcode.com/problems/minimum-insertions-to-balance-a-parentheses-string/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-insertions-to-balance-a-parentheses-string.cpp"
      ],
      [
        "Python",
        "Python/minimum-insertions-to-balance-a-parentheses-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1542,
    "Title": "[Find Longest Awesome Substring](https://leetcode.com/problems/find-longest-awesome-substring/)",
    "Solution": [
      [
        "C++",
        "C++/find-longest-awesome-substring.cpp"
      ],
      [
        "Python",
        "Python/find-longest-awesome-substring.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1543,
    "Title": "[Fix Product Name Format](https://leetcode.com/problems/fix-product-name-format/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/fix-product-name-format.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1544,
    "Title": "[Make The String Great](https://leetcode.com/problems/make-the-string-great/)",
    "Solution": [
      [
        "C++",
        "C++/make-the-string-great.cpp"
      ],
      [
        "Python",
        "Python/make-the-string-great.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1545,
    "Title": "[Find Kth Bit in Nth Binary String](https://leetcode.com/problems/find-kth-bit-in-nth-binary-string/)",
    "Solution": [
      [
        "C++",
        "C++/find-kth-bit-in-nth-binary-string.cpp"
      ],
      [
        "Python",
        "Python/find-kth-bit-in-nth-binary-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1546,
    "Title": "[Maximum Number of Non-Overlapping Subarrays With Sum Equals Target](https://leetcode.com/problems/maximum-number-of-non-overlapping-subarrays-with-sum-equals-target/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-non-overlapping-subarrays-with-sum-equals-target.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-non-overlapping-subarrays-with-sum-equals-target.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1547,
    "Title": "[Minimum Cost to Cut a Stick](https://leetcode.com/problems/minimum-cost-to-cut-a-stick/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-to-cut-a-stick.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-to-cut-a-stick.py"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1548,
    "Title": "[The Most Similar Path in a Graph](https://leetcode.com/problems/the-most-similar-path-in-a-graph/)",
    "Solution": [
      [
        "C++",
        "C++/the-most-similar-path-in-a-graph.cpp"
      ],
      [
        "Python",
        "Python/the-most-similar-path-in-a-graph.py"
      ]
    ],
    "Time": "_O(n^ * m)_",
    "Space": "_O(n * m)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 1549,
    "Title": "[The Most Recent Orders for Each Product](https://leetcode.com/problems/the-most-recent-orders-for-each-product/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/the-most-recent-orders-for-each-product.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1550,
    "Title": "[Three Consecutive Odds](https://leetcode.com/problems/three-consecutive-odds/)",
    "Solution": [
      [
        "C++",
        "C++/three-consecutive-odds.cpp"
      ],
      [
        "Python",
        "Python/three-consecutive-odds.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1551,
    "Title": "[Minimum Operations to Make Array Equal](https://leetcode.com/problems/minimum-operations-to-make-array-equal/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-make-array-equal.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-make-array-equal.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1552,
    "Title": "[Magnetic Force Between Two Balls](https://leetcode.com/problems/magnetic-force-between-two-balls/)",
    "Solution": [
      [
        "C++",
        "C++/magnetic-force-between-two-balls.cpp"
      ],
      [
        "Python",
        "Python/magnetic-force-between-two-balls.py"
      ]
    ],
    "Time": "_O(nlogn + nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1553,
    "Title": "[Minimum Number of Days to Eat N Oranges](https://leetcode.com/problems/minimum-number-of-days-to-eat-n-oranges/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-days-to-eat-n-oranges.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-days-to-eat-n-oranges.py"
      ]
    ],
    "Time": "_O((logn)^2)_",
    "Space": "_O((logn)^2)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1554,
    "Title": "[Strings Differ by One Character](https://leetcode.com/problems/strings-differ-by-one-character/)",
    "Solution": [
      [
        "C++",
        "C++/strings-differ-by-one-character.cpp"
      ],
      [
        "Python",
        "Python/strings-differ-by-one-character.py"
      ]
    ],
    "Time": "_O(n * m)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "`Rabin-Karp Algorithm`"
  },
  {
    "Index": 1555,
    "Title": "[Bank Account Summary](https://leetcode.com/problems/bank-account-summary/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/bank-account-summary.sql"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1556,
    "Title": "[Thousand Separator](https://leetcode.com/problems/thousand-separator/)",
    "Solution": [
      [
        "C++",
        "C++/thousand-separator.cpp"
      ],
      [
        "Python",
        "Python/thousand-separator.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1557,
    "Title": "[Minimum Number of Vertices to Reach All Nodes](https://leetcode.com/problems/minimum-number-of-vertices-to-reach-all-nodes/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-vertices-to-reach-all-nodes.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-vertices-to-reach-all-nodes.py"
      ]
    ],
    "Time": "_O(e)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1558,
    "Title": "[Minimum Numbers of Function Calls to Make Target Array](https://leetcode.com/problems/minimum-numbers-of-function-calls-to-make-target-array/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-numbers-of-function-calls-to-make-target-array.cpp"
      ],
      [
        "Python",
        "Python/minimum-numbers-of-function-calls-to-make-target-array.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1559,
    "Title": "[Detect Cycles in 2D Grid](https://leetcode.com/problems/detect-cycles-in-2d-grid/)",
    "Solution": [
      [
        "C++",
        "C++/detect-cycles-in-2d-grid.cpp"
      ],
      [
        "Python",
        "Python/detect-cycles-in-2d-grid.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1560,
    "Title": "[Most Visited Sector in a Circular Track](https://leetcode.com/problems/most-visited-sector-in-a-circular-track/)",
    "Solution": [
      [
        "C++",
        "C++/most-visited-sector-in-a-circular-track.cpp"
      ],
      [
        "Python",
        "Python/most-visited-sector-in-a-circular-track.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1561,
    "Title": "[Maximum Number of Coins You Can Get](https://leetcode.com/problems/maximum-number-of-coins-you-can-get/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-coins-you-can-get.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-coins-you-can-get.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1562,
    "Title": "[Find Latest Group of Size M](https://leetcode.com/problems/find-latest-group-of-size-m/)",
    "Solution": [
      [
        "C++",
        "C++/find-latest-group-of-size-m.cpp"
      ],
      [
        "Python",
        "Python/find-latest-group-of-size-m.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1563,
    "Title": "[Stone Game V](https://leetcode.com/problems/stone-game-v/)",
    "Solution": [
      [
        "C++",
        "C++/stone-game-v.cpp"
      ],
      [
        "Python",
        "Python/stone-game-v.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1564,
    "Title": "[Put Boxes Into the Warehouse I](https://leetcode.com/problems/put-boxes-into-the-warehouse-i/)",
    "Solution": [
      [
        "C++",
        "C++/put-boxes-into-the-warehouse-i.cpp"
      ],
      [
        "Python",
        "Python/put-boxes-into-the-warehouse-i.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 1565,
    "Title": "[Unique Orders and Customers Per Month](https://leetcode.com/problems/unique-orders-and-customers-per-month/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/unique-orders-and-customers-per-month.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1566,
    "Title": "[Detect Pattern of Length M Repeated K or More Times](https://leetcode.com/problems/detect-pattern-of-length-m-repeated-k-or-more-times/)",
    "Solution": [
      [
        "C++",
        "C++/detect-pattern-of-length-m-repeated-k-or-more-times.cpp"
      ],
      [
        "Python",
        "Python/detect-pattern-of-length-m-repeated-k-or-more-times.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1567,
    "Title": "[Maximum Length of Subarray With Positive Product](https://leetcode.com/problems/maximum-length-of-subarray-with-positive-product/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-length-of-subarray-with-positive-product.cpp"
      ],
      [
        "Python",
        "Python/maximum-length-of-subarray-with-positive-product.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1568,
    "Title": "[Minimum Number of Days to Disconnect Island](https://leetcode.com/problems/minimum-number-of-days-to-disconnect-island/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-days-to-disconnect-island.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-days-to-disconnect-island.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1569,
    "Title": "[Number of Ways to Reorder Array to Get Same BST](https://leetcode.com/problems/detect-pattern-of-length-m-repeated-k-or-more-times/)",
    "Solution": [
      [
        "C++",
        "C++/detect-pattern-of-length-m-repeated-k-or-more-times.cpp"
      ],
      [
        "Python",
        "Python/detect-pattern-of-length-m-repeated-k-or-more-times.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1570,
    "Title": "[Dot Product of Two Sparse Vectors](https://leetcode.com/problems/dot-product-of-two-sparse-vectors/)",
    "Solution": [
      [
        "C++",
        "C++/dot-product-of-two-sparse-vectors.cpp"
      ],
      [
        "Python",
        "Python/dot-product-of-two-sparse-vectors.py"
      ]
    ],
    "Time": "ctor: _O(n)_<br>dot_product: _O(min(n, m))_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1571,
    "Title": "[Warehouse Manager](https://leetcode.com/problems/warehouse-manager/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/warehouse-manager.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1572,
    "Title": "[Matrix Diagonal Sum](https://leetcode.com/problems/matrix-diagonal-sum/)",
    "Solution": [
      [
        "C++",
        "C++/matrix-diagonal-sum.cpp"
      ],
      [
        "Python",
        "Python/matrix-diagonal-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1573,
    "Title": "[Number of Ways to Split a String](https://leetcode.com/problems/number-of-ways-to-split-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-ways-to-split-a-string.cpp"
      ],
      [
        "Python",
        "Python/number-of-ways-to-split-a-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1574,
    "Title": "[Shortest Subarray to be Removed to Make Array Sorted](https://leetcode.com/problems/shortest-subarray-to-be-removed-to-make-array-sorted/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-subarray-to-be-removed-to-make-array-sorted.cpp"
      ],
      [
        "Python",
        "Python/shortest-subarray-to-be-removed-to-make-array-sorted.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1575,
    "Title": "[Count All Possible Routes](https://leetcode.com/problems/count-all-possible-routes/)",
    "Solution": [
      [
        "C++",
        "C++/count-all-possible-routes.cpp"
      ],
      [
        "Python",
        "Python/count-all-possible-routes.py"
      ]
    ],
    "Time": "_O(nlogn + n * f)_",
    "Space": "_O(n * f)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1576,
    "Title": "[Replace All ?'s to Avoid Consecutive Repeating Characters](https://leetcode.com/problems/replace-all-s-to-avoid-consecutive-repeating-characters/)",
    "Solution": [
      [
        "C++",
        "C++/replace-all-s-to-avoid-consecutive-repeating-characters.cpp"
      ],
      [
        "Python",
        "Python/replace-all-s-to-avoid-consecutive-repeating-characters.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1577,
    "Title": "[Number of Ways Where Square of Number Is Equal to Product of Two Numbers](https://leetcode.com/problems/number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers.cpp"
      ],
      [
        "Python",
        "Python/number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1578,
    "Title": "[Minimum Deletion Cost to Avoid Repeating Letters](https://leetcode.com/problems/minimum-deletion-cost-to-avoid-repeating-letters/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-deletion-cost-to-avoid-repeating-letters.cpp"
      ],
      [
        "Python",
        "Python/minimum-deletion-cost-to-avoid-repeating-letters.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1579,
    "Title": "[Remove Max Number of Edges to Keep Graph Fully Traversable](https://leetcode.com/problems/remove-max-number-of-edges-to-keep-graph-fully-traversable/)",
    "Solution": [
      [
        "C++",
        "C++/remove-max-number-of-edges-to-keep-graph-fully-traversable.cpp"
      ],
      [
        "Python",
        "Python/remove-max-number-of-edges-to-keep-graph-fully-traversable.py"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Union Find"
  },
  {
    "Index": 1580,
    "Title": "[Put Boxes Into the Warehouse II](https://leetcode.com/problems/put-boxes-into-the-warehouse-ii/)",
    "Solution": [
      [
        "C++",
        "C++/put-boxes-into-the-warehouse-ii.cpp"
      ],
      [
        "Python",
        "Python/put-boxes-into-the-warehouse-ii.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 1581,
    "Title": "[Customer Who Visited but Did Not Make Any Transactions](https://leetcode.com/problems/customer-who-visited-but-did-not-make-any-transactions/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/customer-who-visited-but-did-not-make-any-transactions.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1582,
    "Title": "[Special Positions in a Binary Matrix](https://leetcode.com/problems/special-positions-in-a-binary-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/special-positions-in-a-binary-matrix.cpp"
      ],
      [
        "Python",
        "Python/special-positions-in-a-binary-matrix.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1583,
    "Title": "[Count Unhappy Friends](https://leetcode.com/problems/count-unhappy-friends/)",
    "Solution": [
      [
        "C++",
        "C++/count-unhappy-friends.cpp"
      ],
      [
        "Python",
        "Python/count-unhappy-friends.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1584,
    "Title": "[Min Cost to Connect All Points](https://leetcode.com/problems/min-cost-to-connect-all-points/)",
    "Solution": [
      [
        "C++",
        "C++/min-cost-to-connect-all-points.cpp"
      ],
      [
        "Python",
        "Python/min-cost-to-connect-all-points.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Union Find, `Kruskal's Algorithm`, MST"
  },
  {
    "Index": 1585,
    "Title": "[Check If String Is Transformable With Substring Sort Operations](https://leetcode.com/problems/check-if-string-is-transformable-with-substring-sort-operations/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-string-is-transformable-with-substring-sort-operations.cpp"
      ],
      [
        "Python",
        "Python/check-if-string-is-transformable-with-substring-sort-operations.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1586,
    "Title": "[Binary Search Tree Iterator II](https://leetcode.com/problems/binary-search-tree-iterator-ii/)",
    "Solution": [
      [
        "C++",
        "C++/binary-search-tree-iterator-ii.cpp"
      ],
      [
        "Python",
        "Python/binary-search-tree-iterator-ii.py"
      ]
    ],
    "Time": "_O(1)_, amortized",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 1587,
    "Title": "[Bank Account Summary II](https://leetcode.com/problems/bank-account-summary-ii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/bank-account-summary-ii.sql"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1588,
    "Title": "[Sum of All Odd Length Subarrays](https://leetcode.com/problems/sum-of-all-odd-length-subarrays/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-all-odd-length-subarrays.cpp"
      ],
      [
        "Python",
        "Python/sum-of-all-odd-length-subarrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1589,
    "Title": "[Maximum Sum Obtained of Any Permutation](https://leetcode.com/problems/maximum-sum-obtained-of-any-permutation/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-sum-obtained-of-any-permutation.cpp"
      ],
      [
        "Python",
        "Python/maximum-sum-obtained-of-any-permutation.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1590,
    "Title": "[Make Sum Divisible by P](https://leetcode.com/problems/make-sum-divisible-by-p/)",
    "Solution": [
      [
        "C++",
        "C++/make-sum-divisible-by-p.cpp"
      ],
      [
        "Python",
        "Python/make-sum-divisible-by-p.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(p)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Subarray Sums Divisible by K](https://leetcode.com/problems/subarray-sums-divisible-by-k/)"
  },
  {
    "Index": 1591,
    "Title": "[Strange Printer II](https://leetcode.com/problems/strange-printer-ii/)",
    "Solution": [
      [
        "C++",
        "C++/strange-printer-ii.cpp"
      ],
      [
        "Python",
        "Python/strange-printer-ii.py"
      ]
    ],
    "Time": "_O(c * m * n + e)_",
    "Space": "_O(e)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1592,
    "Title": "[Rearrange Spaces Between Words](https://leetcode.com/problems/rearrange-spaces-between-words/)",
    "Solution": [
      [
        "C++",
        "C++/rearrange-spaces-between-words.cpp"
      ],
      [
        "Python",
        "Python/rearrange-spaces-between-words.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Inplace"
  },
  {
    "Index": 1593,
    "Title": "[Split a String Into the Max Number of Unique Substrings](https://leetcode.com/problems/split-a-string-into-the-max-number-of-unique-substrings/)",
    "Solution": [
      [
        "C++",
        "C++/split-a-string-into-the-max-number-of-unique-substrings.cpp"
      ],
      [
        "Python",
        "Python/split-a-string-into-the-max-number-of-unique-substrings.py"
      ]
    ],
    "Time": "_O(n * 2^(n - 1))_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1594,
    "Title": "[Maximum Non Negative Product in a Matrix](https://leetcode.com/problems/maximum-non-negative-product-in-a-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-non-negative-product-in-a-matrix.cpp"
      ],
      [
        "Python",
        "Python/maximum-non-negative-product-in-a-matrix.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1595,
    "Title": "[Minimum Cost to Connect Two Groups of Points](https://leetcode.com/problems/minimum-cost-to-connect-two-groups-of-points/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-to-connect-two-groups-of-points.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-to-connect-two-groups-of-points.py"
      ]
    ],
    "Time": "_O(m * n * 2^n)_",
    "Space": "_O(2^n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1596,
    "Title": "[The Most Frequently Ordered Products for Each Customer](https://leetcode.com/problems/the-most-frequently-ordered-products-for-each-customer/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/the-most-frequently-ordered-products-for-each-customer.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1597,
    "Title": "[Build Binary Expression Tree From Infix Expression](https://leetcode.com/problems/build-binary-expression-tree-from-infix-expression/)",
    "Solution": [
      [
        "C++",
        "C++/build-binary-expression-tree-from-infix-expression.cpp"
      ],
      [
        "Python",
        "Python/build-binary-expression-tree-from-infix-expression.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒, variant of [Basic Calculator III](https://leetcode.com/problems/basic-calculator-iii/)"
  },
  {
    "Index": 1598,
    "Title": "[Crawler Log Folder](https://leetcode.com/problems/crawler-log-folder/)",
    "Solution": [
      [
        "C++",
        "C++/crawler-log-folder.cpp"
      ],
      [
        "Python",
        "Python/crawler-log-folder.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1599,
    "Title": "[Maximum Profit of Operating a Centennial Wheel](https://leetcode.com/problems/maximum-profit-of-operating-a-centennial-wheel/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-profit-of-operating-a-centennial-wheel.cpp"
      ],
      [
        "Python",
        "Python/maximum-profit-of-operating-a-centennial-wheel.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1600,
    "Title": "[Throne Inheritance](https://leetcode.com/problems/throne-inheritance/)",
    "Solution": [
      [
        "C++",
        "C++/throne-inheritance.cpp"
      ],
      [
        "Python",
        "Python/throne-inheritance.py"
      ]
    ],
    "Time": "ctor: _O(1)_<br>birth: _O(1)_<br>death: _O(1)_<br>inherit: _O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1601,
    "Title": "[Maximum Number of Achievable Transfer Requests](https://leetcode.com/problems/maximum-number-of-achievable-transfer-requests/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-achievable-transfer-requests.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-achievable-transfer-requests.py"
      ]
    ],
    "Time": "_O((n + r) * 2^r)_",
    "Space": "_O(n + r)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Combinations, Backtracking"
  },
  {
    "Index": 1602,
    "Title": "[Find Nearest Right Node in Binary Tree](https://leetcode.com/problems/find-nearest-right-node-in-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/find-nearest-right-node-in-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/find-nearest-right-node-in-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(w)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 1603,
    "Title": "[Design Parking System](https://leetcode.com/problems/design-parking-system/)",
    "Solution": [
      [
        "C++",
        "C++/design-parking-system.cpp"
      ],
      [
        "Python",
        "Python/design-parking-system.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1604,
    "Title": "[Alert Using Same Key-Card Three or More Times in a One Hour Period](https://leetcode.com/problems/alert-using-same-key-card-three-or-more-times-in-a-one-hour-period/)",
    "Solution": [
      [
        "C++",
        "C++/alert-using-same-key-card-three-or-more-times-in-a-one-hour-period.cpp"
      ],
      [
        "Python",
        "Python/alert-using-same-key-card-three-or-more-times-in-a-one-hour-period.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Two Pointers, Sliding Window"
  },
  {
    "Index": 1605,
    "Title": "[Find Valid Matrix Given Row and Column Sums](https://leetcode.com/problems/find-valid-matrix-given-row-and-column-sums/)",
    "Solution": [
      [
        "C++",
        "C++/find-valid-matrix-given-row-and-column-sums.cpp"
      ],
      [
        "Python",
        "Python/find-valid-matrix-given-row-and-column-sums.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1606,
    "Title": "[Find Servers That Handled Most Number of Requests](https://leetcode.com/problems/find-servers-that-handled-most-number-of-requests/)",
    "Solution": [
      [
        "C++",
        "C++/find-servers-that-handled-most-number-of-requests.cpp"
      ],
      [
        "Python",
        "Python/find-servers-that-handled-most-number-of-requests.py"
      ]
    ],
    "Time": "_O(nlogk)_",
    "Space": "_O(k)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Sorted List"
  },
  {
    "Index": 1607,
    "Title": "[Sellers With No Sales](https://leetcode.com/problems/sellers-with-no-sales/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/sellers-with-no-sales.sql"
      ]
    ],
    "Time": "_O(nlogm)_",
    "Space": "_O(n + m)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1608,
    "Title": "[Special Array With X Elements Greater Than or Equal X](https://leetcode.com/problems/special-array-with-x-elements-greater-than-or-equal-x/)",
    "Solution": [
      [
        "C++",
        "C++/special-array-with-x-elements-greater-than-or-equal-x.cpp"
      ],
      [
        "Python",
        "Python/special-array-with-x-elements-greater-than-or-equal-x.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "variant of [H-Index](https://leetcode.com/problems/h-index/)"
  },
  {
    "Index": 1609,
    "Title": "[Even Odd Tree](https://leetcode.com/problems/even-odd-tree/)",
    "Solution": [
      [
        "C++",
        "C++/even-odd-tree.cpp"
      ],
      [
        "Python",
        "Python/even-odd-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(w)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1610,
    "Title": "[Maximum Number of Visible Points](https://leetcode.com/problems/maximum-number-of-visible-points/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-visible-points.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-visible-points.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Two Pointers, Sliding Window"
  },
  {
    "Index": 1611,
    "Title": "[Minimum One Bit Operations to Make Integers Zero](https://leetcode.com/problems/minimum-one-bit-operations-to-make-integers-zero/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-one-bit-operations-to-make-integers-zero.cpp"
      ],
      [
        "Python",
        "Python/minimum-one-bit-operations-to-make-integers-zero.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Gray Code](https://leetcode.com/problems/gray-code/)"
  },
  {
    "Index": 1612,
    "Title": "[Check If Two Expression Trees are Equivalent](https://leetcode.com/problems/check-if-two-expression-trees-are-equivalent/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-two-expression-trees-are-equivalent.cpp"
      ],
      [
        "Python",
        "Python/check-if-two-expression-trees-are-equivalent.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "`Morris Traversal`, Inorder Traversal, Stack, Hash Table"
  },
  {
    "Index": 1613,
    "Title": "[Find the Missing IDs](https://leetcode.com/problems/find-the-missing-ids/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-the-missing-ids.sql"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1614,
    "Title": "[Maximum Nesting Depth of the Parentheses](https://leetcode.com/problems/maximum-nesting-depth-of-the-parentheses/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-nesting-depth-of-the-parentheses.cpp"
      ],
      [
        "Python",
        "Python/maximum-nesting-depth-of-the-parentheses.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1615,
    "Title": "[Maximal Network Rank](https://leetcode.com/problems/maximal-network-rank/)",
    "Solution": [
      [
        "C++",
        "C++/maximal-network-rank.cpp"
      ],
      [
        "Python",
        "Python/maximal-network-rank.py"
      ]
    ],
    "Time": "_O(m + n + k^2)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Counting Sort"
  },
  {
    "Index": 1616,
    "Title": "[Split Two Strings to Make Palindrome](https://leetcode.com/problems/split-two-strings-to-make-palindrome/)",
    "Solution": [
      [
        "C++",
        "C++/split-two-strings-to-make-palindrome.cpp"
      ],
      [
        "Python",
        "Python/split-two-strings-to-make-palindrome.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1617,
    "Title": "[Count Subtrees With Max Distance Between Cities](https://leetcode.com/problems/count-subtrees-with-max-distance-between-cities/)",
    "Solution": [
      [
        "C++",
        "C++/count-subtrees-with-max-distance-between-cities.cpp"
      ],
      [
        "Python",
        "Python/count-subtrees-with-max-distance-between-cities.py"
      ]
    ],
    "Time": "_O(n^6)_",
    "Space": "_O(n^3)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1618,
    "Title": "[Maximum Font to Fit a Sentence in a Screen](https://leetcode.com/problems/maximum-font-to-fit-a-sentence-in-a-screen/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-font-to-fit-a-sentence-in-a-screen.cpp"
      ],
      [
        "Python",
        "Python/maximum-font-to-fit-a-sentence-in-a-screen.py"
      ]
    ],
    "Time": "_O(n + logm)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 1619,
    "Title": "[Mean of Array After Removing Some Elements](https://leetcode.com/problems/mean-of-array-after-removing-some-elements/)",
    "Solution": [
      [
        "C++",
        "C++/mean-of-array-after-removing-some-elements.cpp"
      ],
      [
        "Python",
        "Python/mean-of-array-after-removing-some-elements.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1620,
    "Title": "[Coordinate With Maximum Network Quality](https://leetcode.com/problems/coordinate-with-maximum-network-quality/)",
    "Solution": [
      [
        "C++",
        "C++/coordinate-with-maximum-network-quality.cpp"
      ],
      [
        "Python",
        "Python/coordinate-with-maximum-network-quality.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1621,
    "Title": "[Number of Sets of K Non-Overlapping Line Segments](https://leetcode.com/problems/number-of-sets-of-k-non-overlapping-line-segments/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-sets-of-k-non-overlapping-line-segments.cpp"
      ],
      [
        "Python",
        "Python/number-of-sets-of-k-non-overlapping-line-segments.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1622,
    "Title": "[Fancy Sequence](https://leetcode.com/problems/fancy-sequence/)",
    "Solution": [
      [
        "C++",
        "C++/fancy-sequence.cpp"
      ],
      [
        "Python",
        "Python/fancy-sequence.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1623,
    "Title": "[All Valid Triplets That Can Represent a Country](https://leetcode.com/problems/all-valid-triplets-that-can-represent-a-country/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/all-valid-triplets-that-can-represent-a-country.sql"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(n^3)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1624,
    "Title": "[Largest Substring Between Two Equal Characters](https://leetcode.com/problems/largest-substring-between-two-equal-characters/)",
    "Solution": [
      [
        "C++",
        "C++/largest-substring-between-two-equal-characters.cpp"
      ],
      [
        "Python",
        "Python/largest-substring-between-two-equal-characters.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1625,
    "Title": "[Lexicographically Smallest String After Applying Operations](https://leetcode.com/problems/lexicographically-smallest-string-after-applying-operations/)",
    "Solution": [
      [
        "C++",
        "C++/lexicographically-smallest-string-after-applying-operations.cpp"
      ],
      [
        "Python",
        "Python/lexicographically-smallest-string-after-applying-operations.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1626,
    "Title": "[Best Team With No Conflicts](https://leetcode.com/problems/best-team-with-no-conflicts/)",
    "Solution": [
      [
        "C++",
        "C++/best-team-with-no-conflicts.cpp"
      ],
      [
        "Python",
        "Python/best-team-with-no-conflicts.py"
      ]
    ],
    "Time": "_O(nloga)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Longest Increasing Subsequence](https://leetcode.com/problems/longest-increasing-subsequence/)"
  },
  {
    "Index": 1627,
    "Title": "[Graph Connectivity With Threshold](https://leetcode.com/problems/graph-connectivity-with-threshold/)",
    "Solution": [
      [
        "C++",
        "C++/graph-connectivity-with-threshold.cpp"
      ],
      [
        "Python",
        "Python/graph-connectivity-with-threshold.py"
      ]
    ],
    "Time": "_O(nlogn + q)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Union Find, Math"
  },
  {
    "Index": 1628,
    "Title": "[Design an Expression Tree With Evaluate Function](https://leetcode.com/problems/design-an-expression-tree-with-evaluate-function/)",
    "Solution": [
      [
        "C++",
        "C++/design-an-expression-tree-with-evaluate-function.cpp"
      ],
      [
        "Python",
        "Python/design-an-expression-tree-with-evaluate-function.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 1629,
    "Title": "[Slowest Key](https://leetcode.com/problems/slowest-key/)",
    "Solution": [
      [
        "C++",
        "C++/slowest-key.cpp"
      ],
      [
        "Python",
        "Python/slowest-key.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1630,
    "Title": "[Arithmetic Subarrays](https://leetcode.com/problems/arithmetic-subarrays/)",
    "Solution": [
      [
        "C++",
        "C++/arithmetic-subarrays.cpp"
      ],
      [
        "Python",
        "Python/arithmetic-subarrays.py"
      ]
    ],
    "Time": "_O(n * q)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1631,
    "Title": "[Path With Minimum Effort](https://leetcode.com/problems/path-with-minimum-effort/)",
    "Solution": [
      [
        "C++",
        "C++/path-with-minimum-effort.cpp"
      ],
      [
        "Python",
        "Python/path-with-minimum-effort.py"
      ]
    ],
    "Time": "_O(m * n * log(m * n))_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Binary Search, DFS, BFS, Bi-BFS, Union Find, `Dijkstra's Algorithm`"
  },
  {
    "Index": 1632,
    "Title": "[Rank Transform of a Matrix](https://leetcode.com/problems/rank-transform-of-a-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/rank-transform-of-a-matrix.cpp"
      ],
      [
        "Python",
        "Python/rank-transform-of-a-matrix.py"
      ]
    ],
    "Time": "_O(m * n * log(m * n))_",
    "Space": "_O(m * n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1633,
    "Title": "[Percentage of Users Attended a Contest](https://leetcode.com/problems/percentage-of-users-attended-a-contest/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/percentage-of-users-attended-a-contest.sql"
      ]
    ],
    "Time": "_O(m + nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1634,
    "Title": "[Add Two Polynomials Represented as Linked Lists](https://leetcode.com/problems/add-two-polynomials-represented-as-linked-lists/)",
    "Solution": [
      [
        "C++",
        "C++/add-two-polynomials-represented-as-linked-lists.cpp"
      ],
      [
        "Python",
        "Python/add-two-polynomials-represented-as-linked-lists.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1635,
    "Title": "[Hopper Company Queries I](https://leetcode.com/problems/hopper-company-queries-i/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/hopper-company-queries-i.sql"
      ]
    ],
    "Time": "_O(d + r + tlogt)_",
    "Space": "_O(d + r + t)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1636,
    "Title": "[Sort Array by Increasing Frequency](https://leetcode.com/problems/sort-array-by-increasing-frequency/)",
    "Solution": [
      [
        "C++",
        "C++/sort-array-by-increasing-frequency.cpp"
      ],
      [
        "Python",
        "Python/sort-array-by-increasing-frequency.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1637,
    "Title": "[Widest Vertical Area Between Two Points Containing No Points](https://leetcode.com/problems/widest-vertical-area-between-two-points-containing-no-points/)",
    "Solution": [
      [
        "C++",
        "C++/widest-vertical-area-between-two-points-containing-no-points.cpp"
      ],
      [
        "Python",
        "Python/widest-vertical-area-between-two-points-containing-no-points.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1638,
    "Title": "[Count Substrings That Differ by One Character](https://leetcode.com/problems/count-substrings-that-differ-by-one-character/)",
    "Solution": [
      [
        "C++",
        "C++/count-substrings-that-differ-by-one-character.cpp"
      ],
      [
        "Python",
        "Python/count-substrings-that-differ-by-one-character.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Count Unique Characters of All Substrings of a Given String](https://leetcode.com/problems/count-unique-characters-of-all-substrings-of-a-given-string/)",
    "Note": "Tricky"
  },
  {
    "Index": 1639,
    "Title": "[Number of Ways to Form a Target String Given a Dictionary](https://leetcode.com/problems/number-of-ways-to-form-a-target-string-given-a-dictionary/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-ways-to-form-a-target-string-given-a-dictionary.cpp"
      ],
      [
        "Python",
        "Python/number-of-ways-to-form-a-target-string-given-a-dictionary.py"
      ]
    ],
    "Time": "_O(l * (w + n))_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1640,
    "Title": "[Check Array Formation Through Concatenation](https://leetcode.com/problems/check-array-formation-through-concatenation/)",
    "Solution": [
      [
        "C++",
        "C++/check-array-formation-through-concatenation.cpp"
      ],
      [
        "Python",
        "Python/check-array-formation-through-concatenation.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1641,
    "Title": "[Count Sorted Vowel Strings](https://leetcode.com/problems/count-sorted-vowel-strings/)",
    "Solution": [
      [
        "C++",
        "C++/count-sorted-vowel-strings.cpp"
      ],
      [
        "Python",
        "Python/count-sorted-vowel-strings.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1642,
    "Title": "[Furthest Building You Can Reach](https://leetcode.com/problems/furthest-building-you-can-reach/)",
    "Solution": [
      [
        "C++",
        "C++/furthest-building-you-can-reach.cpp"
      ],
      [
        "Python",
        "Python/furthest-building-you-can-reach.py"
      ]
    ],
    "Time": "_O(nlogk)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1643,
    "Title": "[Kth Smallest Instructions](https://leetcode.com/problems/kth-smallest-instructions/)",
    "Solution": [
      [
        "C++",
        "C++/kth-smallest-instructions.cpp"
      ],
      [
        "Python",
        "Python/kth-smallest-instructions.py"
      ]
    ],
    "Time": "_O((m + n)^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1644,
    "Title": "[Lowest Common Ancestor of a Binary Tree II](https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-ii/)",
    "Solution": [
      [
        "C++",
        "C++/lowest-common-ancestor-of-a-binary-tree-ii.cpp"
      ],
      [
        "Python",
        "Python/lowest-common-ancestor-of-a-binary-tree-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "DFS, Stack"
  },
  {
    "Index": 1645,
    "Title": "[Hopper Company Queries II](https://leetcode.com/problems/hopper-company-queries-ii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/hopper-company-queries-ii.sql"
      ]
    ],
    "Time": "_O(d + r + tlogt)_",
    "Space": "_O(d + r + t)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1646,
    "Title": "[Get Maximum in Generated Array](https://leetcode.com/problems/get-maximum-in-generated-array/)",
    "Solution": [
      [
        "C++",
        "C++/get-maximum-in-generated-array.cpp"
      ],
      [
        "Python",
        "Python/get-maximum-in-generated-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1647,
    "Title": "[Minimum Deletions to Make Character Frequencies Unique](https://leetcode.com/problems/minimum-deletions-to-make-character-frequencies-unique/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-deletions-to-make-character-frequencies-unique.cpp"
      ],
      [
        "Python",
        "Python/minimum-deletions-to-make-character-frequencies-unique.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1648,
    "Title": "[Sell Diminishing-Valued Colored Balls](https://leetcode.com/problems/sell-diminishing-valued-colored-balls/)",
    "Solution": [
      [
        "C++",
        "C++/sell-diminishing-valued-colored-balls.cpp"
      ],
      [
        "Python",
        "Python/sell-diminishing-valued-colored-balls.py"
      ]
    ],
    "Time": "_O(nlogm)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1649,
    "Title": "[Create Sorted Array through Instructions](https://leetcode.com/problems/create-sorted-array-through-instructions/)",
    "Solution": [
      [
        "C++",
        "C++/create-sorted-array-through-instructions.cpp"
      ],
      [
        "Python",
        "Python/create-sorted-array-through-instructions.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Count of Smaller Numbers After Self](https://leetcode.com/problems/count-of-smaller-numbers-after-self/)",
    "Note": "BIT, Fenwick Tree, Merge Sort"
  },
  {
    "Index": 1650,
    "Title": "[Lowest Common Ancestor of a Binary Tree III](https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-iii/)",
    "Solution": [
      [
        "C++",
        "C++/lowest-common-ancestor-of-a-binary-tree-iii.cpp"
      ],
      [
        "Python",
        "Python/lowest-common-ancestor-of-a-binary-tree-iii.py"
      ]
    ],
    "Time": "_O(h)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒, variant of [Intersection of Two Linked Lists](https://leetcode.com/problems/intersection-of-two-linked-lists/)"
  },
  {
    "Index": 1651,
    "Title": "[Hopper Company Queries III](https://leetcode.com/problems/hopper-company-queries-iii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/hopper-company-queries-iii.sql"
      ]
    ],
    "Time": "_O(d + r + tlogt)_",
    "Space": "_O(d + r + t)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1652,
    "Title": "[Defuse the Bomb](https://leetcode.com/problems/defuse-the-bomb/)",
    "Solution": [
      [
        "C++",
        "C++/defuse-the-bomb.cpp"
      ],
      [
        "Python",
        "Python/defuse-the-bomb.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1653,
    "Title": "[Minimum Deletions to Make String Balanced](https://leetcode.com/problems/minimum-deletions-to-make-string-balanced/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-deletions-to-make-string-balanced.cpp"
      ],
      [
        "Python",
        "Python/minimum-deletions-to-make-string-balanced.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1654,
    "Title": "[Minimum Jumps to Reach Home](https://leetcode.com/problems/minimum-jumps-to-reach-home/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-jumps-to-reach-home.cpp"
      ],
      [
        "Python",
        "Python/minimum-jumps-to-reach-home.py"
      ]
    ],
    "Time": "_O(max(x, max(forbidden)) + a + b)_",
    "Space": "_O(max(x, max(forbidden)) + a + b)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1655,
    "Title": "[Distribute Repeating Integers](https://leetcode.com/problems/distribute-repeating-integers/)",
    "Solution": [
      [
        "C++",
        "C++/distribute-repeating-integers.cpp"
      ],
      [
        "Python",
        "Python/distribute-repeating-integers.py"
      ]
    ],
    "Time": "_O(n + m * 3^m)_",
    "Space": "_O(n + 2^m)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1656,
    "Title": "[Design an Ordered Stream](https://leetcode.com/problems/design-an-ordered-stream/)",
    "Solution": [
      [
        "C++",
        "C++/design-an-ordered-stream.cpp"
      ],
      [
        "Python",
        "Python/design-an-ordered-stream.py"
      ]
    ],
    "Time": "_O(1)_, amortized",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1657,
    "Title": "[Determine if Two Strings Are Close](https://leetcode.com/problems/determine-if-two-strings-are-close/)",
    "Solution": [
      [
        "C++",
        "C++/determine-if-two-strings-are-close.cpp"
      ],
      [
        "Python",
        "Python/determine-if-two-strings-are-close.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1658,
    "Title": "[Minimum Operations to Reduce X to Zero](https://leetcode.com/problems/minimum-operations-to-reduce-x-to-zero/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-reduce-x-to-zero.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-reduce-x-to-zero.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Two Pointers"
  },
  {
    "Index": 1659,
    "Title": "[Maximize Grid Happiness](https://leetcode.com/problems/maximize-grid-happiness/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-grid-happiness.cpp"
      ],
      [
        "Python",
        "Python/maximize-grid-happiness.py"
      ]
    ],
    "Time": "_O(C(m * n, i) * C(m * n - i, e))_",
    "Space": "_O(min(m * n, i + e))_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Pruning"
  },
  {
    "Index": 1660,
    "Title": "[Correct a Binary Tree](https://leetcode.com/problems/correct-a-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/correct-a-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/correct-a-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(w)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 1661,
    "Title": "[Average Time of Process per Machine](https://leetcode.com/problems/average-time-of-process-per-machine/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/average-time-of-process-per-machine.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1662,
    "Title": "[Check If Two String Arrays are Equivalent](https://leetcode.com/problems/check-if-two-string-arrays-are-equivalent/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-two-string-arrays-are-equivalent.cpp"
      ],
      [
        "Python",
        "Python/check-if-two-string-arrays-are-equivalent.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1663,
    "Title": "[Smallest String With A Given Numeric Value](https://leetcode.com/problems/smallest-string-with-a-given-numeric-value/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-string-with-a-given-numeric-value.cpp"
      ],
      [
        "Python",
        "Python/smallest-string-with-a-given-numeric-value.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1664,
    "Title": "[Ways to Make a Fair Array](https://leetcode.com/problems/ways-to-make-a-fair-array/)",
    "Solution": [
      [
        "C++",
        "C++/ways-to-make-a-fair-array.cpp"
      ],
      [
        "Python",
        "Python/ways-to-make-a-fair-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1665,
    "Title": "[Minimum Initial Energy to Finish Tasks](https://leetcode.com/problems/minimum-initial-energy-to-finish-tasks/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-initial-energy-to-finish-tasks.cpp"
      ],
      [
        "Python",
        "Python/minimum-initial-energy-to-finish-tasks.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1666,
    "Title": "[Change the Root of a Binary Tree](https://leetcode.com/problems/change-the-root-of-a-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/change-the-root-of-a-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/change-the-root-of-a-binary-tree.py"
      ]
    ],
    "Time": "_O(h)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1667,
    "Title": "[Fix Names in a Table](https://leetcode.com/problems/fix-names-in-a-table/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/fix-names-in-a-table.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1668,
    "Title": "[Maximum Repeating Substring](https://leetcode.com/problems/maximum-repeating-substring/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-repeating-substring.cpp"
      ],
      [
        "Python",
        "Python/maximum-repeating-substring.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(m)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "`KMP Algorithm`"
  },
  {
    "Index": 1669,
    "Title": "[Merge In Between Linked Lists](https://leetcode.com/problems/merge-in-between-linked-lists/)",
    "Solution": [
      [
        "C++",
        "C++/merge-in-between-linked-lists.cpp"
      ],
      [
        "Python",
        "Python/merge-in-between-linked-lists.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1670,
    "Title": "[Design Front Middle Back Queue](https://leetcode.com/problems/design-front-middle-back-queue/)",
    "Solution": [
      [
        "C++",
        "C++/design-front-middle-back-queue.cpp"
      ],
      [
        "Python",
        "Python/design-front-middle-back-queue.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1671,
    "Title": "[Minimum Number of Removals to Make Mountain Array](https://leetcode.com/problems/minimum-number-of-removals-to-make-mountain-array/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-removals-to-make-mountain-array.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-removals-to-make-mountain-array.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Longest Increasing Subsequence](https://leetcode.com/problems/longest-increasing-subsequence/)",
    "Note": "Binary Search, DP"
  },
  {
    "Index": 1672,
    "Title": "[Richest Customer Wealth](https://leetcode.com/problems/richest-customer-wealth/)",
    "Solution": [
      [
        "C++",
        "C++/richest-customer-wealth.cpp"
      ],
      [
        "Python",
        "Python/richest-customer-wealth.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1673,
    "Title": "[Find the Most Competitive Subsequence](https://leetcode.com/problems/find-the-most-competitive-subsequence/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-most-competitive-subsequence.cpp"
      ],
      [
        "Python",
        "Python/find-the-most-competitive-subsequence.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(k)_",
    "Difficulty": "Meidum",
    "Tag": 0
  },
  {
    "Index": 1674,
    "Title": "[Minimum Moves to Make Array Complementary](https://leetcode.com/problems/minimum-moves-to-make-array-complementary/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-moves-to-make-array-complementary.cpp"
      ],
      [
        "Python",
        "Python/minimum-moves-to-make-array-complementary.py"
      ]
    ],
    "Time": "_O(n + k)_",
    "Space": "_O(k)_",
    "Difficulty": "Meidum",
    "Tag": 0
  },
  {
    "Index": 1675,
    "Title": "[Minimize Deviation in Array](https://leetcode.com/problems/minimize-deviation-in-array/)",
    "Solution": [
      [
        "C++",
        "C++/minimize-deviation-in-array.cpp"
      ],
      [
        "Python",
        "Python/minimize-deviation-in-array.py"
      ]
    ],
    "Time": "_O((n * log(max_num)) * logn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1676,
    "Title": "[Lowest Common Ancestor of a Binary Tree IV](https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-iv/)",
    "Solution": [
      [
        "C++",
        "C++/lowest-common-ancestor-of-a-binary-tree-iv.cpp"
      ],
      [
        "Python",
        "Python/lowest-common-ancestor-of-a-binary-tree-iv.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "DFS, Stack"
  },
  {
    "Index": 1677,
    "Title": "[Product's Worth Over Invoices](https://leetcode.com/problems/products-worth-over-invoices/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/products-worth-over-invoices.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1678,
    "Title": "[Goal Parser Interpretation](https://leetcode.com/problems/goal-parser-interpretation/)",
    "Solution": [
      [
        "C++",
        "C++/goal-parser-interpretation.cpp"
      ],
      [
        "Python",
        "Python/goal-parser-interpretation.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1679,
    "Title": "[Max Number of K-Sum Pairs](https://leetcode.com/problems/max-number-of-k-sum-pairs/)",
    "Solution": [
      [
        "C++",
        "C++/max-number-of-k-sum-pairs.cpp"
      ],
      [
        "Python",
        "Python/max-number-of-k-sum-pairs.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1680,
    "Title": "[Concatenation of Consecutive Binary Numbers](https://leetcode.com/problems/concatenation-of-consecutive-binary-numbers/)",
    "Solution": [
      [
        "C++",
        "C++/concatenation-of-consecutive-binary-numbers.cpp"
      ],
      [
        "Python",
        "Python/concatenation-of-consecutive-binary-numbers.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1681,
    "Title": "[Minimum Incompatibility](https://leetcode.com/problems/minimum-incompatibility/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-incompatibility.cpp"
      ],
      [
        "Python",
        "Python/minimum-incompatibility.py"
      ]
    ],
    "Time": "_O(max(n * 2^n, 3^n))_",
    "Space": "_O(2^n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1682,
    "Title": "[Longest Palindromic Subsequence II](https://leetcode.com/problems/longest-palindromic-subsequence-ii/)",
    "Solution": [
      [
        "C++",
        "C++/longest-palindromic-subsequence-ii.cpp"
      ],
      [
        "Python",
        "Python/longest-palindromic-subsequence-ii.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1683,
    "Title": "[Invalid Tweets](https://leetcode.com/problems/invalid-tweets/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/invalid-tweets.sql"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(n * l)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1684,
    "Title": "[Count the Number of Consistent Strings](https://leetcode.com/problems/count-the-number-of-consistent-strings/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-number-of-consistent-strings.cpp"
      ],
      [
        "Python",
        "Python/count-the-number-of-consistent-strings.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1685,
    "Title": "[Sum of Absolute Differences in a Sorted Array](https://leetcode.com/problems/sum-of-absolute-differences-in-a-sorted-array/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-absolute-differences-in-a-sorted-array.cpp"
      ],
      [
        "Python",
        "Python/sum-of-absolute-differences-in-a-sorted-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1686,
    "Title": "[Stone Game VI](https://leetcode.com/problems/stone-game-vi/)",
    "Solution": [
      [
        "C++",
        "C++/stone-game-vi.cpp"
      ],
      [
        "Python",
        "Python/stone-game-vi.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1687,
    "Title": "[Delivering Boxes from Storage to Ports](https://leetcode.com/problems/delivering-boxes-from-storage-to-ports/)",
    "Solution": [
      [
        "C++",
        "C++/delivering-boxes-from-storage-to-ports.cpp"
      ],
      [
        "Python",
        "Python/delivering-boxes-from-storage-to-ports.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Two Pointers, Sliding Window"
  },
  {
    "Index": 1688,
    "Title": "[Count of Matches in Tournament](https://leetcode.com/problems/count-of-matches-in-tournament/)",
    "Solution": [
      [
        "C++",
        "C++/count-of-matches-in-tournament.cpp"
      ],
      [
        "Python",
        "Python/count-of-matches-in-tournament.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1689,
    "Title": "[Partitioning Into Minimum Number Of Deci-Binary Numbers](https://leetcode.com/problems/partitioning-into-minimum-number-of-deci-binary-numbers/)",
    "Solution": [
      [
        "C++",
        "C++/partitioning-into-minimum-number-of-deci-binary-numbers.cpp"
      ],
      [
        "Python",
        "Python/partitioning-into-minimum-number-of-deci-binary-numbers.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1690,
    "Title": "[Stone Game VII](https://leetcode.com/problems/stone-game-vii/)",
    "Solution": [
      [
        "C++",
        "C++/stone-game-vii.cpp"
      ],
      [
        "Python",
        "Python/stone-game-vii.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1691,
    "Title": "[Maximum Height by Stacking Cuboids](https://leetcode.com/problems/maximum-height-by-stacking-cuboids/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-height-by-stacking-cuboids.cpp"
      ],
      [
        "Python",
        "Python/maximum-height-by-stacking-cuboids.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1692,
    "Title": "[Count Ways to Distribute Candies](https://leetcode.com/problems/count-ways-to-distribute-candies/)",
    "Solution": [
      [
        "C++",
        "C++/count-ways-to-distribute-candies.cpp"
      ],
      [
        "Python",
        "Python/count-ways-to-distribute-candies.py"
      ]
    ],
    "Time": "_O(n * k)_",
    "Space": "_O(k)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1693,
    "Title": "[Daily Leads and Partners](https://leetcode.com/problems/daily-leads-and-partners/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/daily-leads-and-partners.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1694,
    "Title": "[Reformat Phone Number](https://leetcode.com/problems/reformat-phone-number/)",
    "Solution": [
      [
        "C++",
        "C++/reformat-phone-number.cpp"
      ],
      [
        "Python",
        "Python/reformat-phone-number.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Inplace"
  },
  {
    "Index": 1695,
    "Title": "[Maximum Erasure Value](https://leetcode.com/problems/maximum-erasure-value/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-erasure-value.cpp"
      ],
      [
        "Python",
        "Python/maximum-erasure-value.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Two Pointers, Sliding Window"
  },
  {
    "Index": 1696,
    "Title": "[Jump Game VI](https://leetcode.com/problems/jump-game-vi/)",
    "Solution": [
      [
        "C++",
        "C++/jump-game-vi.cpp"
      ],
      [
        "Python",
        "Python/jump-game-vi.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Mono Deque, Sliding Window"
  },
  {
    "Index": 1697,
    "Title": "[Checking Existence of Edge Length Limited Paths](https://leetcode.com/problems/checking-existence-of-edge-length-limited-paths/)",
    "Solution": [
      [
        "C++",
        "C++/checking-existence-of-edge-length-limited-paths.cpp"
      ],
      [
        "Python",
        "Python/checking-existence-of-edge-length-limited-paths.py"
      ]
    ],
    "Time": "_O(nlogn + mlogm)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Union Find"
  },
  {
    "Index": 1698,
    "Title": "[Number of Distinct Substrings in a String](https://leetcode.com/problems/number-of-distinct-substrings-in-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-distinct-substrings-in-a-string.cpp"
      ],
      [
        "Python",
        "Python/number-of-distinct-substrings-in-a-string.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(t)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Trie"
  },
  {
    "Index": 1699,
    "Title": "[Number of Calls Between Two Persons](https://leetcode.com/problems/number-of-calls-between-two-persons/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/number-of-calls-between-two-persons.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1700,
    "Title": "[Number of Students Unable to Eat Lunch](https://leetcode.com/problems/number-of-students-unable-to-eat-lunch/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-students-unable-to-eat-lunch.cpp"
      ],
      [
        "Python",
        "Python/number-of-students-unable-to-eat-lunch.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1701,
    "Title": "[Average Waiting Time](https://leetcode.com/problems/average-waiting-time/)",
    "Solution": [
      [
        "C++",
        "C++/average-waiting-time.cpp"
      ],
      [
        "Python",
        "Python/average-waiting-time.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1702,
    "Title": "[Maximum Binary String After Change](https://leetcode.com/problems/maximum-binary-string-after-change/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-binary-string-after-change.cpp"
      ],
      [
        "Python",
        "Python/maximum-binary-string-after-change.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1703,
    "Title": "[Minimum Adjacent Swaps for K Consecutive Ones](https://leetcode.com/problems/minimum-adjacent-swaps-for-k-consecutive-ones/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-adjacent-swaps-for-k-consecutive-ones.cpp"
      ],
      [
        "Python",
        "Python/minimum-adjacent-swaps-for-k-consecutive-ones.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1704,
    "Title": "[Determine if String Halves Are Alike](https://leetcode.com/problems/determine-if-string-halves-are-alike/)",
    "Solution": [
      [
        "C++",
        "C++/determine-if-string-halves-are-alike.cpp"
      ],
      [
        "Python",
        "Python/determine-if-string-halves-are-alike.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1705,
    "Title": "[Maximum Number of Eaten Apples](https://leetcode.com/problems/maximum-number-of-eaten-apples/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-eaten-apples.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-eaten-apples.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1706,
    "Title": "[Where Will the Ball Fall](https://leetcode.com/problems/where-will-the-ball-fall/)",
    "Solution": [
      [
        "C++",
        "C++/where-will-the-ball-fall.cpp"
      ],
      [
        "Python",
        "Python/where-will-the-ball-fall.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1707,
    "Title": "[Maximum XOR With an Element From Array](https://leetcode.com/problems/maximum-xor-with-an-element-from-array/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-xor-with-an-element-from-array.cpp"
      ],
      [
        "Python",
        "Python/maximum-xor-with-an-element-from-array.py"
      ]
    ],
    "Time": "_O(nlogn + mlogm + nlogk + mlogk)_",
    "Space": "_O(nlogk)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Maximum XOR of Two Numbers in an Array](https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/)"
  },
  {
    "Index": 1708,
    "Title": "[Largest Subarray Length K](https://leetcode.com/problems/largest-subarray-length-k/)",
    "Solution": [
      [
        "C++",
        "C++/largest-subarray-length-k.cpp"
      ],
      [
        "Python",
        "Python/largest-subarray-length-k.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒, variant of [Last Substring in Lexicographical Order](https://leetcode.com/problems/last-substring-in-lexicographical-order/)",
    "Note": 0
  },
  {
    "Index": 1709,
    "Title": "[Biggest Window Between Visits](https://leetcode.com/problems/biggest-window-between-visits/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/biggest-window-between-visits.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1710,
    "Title": "[Maximum Units on a Truck](https://leetcode.com/problems/maximum-units-on-a-truck/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-units-on-a-truck.cpp"
      ],
      [
        "Python",
        "Python/maximum-units-on-a-truck.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1711,
    "Title": "[Count Good Meals](https://leetcode.com/problems/count-good-meals/)",
    "Solution": [
      [
        "C++",
        "C++/count-good-meals.cpp"
      ],
      [
        "Python",
        "Python/count-good-meals.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1712,
    "Title": "[Ways to Split Array Into Three Subarrays](https://leetcode.com/problems/ways-to-split-array-into-three-subarrays/)",
    "Solution": [
      [
        "C++",
        "C++/ways-to-split-array-into-three-subarrays.cpp"
      ],
      [
        "Python",
        "Python/ways-to-split-array-into-three-subarrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Two Pointers, Prefix Sum"
  },
  {
    "Index": 1713,
    "Title": "[Minimum Operations to Make a Subsequence](https://leetcode.com/problems/minimum-operations-to-make-a-subsequence/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-make-a-subsequence.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-make-a-subsequence.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Longest Increasing Subsequence](https://leetcode.com/problems/longest-increasing-subsequence/)",
    "Note": "Binary Search, Segment Tree"
  },
  {
    "Index": 1714,
    "Title": "[Sum Of Special Evenly-Spaced Elements In Array](https://leetcode.com/problems/sum-of-special-evenly-spaced-elements-in-array/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-special-evenly-spaced-elements-in-array.cpp"
      ],
      [
        "Python",
        "Python/sum-of-special-evenly-spaced-elements-in-array.py"
      ]
    ],
    "Time": "_O(n * sqrt(n))_",
    "Space": "_O(n * sqrt(n))_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 1715,
    "Title": "[Count Apples and Oranges](https://leetcode.com/problems/count-apples-and-oranges/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/count-apples-and-oranges.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1716,
    "Title": "[Calculate Money in Leetcode Bank](https://leetcode.com/problems/calculate-money-in-leetcode-bank/)",
    "Solution": [
      [
        "C++",
        "C++/calculate-money-in-leetcode-bank.cpp"
      ],
      [
        "Python",
        "Python/calculate-money-in-leetcode-bank.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1717,
    "Title": "[Maximum Score From Removing Substrings](https://leetcode.com/problems/maximum-score-from-removing-substrings/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-score-from-removing-substrings.cpp"
      ],
      [
        "Python",
        "Python/maximum-score-from-removing-substrings.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1718,
    "Title": "[Construct the Lexicographically Largest Valid Sequence](https://leetcode.com/problems/construct-the-lexicographically-largest-valid-sequence/)",
    "Solution": [
      [
        "C++",
        "C++/construct-the-lexicographically-largest-valid-sequence.cpp"
      ],
      [
        "Python",
        "Python/construct-the-lexicographically-largest-valid-sequence.py"
      ]
    ],
    "Time": "_O(n!)_",
    "Space": "_O(b)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Backtracking"
  },
  {
    "Index": 1719,
    "Title": "[Number Of Ways To Reconstruct A Tree](https://leetcode.com/problems/number-of-ways-to-reconstruct-a-tree/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-ways-to-reconstruct-a-tree.cpp"
      ],
      [
        "Python",
        "Python/number-of-ways-to-reconstruct-a-tree.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1720,
    "Title": "[Decode XORed Array](https://leetcode.com/problems/decode-xored-array/)",
    "Solution": [
      [
        "C++",
        "C++/decode-xored-array.cpp"
      ],
      [
        "Python",
        "Python/decode-xored-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1721,
    "Title": "[Swapping Nodes in a Linked List](https://leetcode.com/problems/swapping-nodes-in-a-linked-list/)",
    "Solution": [
      [
        "C++",
        "C++/swapping-nodes-in-a-linked-list.cpp"
      ],
      [
        "Python",
        "Python/swapping-nodes-in-a-linked-list.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1722,
    "Title": "[Minimize Hamming Distance After Swap Operations](https://leetcode.com/problems/minimize-hamming-distance-after-swap-operations/)",
    "Solution": [
      [
        "C++",
        "C++/minimize-hamming-distance-after-swap-operations.cpp"
      ],
      [
        "Python",
        "Python/minimize-hamming-distance-after-swap-operations.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Flood Fill, Union Find"
  },
  {
    "Index": 1723,
    "Title": "[Find Minimum Time to Finish All Jobs](https://leetcode.com/problems/find-minimum-time-to-finish-all-jobs/)",
    "Solution": [
      [
        "C++",
        "C++/find-minimum-time-to-finish-all-jobs.cpp"
      ],
      [
        "Python",
        "Python/find-minimum-time-to-finish-all-jobs.py"
      ]
    ],
    "Time": "_O(k^n * logr)_",
    "Space": "_O(n + k)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Backtracking, Pruning, Binary Search"
  },
  {
    "Index": 1724,
    "Title": "[Checking Existence of Edge Length Limited Paths II](https://leetcode.com/problems/checking-existence-of-edge-length-limited-paths-ii/)",
    "Solution": [
      [
        "C++",
        "C++/checking-existence-of-edge-length-limited-paths-ii.cpp"
      ],
      [
        "Python",
        "Python/checking-existence-of-edge-length-limited-paths-ii.py"
      ]
    ],
    "Time": "ctor: _O(nlogn + mlogm)_<br>query: _O(logn)_",
    "Space": "_O(nlogn + m)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Versioned Union Find, Binary Lifting"
  },
  {
    "Index": 1725,
    "Title": "[Number Of Rectangles That Can Form The Largest Square](https://leetcode.com/problems/number-of-rectangles-that-can-form-the-largest-square/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-rectangles-that-can-form-the-largest-square.cpp"
      ],
      [
        "Python",
        "Python/number-of-rectangles-that-can-form-the-largest-square.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1726,
    "Title": "[Tuple with Same Product](https://leetcode.com/problems/tuple-with-same-product/)",
    "Solution": [
      [
        "C++",
        "C++/tuple-with-same-product.cpp"
      ],
      [
        "Python",
        "Python/tuple-with-same-product.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1727,
    "Title": "[Largest Submatrix With Rearrangements](https://leetcode.com/problems/largest-submatrix-with-rearrangements/)",
    "Solution": [
      [
        "C++",
        "C++/largest-submatrix-with-rearrangements.cpp"
      ],
      [
        "Python",
        "Python/largest-submatrix-with-rearrangements.py"
      ]
    ],
    "Time": "_O(m * nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Sort"
  },
  {
    "Index": 1728,
    "Title": "[Cat and Mouse II](https://leetcode.com/problems/cat-and-mouse-ii/)",
    "Solution": [
      [
        "C++",
        "C++/cat-and-mouse-ii.cpp"
      ],
      [
        "Python",
        "Python/cat-and-mouse-ii.py"
      ]
    ],
    "Time": "_O((m * n)^2 * (m + n))_",
    "Space": "_O((m * n)^2)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Cat and Mouse](https://leetcode.com/problems/cat-and-mouse/)",
    "Note": "MiniMax, Topological Sort"
  },
  {
    "Index": 1729,
    "Title": "[Find Followers Count](https://leetcode.com/problems/find-followers-count/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-followers-count.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1730,
    "Title": "[Shortest Path to Get Food](https://leetcode.com/problems/shortest-path-to-get-food/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-path-to-get-food.cpp"
      ],
      [
        "Python",
        "Python/shortest-path-to-get-food.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 1731,
    "Title": "[The Number of Employees Which Report to Each Employee](https://leetcode.com/problems/the-number-of-employees-which-report-to-each-employee/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/the-number-of-employees-which-report-to-each-employee.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1732,
    "Title": "[Find the Highest Altitude](https://leetcode.com/problems/find-the-highest-altitude/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-highest-altitude.cpp"
      ],
      [
        "Python",
        "Python/find-the-highest-altitude.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1733,
    "Title": "[Minimum Number of People to Teach](https://leetcode.com/problems/minimum-number-of-people-to-teach/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-people-to-teach.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-people-to-teach.py"
      ]
    ],
    "Time": "_O(n * m^2)_",
    "Space": "_O(n * m)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1734,
    "Title": "[Decode XORed Permutation](https://leetcode.com/problems/decode-xored-permutation/)",
    "Solution": [
      [
        "C++",
        "C++/decode-xored-permutation.cpp"
      ],
      [
        "Python",
        "Python/decode-xored-permutation.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1735,
    "Title": "[Count Ways to Make Array With Product](https://leetcode.com/problems/count-ways-to-make-array-with-product/)",
    "Solution": [
      [
        "C++",
        "C++/count-ways-to-make-array-with-product.cpp"
      ],
      [
        "Python",
        "Python/count-ways-to-make-array-with-product.py"
      ]
    ],
    "Time": "_O(sqrt(m) + n + q * (logm + sqrt(m)/log(sqrt(m))))_",
    "Space": "_O(sqrt(m) + n + logm)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1736,
    "Title": "[Latest Time by Replacing Hidden Digits](https://leetcode.com/problems/latest-time-by-replacing-hidden-digits/)",
    "Solution": [
      [
        "C++",
        "C++/latest-time-by-replacing-hidden-digits.cpp"
      ],
      [
        "Python",
        "Python/latest-time-by-replacing-hidden-digits.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1737,
    "Title": "[Change Minimum Characters to Satisfy One of Three Conditions](https://leetcode.com/problems/change-minimum-characters-to-satisfy-one-of-three-conditions/)",
    "Solution": [
      [
        "C++",
        "C++/change-minimum-characters-to-satisfy-one-of-three-conditions.cpp"
      ],
      [
        "Python",
        "Python/change-minimum-characters-to-satisfy-one-of-three-conditions.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Prefix Sum"
  },
  {
    "Index": 1738,
    "Title": "[Find Kth Largest XOR Coordinate Value](https://leetcode.com/problems/find-kth-largest-xor-coordinate-value/)",
    "Solution": [
      [
        "C++",
        "C++/find-kth-largest-xor-coordinate-value.cpp"
      ],
      [
        "Python",
        "Python/find-kth-largest-xor-coordinate-value.py"
      ]
    ],
    "Time": "_O(m * n)_ on average",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1739,
    "Title": "[Building Boxes](https://leetcode.com/problems/building-boxes/)",
    "Solution": [
      [
        "C++",
        "C++/building-boxes.cpp"
      ],
      [
        "Python",
        "Python/building-boxes.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1740,
    "Title": "[Find Distance in a Binary Tree](https://leetcode.com/problems/find-distance-in-a-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/find-distance-in-a-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/find-distance-in-a-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Lowest Common Ancestor of a Binary Tree](https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/), 🔒",
    "Note": 0
  },
  {
    "Index": 1741,
    "Title": "[Find Total Time Spent by Each Employee](https://leetcode.com/problems/find-total-time-spent-by-each-employee/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-total-time-spent-by-each-employee.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1742,
    "Title": "[Maximum Number of Balls in a Box](https://leetcode.com/problems/maximum-number-of-balls-in-a-box/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-balls-in-a-box.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-balls-in-a-box.py"
      ]
    ],
    "Time": "_O(nlogm)_",
    "Space": "_O(logm)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1743,
    "Title": "[Restore the Array From Adjacent Pairs](https://leetcode.com/problems/restore-the-array-from-adjacent-pairs/)",
    "Solution": [
      [
        "C++",
        "C++/restore-the-array-from-adjacent-pairs.cpp"
      ],
      [
        "Python",
        "Python/restore-the-array-from-adjacent-pairs.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1744,
    "Title": "[Can You Eat Your Favorite Candy on Your Favorite Day?](https://leetcode.com/problems/can-you-eat-your-favorite-candy-on-your-favorite-day/)",
    "Solution": [
      [
        "C++",
        "C++/can-you-eat-your-favorite-candy-on-your-favorite-day.cpp"
      ],
      [
        "Python",
        "Python/can-you-eat-your-favorite-candy-on-your-favorite-day.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1745,
    "Title": "[Palindrome Partitioning IV](https://leetcode.com/problems/palindrome-partitioning-iv/)",
    "Solution": [
      [
        "C++",
        "C++/palindrome-partitioning-iv.cpp"
      ],
      [
        "Python",
        "Python/palindrome-partitioning-iv.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "DP, `Manacher's Algorithm`"
  },
  {
    "Index": 1746,
    "Title": "[Maximum Subarray Sum After One Operation](https://leetcode.com/problems/maximum-subarray-sum-after-one-operation/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-subarray-sum-after-one-operation.cpp"
      ],
      [
        "Python",
        "Python/maximum-subarray-sum-after-one-operation.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Maximum Subarray](https://leetcode.com/problems/maximum-subarray/), 🔒"
  },
  {
    "Index": 1747,
    "Title": "[Leetflex Banned Accounts](https://leetcode.com/problems/leetflex-banned-accounts/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/leetflex-banned-accounts.sql"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1748,
    "Title": "[Sum of Unique Elements](https://leetcode.com/problems/sum-of-unique-elements/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-unique-elements.cpp"
      ],
      [
        "Python",
        "Python/sum-of-unique-elements.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1749,
    "Title": "[Maximum Absolute Sum of Any Subarray](https://leetcode.com/problems/maximum-absolute-sum-of-any-subarray/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-absolute-sum-of-any-subarray.cpp"
      ],
      [
        "Python",
        "Python/maximum-absolute-sum-of-any-subarray.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Maximum Subarray](https://leetcode.com/problems/maximum-subarray/)",
    "Note": "Prefix Sum"
  },
  {
    "Index": 1750,
    "Title": "[Minimum Length of String After Deleting Similar Ends](https://leetcode.com/problems/minimum-length-of-string-after-deleting-similar-ends/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-length-of-string-after-deleting-similar-ends.cpp"
      ],
      [
        "Python",
        "Python/minimum-length-of-string-after-deleting-similar-ends.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Two Pointers"
  },
  {
    "Index": 1751,
    "Title": "[Maximum Number of Events That Can Be Attended II](https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended-ii/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-events-that-can-be-attended-ii.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-events-that-can-be-attended-ii.py"
      ]
    ],
    "Time": "_O(nlogn + n * k)_",
    "Space": "_O(n * k)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1752,
    "Title": "[Check if Array Is Sorted and Rotated](https://leetcode.com/problems/check-if-array-is-sorted-and-rotated/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-array-is-sorted-and-rotated.cpp"
      ],
      [
        "Python",
        "Python/check-if-array-is-sorted-and-rotated.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1753,
    "Title": "[Maximum Score From Removing Stones](https://leetcode.com/problems/maximum-score-from-removing-stones/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-score-from-removing-stones.cpp"
      ],
      [
        "Python",
        "Python/maximum-score-from-removing-stones.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1754,
    "Title": "[Largest Merge Of Two Strings](https://leetcode.com/problems/largest-merge-of-two-strings/)",
    "Solution": [
      [
        "C++",
        "C++/largest-merge-of-two-strings.cpp"
      ],
      [
        "Python",
        "Python/largest-merge-of-two-strings.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1755,
    "Title": "[Closest Subsequence Sum](https://leetcode.com/problems/closest-subsequence-sum/)",
    "Solution": [
      [
        "C++",
        "C++/closest-subsequence-sum.cpp"
      ],
      [
        "Python",
        "Python/closest-subsequence-sum.py"
      ]
    ],
    "Time": "_O(n * 2^(n/2))_",
    "Space": "_O(2^(n/2))_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1756,
    "Title": "[Design Most Recently Used Queue](https://leetcode.com/problems/design-most-recently-used-queue/)",
    "Solution": [
      [
        "C++",
        "C++/design-most-recently-used-queue.cpp"
      ],
      [
        "Python",
        "Python/design-most-recently-used-queue.py"
      ]
    ],
    "Time": "ctor: _O(nlogn)_<br>fetch: _O(logn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 1757,
    "Title": "[Recyclable and Low Fat Products](https://leetcode.com/problems/recyclable-and-low-fat-products/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/recyclable-and-low-fat-products.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1758,
    "Title": "[Minimum Changes To Make Alternating Binary String](https://leetcode.com/problems/minimum-changes-to-make-alternating-binary-string/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-changes-to-make-alternating-binary-string.cpp"
      ],
      [
        "Python",
        "Python/minimum-changes-to-make-alternating-binary-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1759,
    "Title": "[Count Number of Homogenous Substrings](https://leetcode.com/problems/count-number-of-homogenous-substrings/)",
    "Solution": [
      [
        "C++",
        "C++/count-number-of-homogenous-substrings.cpp"
      ],
      [
        "Python",
        "Python/count-number-of-homogenous-substrings.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1760,
    "Title": "[Minimum Limit of Balls in a Bag](https://leetcode.com/problems/minimum-limit-of-balls-in-a-bag/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-limit-of-balls-in-a-bag.cpp"
      ],
      [
        "Python",
        "Python/minimum-limit-of-balls-in-a-bag.py"
      ]
    ],
    "Time": "_O(nlogm)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1761,
    "Title": "[Minimum Degree of a Connected Trio in a Graph](https://leetcode.com/problems/minimum-degree-of-a-connected-trio-in-a-graph/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-degree-of-a-connected-trio-in-a-graph.cpp"
      ],
      [
        "Python",
        "Python/minimum-degree-of-a-connected-trio-in-a-graph.py"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1762,
    "Title": "[Buildings With an Ocean View](https://leetcode.com/problems/buildings-with-an-ocean-view/)",
    "Solution": [
      [
        "C++",
        "C++/buildings-with-an-ocean-view.cpp"
      ],
      [
        "Python",
        "Python/buildings-with-an-ocean-view.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1763,
    "Title": "[Longest Nice Substring](https://leetcode.com/problems/longest-nice-substring/)",
    "Solution": [
      [
        "C++",
        "C++/longest-nice-substring.cpp"
      ],
      [
        "Python",
        "Python/longest-nice-substring.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1764,
    "Title": "[Form Array by Concatenating Subarrays of Another Array](https://leetcode.com/problems/form-array-by-concatenating-subarrays-of-another-array/)",
    "Solution": [
      [
        "C++",
        "C++/form-array-by-concatenating-subarrays-of-another-array.cpp"
      ],
      [
        "Python",
        "Python/form-array-by-concatenating-subarrays-of-another-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "`KMP Algorithm`"
  },
  {
    "Index": 1765,
    "Title": "[Map of Highest Peak](https://leetcode.com/problems/map-of-highest-peak/)",
    "Solution": [
      [
        "C++",
        "C++/map-of-highest-peak.cpp"
      ],
      [
        "Python",
        "Python/map-of-highest-peak.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1766,
    "Title": "[Tree of Coprimes](https://leetcode.com/problems/tree-of-coprimes/)",
    "Solution": [
      [
        "C++",
        "C++/tree-of-coprimes.cpp"
      ],
      [
        "Python",
        "Python/tree-of-coprimes.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1767,
    "Title": "[Find the Subtasks That Did Not Execute](https://leetcode.com/problems/find-the-subtasks-that-did-not-execute/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-the-subtasks-that-did-not-execute.sql"
      ]
    ],
    "Time": "_O(n * c)_",
    "Space": "_O(n * c)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1768,
    "Title": "[Merge Strings Alternately](https://leetcode.com/problems/merge-strings-alternately/)",
    "Solution": [
      [
        "C++",
        "C++/merge-strings-alternately.cpp"
      ],
      [
        "Python",
        "Python/merge-strings-alternately.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1769,
    "Title": "[Minimum Number of Operations to Move All Balls to Each Box](https://leetcode.com/problems/minimum-number-of-operations-to-move-all-balls-to-each-box/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-operations-to-move-all-balls-to-each-box.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-operations-to-move-all-balls-to-each-box.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1770,
    "Title": "[Maximum Score from Performing Multiplication Operations](https://leetcode.com/problems/maximum-score-from-performing-multiplication-operations/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-score-from-performing-multiplication-operations.cpp"
      ],
      [
        "Python",
        "Python/maximum-score-from-performing-multiplication-operations.py"
      ]
    ],
    "Time": "_O(m^2)_",
    "Space": "_O(m)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1771,
    "Title": "[Maximize Palindrome Length From Subsequences](https://leetcode.com/problems/maximize-palindrome-length-from-subsequences/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-palindrome-length-from-subsequences.cpp"
      ],
      [
        "Python",
        "Python/maximize-palindrome-length-from-subsequences.py"
      ]
    ],
    "Time": "_O((m + n)^2)_",
    "Space": "_O((m + n)^2)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1772,
    "Title": "[Sort Features by Popularity](https://leetcode.com/problems/sort-features-by-popularity/)",
    "Solution": [
      [
        "C++",
        "C++/sort-features-by-popularity.cpp"
      ],
      [
        "Python",
        "Python/sort-features-by-popularity.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1773,
    "Title": "[Count Items Matching a Rule](https://leetcode.com/problems/count-items-matching-a-rule/)",
    "Solution": [
      [
        "C++",
        "C++/count-items-matching-a-rule.cpp"
      ],
      [
        "Python",
        "Python/count-items-matching-a-rule.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1774,
    "Title": "[Closest Dessert Cost](https://leetcode.com/problems/closest-dessert-cost/)",
    "Solution": [
      [
        "C++",
        "C++/closest-dessert-cost.cpp"
      ],
      [
        "Python",
        "Python/closest-dessert-cost.py"
      ]
    ],
    "Time": "_O(m * t)_",
    "Space": "_O(t)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1775,
    "Title": "[Equal Sum Arrays With Minimum Number of Operations](https://leetcode.com/problems/equal-sum-arrays-with-minimum-number-of-operations/)",
    "Solution": [
      [
        "C++",
        "C++/equal-sum-arrays-with-minimum-number-of-operations.cpp"
      ],
      [
        "Python",
        "Python/equal-sum-arrays-with-minimum-number-of-operations.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1776,
    "Title": "[Car Fleet II](https://leetcode.com/problems/car-fleet-ii/)",
    "Solution": [
      [
        "C++",
        "C++/car-fleet-ii.cpp"
      ],
      [
        "Python",
        "Python/car-fleet-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1777,
    "Title": "[Product's Price for Each Store](https://leetcode.com/problems/products-price-for-each-store/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/products-price-for-each-store.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1778,
    "Title": "[Shortest Path in a Hidden Grid](https://leetcode.com/problems/shortest-path-in-a-hidden-grid/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-path-in-a-hidden-grid.cpp"
      ],
      [
        "Python",
        "Python/shortest-path-in-a-hidden-grid.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "DFS, BFS, Bi-BFS"
  },
  {
    "Index": 1779,
    "Title": "[Find Nearest Point That Has the Same X or Y Coordinate](https://leetcode.com/problems/find-nearest-point-that-has-the-same-x-or-y-coordinate/)",
    "Solution": [
      [
        "C++",
        "C++/find-nearest-point-that-has-the-same-x-or-y-coordinate.cpp"
      ],
      [
        "Python",
        "Python/find-nearest-point-that-has-the-same-x-or-y-coordinate.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1780,
    "Title": "[Check if Number is a Sum of Powers of Three](https://leetcode.com/problems/check-if-number-is-a-sum-of-powers-of-three/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-number-is-a-sum-of-powers-of-three.cpp"
      ],
      [
        "Python",
        "Python/check-if-number-is-a-sum-of-powers-of-three.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1781,
    "Title": "[Sum of Beauty of All Substrings](https://leetcode.com/problems/sum-of-beauty-of-all-substrings/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-beauty-of-all-substrings.cpp"
      ],
      [
        "Python",
        "Python/sum-of-beauty-of-all-substrings.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1782,
    "Title": "[Count Pairs Of Nodes](https://leetcode.com/problems/count-pairs-of-nodes/)",
    "Solution": [
      [
        "C++",
        "C++/count-pairs-of-nodes.cpp"
      ],
      [
        "Python",
        "Python/count-pairs-of-nodes.py"
      ]
    ],
    "Time": "_O(n + e + q)_",
    "Space": "_O(n + e)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Counting, Two Pointers"
  },
  {
    "Index": 1783,
    "Title": "[Grand Slam Titles](https://leetcode.com/problems/grand-slam-titles/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/grand-slam-titles.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1784,
    "Title": "[Check if Binary String Has at Most One Segment of Ones](https://leetcode.com/problems/check-if-binary-string-has-at-most-one-segment-of-ones/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-binary-string-has-at-most-one-segment-of-ones.cpp"
      ],
      [
        "Python",
        "Python/check-if-binary-string-has-at-most-one-segment-of-ones.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1785,
    "Title": "[Minimum Elements to Add to Form a Given Sum](https://leetcode.com/problems/minimum-elements-to-add-to-form-a-given-sum/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-elements-to-add-to-form-a-given-sum.cpp"
      ],
      [
        "Python",
        "Python/minimum-elements-to-add-to-form-a-given-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1786,
    "Title": "[Number of Restricted Paths From First to Last Node](https://leetcode.com/problems/number-of-restricted-paths-from-first-to-last-node/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-restricted-paths-from-first-to-last-node.cpp"
      ],
      [
        "Python",
        "Python/number-of-restricted-paths-from-first-to-last-node.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "E\\",
    "Difficulty": "* log\\",
    "Tag": "V\\",
    "Note": ")_"
  },
  {
    "Index": 1787,
    "Title": "[Make the XOR of All Segments Equal to Zero](https://leetcode.com/problems/make-the-xor-of-all-segments-equal-to-zero/)",
    "Solution": [
      [
        "C++",
        "C++/make-the-xor-of-all-segments-equal-to-zero.cpp"
      ],
      [
        "Python",
        "Python/make-the-xor-of-all-segments-equal-to-zero.py"
      ]
    ],
    "Time": "_O(n + k * m)_",
    "Space": "_O(min(k * m, n))_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1788,
    "Title": "[Maximize the Beauty of the Garden](https://leetcode.com/problems/maximize-the-beauty-of-the-garden/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-the-beauty-of-the-garden.cpp"
      ],
      [
        "Python",
        "Python/maximize-the-beauty-of-the-garden.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1789,
    "Title": "[Primary Department for Each Employee](https://leetcode.com/problems/primary-department-for-each-employee/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/primary-department-for-each-employee.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1790,
    "Title": "[Check if One String Swap Can Make Strings Equal](https://leetcode.com/problems/check-if-one-string-swap-can-make-strings-equal/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-one-string-swap-can-make-strings-equal.cpp"
      ],
      [
        "Python",
        "Python/check-if-one-string-swap-can-make-strings-equal.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1791,
    "Title": "[Find Center of Star Graph](https://leetcode.com/problems/find-center-of-star-graph/)",
    "Solution": [
      [
        "C++",
        "C++/find-center-of-star-graph.cpp"
      ],
      [
        "Python",
        "Python/find-center-of-star-graph.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1792,
    "Title": "[Maximum Average Pass Ratio](https://leetcode.com/problems/maximum-average-pass-ratio/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-average-pass-ratio.cpp"
      ],
      [
        "Python",
        "Python/maximum-average-pass-ratio.py"
      ]
    ],
    "Time": "_O(n + mlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1793,
    "Title": "[Maximum Score of a Good Subarray](https://leetcode.com/problems/maximum-score-of-a-good-subarray/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-score-of-a-good-subarray.cpp"
      ],
      [
        "Python",
        "Python/maximum-score-of-a-good-subarray.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Greedy, Prefix Sum. Binary Search"
  },
  {
    "Index": 1794,
    "Title": "[Count Pairs of Equal Substrings With Minimum Difference](https://leetcode.com/problems/count-pairs-of-equal-substrings-with-minimum-difference/)",
    "Solution": [
      [
        "C++",
        "C++/count-pairs-of-equal-substrings-with-minimum-difference.cpp"
      ],
      [
        "Python",
        "Python/count-pairs-of-equal-substrings-with-minimum-difference.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1795,
    "Title": "[Rearrange Products Table](https://leetcode.com/problems/rearrange-products-table/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/rearrange-products-table.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1796,
    "Title": "[Second Largest Digit in a String](https://leetcode.com/problems/second-largest-digit-in-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/second-largest-digit-in-a-string.cpp"
      ],
      [
        "Python",
        "Python/second-largest-digit-in-a-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1797,
    "Title": "[Design Authentication Manager](https://leetcode.com/problems/design-authentication-manager/)",
    "Solution": [
      [
        "C++",
        "C++/design-authentication-manager.cpp"
      ],
      [
        "Python",
        "Python/design-authentication-manager.py"
      ]
    ],
    "Time": "ctor: _O(1)_<br>generate: _O(1)_, amortized<br>renew: _O(1)_, amortized<br>count: _O(1)_, amortized",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1798,
    "Title": "[Maximum Number of Consecutive Values You Can Make](https://leetcode.com/problems/maximum-number-of-consecutive-values-you-can-make/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-consecutive-values-you-can-make.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-consecutive-values-you-can-make.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1799,
    "Title": "[Maximize Score After N Operations](https://leetcode.com/problems/maximize-score-after-n-operations/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-score-after-n-operations.cpp"
      ],
      [
        "Python",
        "Python/maximize-score-after-n-operations.py"
      ]
    ],
    "Time": "_O(n^2 * 2^n)_",
    "Space": "_O(2^n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1800,
    "Title": "[Maximum Ascending Subarray Sum](https://leetcode.com/problems/maximum-ascending-subarray-sum/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-ascending-subarray-sum.cpp"
      ],
      [
        "Python",
        "Python/maximum-ascending-subarray-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1801,
    "Title": "[Number of Orders in the Backlog](https://leetcode.com/problems/number-of-orders-in-the-backlog/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-orders-in-the-backlog.cpp"
      ],
      [
        "Python",
        "Python/number-of-orders-in-the-backlog.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Greedy, Heap"
  },
  {
    "Index": 1802,
    "Title": "[Maximum Value at a Given Index in a Bounded Array](https://leetcode.com/problems/maximum-value-at-a-given-index-in-a-bounded-array/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-value-at-a-given-index-in-a-bounded-array.cpp"
      ],
      [
        "Python",
        "Python/maximum-value-at-a-given-index-in-a-bounded-array.py"
      ]
    ],
    "Time": "_O(logm)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1803,
    "Title": "[Count Pairs With XOR in a Range](https://leetcode.com/problems/count-pairs-with-xor-in-a-range/)",
    "Solution": [
      [
        "C++",
        "C++/count-pairs-with-xor-in-a-range.cpp"
      ],
      [
        "Python",
        "Python/count-pairs-with-xor-in-a-range.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1804,
    "Title": "[Implement Trie II (Prefix Tree)](https://leetcode.com/problems/implement-trie-ii-prefix-tree/)",
    "Solution": [
      [
        "C++",
        "C++/implement-trie-ii-prefix-tree.cpp"
      ],
      [
        "Python",
        "Python/implement-trie-ii-prefix-tree.py"
      ]
    ],
    "Time": "ctor: _O(1)_<br>insert: _O(n)_<br>count_word: _O(n)_<br>count_prefix: _O(n)_<br>erase: _O(n)_",
    "Space": "_O(t)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 1805,
    "Title": "[Number of Different Integers in a String](https://leetcode.com/problems/number-of-different-integers-in-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-different-integers-in-a-string.cpp"
      ],
      [
        "Python",
        "Python/number-of-different-integers-in-a-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1806,
    "Title": "[Minimum Number of Operations to Reinitialize a Permutation](https://leetcode.com/problems/minimum-number-of-operations-to-reinitialize-a-permutation/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-operations-to-reinitialize-a-permutation.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-operations-to-reinitialize-a-permutation.py"
      ]
    ],
    "Time": "_O(sqrt(n))_",
    "Space": "_O(sqrt(n))_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1807,
    "Title": "[Evaluate the Bracket Pairs of a String](https://leetcode.com/problems/evaluate-the-bracket-pairs-of-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/evaluate-the-bracket-pairs-of-a-string.cpp"
      ],
      [
        "Python",
        "Python/evaluate-the-bracket-pairs-of-a-string.py"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(n + m)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1808,
    "Title": "[Maximize Number of Nice Divisors](https://leetcode.com/problems/maximize-number-of-nice-divisors/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-number-of-nice-divisors.cpp"
      ],
      [
        "Python",
        "Python/maximize-number-of-nice-divisors.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Integer Break](https://leetcode.com/problems/integer-break/)"
  },
  {
    "Index": 1809,
    "Title": "[Ad-Free Sessions](https://leetcode.com/problems/ad-free-sessions/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/ad-free-sessions.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1810,
    "Title": "[Minimum Path Cost in a Hidden Grid](https://leetcode.com/problems/minimum-path-cost-in-a-hidden-grid/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-path-cost-in-a-hidden-grid.cpp"
      ],
      [
        "Python",
        "Python/minimum-path-cost-in-a-hidden-grid.py"
      ]
    ],
    "Time": "_O(m * n * log(m * n))_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "DFS, `Dijkstra's Algorithm`"
  },
  {
    "Index": 1811,
    "Title": "[Find Interview Candidates](https://leetcode.com/problems/find-interview-candidates/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-interview-candidates.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1812,
    "Title": "[Determine Color of a Chessboard Square](https://leetcode.com/problems/determine-color-of-a-chessboard-square/)",
    "Solution": [
      [
        "C++",
        "C++/determine-color-of-a-chessboard-square.cpp"
      ],
      [
        "Python",
        "Python/determine-color-of-a-chessboard-square.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1813,
    "Title": "[Sentence Similarity III](https://leetcode.com/problems/sentence-similarity-iii/)",
    "Solution": [
      [
        "C++",
        "C++/sentence-similarity-iii.cpp"
      ],
      [
        "Python",
        "Python/sentence-similarity-iii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1814,
    "Title": "[Count Nice Pairs in an Array](https://leetcode.com/problems/count-nice-pairs-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/count-nice-pairs-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/count-nice-pairs-in-an-array.py"
      ]
    ],
    "Time": "_O(nlogm)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1815,
    "Title": "[Maximum Number of Groups Getting Fresh Donuts](https://leetcode.com/problems/maximum-number-of-groups-getting-fresh-donuts/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-groups-getting-fresh-donuts.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-groups-getting-fresh-donuts.py"
      ]
    ],
    "Time": "_O((b/2) * (n/(b/2)+1)^(b/2))_",
    "Space": "_O((n/(b/2)+1)^(b/2))_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Greedy, DP"
  },
  {
    "Index": 1816,
    "Title": "[Truncate Sentence](https://leetcode.com/problems/truncate-sentence/)",
    "Solution": [
      [
        "C++",
        "C++/truncate-sentence.cpp"
      ],
      [
        "Python",
        "Python/truncate-sentence.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1817,
    "Title": "[Finding the Users Active Minutes](https://leetcode.com/problems/finding-the-users-active-minutes/)",
    "Solution": [
      [
        "C++",
        "C++/finding-the-users-active-minutes.cpp"
      ],
      [
        "Python",
        "Python/finding-the-users-active-minutes.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1818,
    "Title": "[Minimum Absolute Sum Difference](https://leetcode.com/problems/minimum-absolute-sum-difference/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-absolute-sum-difference.cpp"
      ],
      [
        "Python",
        "Python/minimum-absolute-sum-difference.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1819,
    "Title": "[Number of Different Subsequences GCDs](https://leetcode.com/problems/number-of-different-subsequences-gcds/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-different-subsequences-gcds.cpp"
      ],
      [
        "Python",
        "Python/number-of-different-subsequences-gcds.py"
      ]
    ],
    "Time": "_O(n + mlogm)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1820,
    "Title": "[Maximum Number of Accepted Invitations](https://leetcode.com/problems/maximum-number-of-accepted-invitations/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-accepted-invitations.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-accepted-invitations.py"
      ]
    ],
    "Time": "_O(m * n * sqrt(m + n))_",
    "Space": "_O(m + n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "`Hopcroft-Karp Bipartite Matching`, `Hungarian Bipartite Matching`"
  },
  {
    "Index": 1821,
    "Title": "[Find Customers With Positive Revenue this Year](https://leetcode.com/problems/find-customers-with-positive-revenue-this-year/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-customers-with-positive-revenue-this-year.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1822,
    "Title": "[Sign of the Product of an Array](https://leetcode.com/problems/sign-of-the-product-of-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/sign-of-the-product-of-an-array.cpp"
      ],
      [
        "Python",
        "Python/sign-of-the-product-of-an-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1823,
    "Title": "[Find the Winner of the Circular Game](https://leetcode.com/problems/find-the-winner-of-the-circular-game/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-winner-of-the-circular-game.cpp"
      ],
      [
        "Python",
        "Python/find-the-winner-of-the-circular-game.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1824,
    "Title": "[Minimum Sideway Jumps](https://leetcode.com/problems/minimum-sideway-jumps/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-sideway-jumps.cpp"
      ],
      [
        "Python",
        "Python/minimum-sideway-jumps.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Greedy, DP"
  },
  {
    "Index": 1825,
    "Title": "[Finding MK Average](https://leetcode.com/problems/finding-mk-average/)",
    "Solution": [
      [
        "C++",
        "C++/finding-mk-average.cpp"
      ],
      [
        "Python",
        "Python/finding-mk-average.py"
      ]
    ],
    "Time": "ctor: _O(1)_<br>add_element: _O(logn)_<br>calc_mkaverge: _O(1)_",
    "Space": "_O(m)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1826,
    "Title": "[Faulty Sensor](https://leetcode.com/problems/faulty-sensor/)",
    "Solution": [
      [
        "C++",
        "C++/faulty-sensor.cpp"
      ],
      [
        "Python",
        "Python/faulty-sensor.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1827,
    "Title": "[Minimum Operations to Make the Array Increasing](https://leetcode.com/problems/minimum-operations-to-make-the-array-increasing/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-make-the-array-increasing.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-make-the-array-increasing.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1828,
    "Title": "[Queries on Number of Points Inside a Circle](https://leetcode.com/problems/queries-on-number-of-points-inside-a-circle/)",
    "Solution": [
      [
        "C++",
        "C++/queries-on-number-of-points-inside-a-circle.cpp"
      ],
      [
        "Python",
        "Python/queries-on-number-of-points-inside-a-circle.py"
      ]
    ],
    "Time": "_O(q * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1829,
    "Title": "[Maximum XOR for Each Query](https://leetcode.com/problems/maximum-xor-for-each-query/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-xor-for-each-query.cpp"
      ],
      [
        "Python",
        "Python/maximum-xor-for-each-query.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1830,
    "Title": "[Minimum Number of Operations to Make String Sorted](https://leetcode.com/problems/minimum-number-of-operations-to-make-string-sorted/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-operations-to-make-string-sorted.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-operations-to-make-string-sorted.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(max_n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Modular Inverse"
  },
  {
    "Index": 1831,
    "Title": "[Maximum Transaction Each Day](https://leetcode.com/problems/maximum-transaction-each-day/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/maximum-transaction-each-day.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1832,
    "Title": "[Check if the Sentence Is Pangram](https://leetcode.com/problems/check-if-the-sentence-is-pangram/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-the-sentence-is-pangram.cpp"
      ],
      [
        "Python",
        "Python/check-if-the-sentence-is-pangram.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1833,
    "Title": "[Maximum Ice Cream Bars](https://leetcode.com/problems/minimum-operations-to-make-the-array-increasing/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-ice-cream-bars.cpp"
      ],
      [
        "Python",
        "Python/maximum-ice-cream-bars.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1834,
    "Title": "[Single-Threaded CPU](https://leetcode.com/problems/single-threaded-cpu/)",
    "Solution": [
      [
        "C++",
        "C++/single-threaded-cpu.cpp"
      ],
      [
        "Python",
        "Python/single-threaded-cpu.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1835,
    "Title": "[Find XOR Sum of All Pairs Bitwise AND](https://leetcode.com/problems/find-xor-sum-of-all-pairs-bitwise-and/)",
    "Solution": [
      [
        "C++",
        "C++/find-xor-sum-of-all-pairs-bitwise-and.cpp"
      ],
      [
        "Python",
        "Python/find-xor-sum-of-all-pairs-bitwise-and.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1836,
    "Title": "[Remove Duplicates From an Unsorted Linked List](https://leetcode.com/problems/remove-duplicates-from-an-unsorted-linked-list/)",
    "Solution": [
      [
        "C++",
        "C++/remove-duplicates-from-an-unsorted-linked-list.cpp"
      ],
      [
        "Python",
        "Python/remove-duplicates-from-an-unsorted-linked-list.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 1837,
    "Title": "[Sum of Digits in Base K](https://leetcode.com/problems/sum-of-digits-in-base-k/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-digits-in-base-k.cpp"
      ],
      [
        "Python",
        "Python/sum-of-digits-in-base-k.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1838,
    "Title": "[Frequency of the Most Frequent Element](https://leetcode.com/problems/frequency-of-the-most-frequent-element/)",
    "Solution": [
      [
        "C++",
        "C++/frequency-of-the-most-frequent-element.cpp"
      ],
      [
        "Python",
        "Python/frequency-of-the-most-frequent-element.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Two Pointers, Sliding Window"
  },
  {
    "Index": 1839,
    "Title": "[Longest Substring Of All Vowels in Order](https://leetcode.com/problems/longest-substring-of-all-vowels-in-order/)",
    "Solution": [
      [
        "C++",
        "C++/longest-substring-of-all-vowels-in-order.cpp"
      ],
      [
        "Python",
        "Python/longest-substring-of-all-vowels-in-order.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1840,
    "Title": "[Maximum Building Height](https://leetcode.com/problems/maximum-building-height/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-building-height.cpp"
      ],
      [
        "Python",
        "Python/maximum-building-height.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1841,
    "Title": "[League Statistics](https://leetcode.com/problems/league-statistics/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/league-statistics.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1842,
    "Title": "[Next Palindrome Using Same Digits](https://leetcode.com/problems/next-palindrome-using-same-digits/)",
    "Solution": [
      [
        "C++",
        "C++/next-palindrome-using-same-digits.cpp"
      ],
      [
        "Python",
        "Python/next-palindrome-using-same-digits.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1843,
    "Title": "[Suspicious Bank Accounts](https://leetcode.com/problems/suspicious-bank-accounts/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/suspicious-bank-accounts.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1844,
    "Title": "[Replace All Digits with Characters](https://leetcode.com/problems/replace-all-digits-with-characters/)",
    "Solution": [
      [
        "C++",
        "C++/replace-all-digits-with-characters.cpp"
      ],
      [
        "Python",
        "Python/replace-all-digits-with-characters.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1845,
    "Title": "[Seat Reservation Manager](https://leetcode.com/problems/seat-reservation-manager/)",
    "Solution": [
      [
        "C++",
        "C++/seat-reservation-manager.cpp"
      ],
      [
        "Python",
        "Python/seat-reservation-manager.py"
      ]
    ],
    "Time": "ctor: _O(n)_<br>reserve: _O(logn)_<br>unreserve: _O(logn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1846,
    "Title": "[Maximum Element After Decreasing and Rearranging](https://leetcode.com/problems/maximum-element-after-decreasing-and-rearranging/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-element-after-decreasing-and-rearranging.cpp"
      ],
      [
        "Python",
        "Python/maximum-element-after-decreasing-and-rearranging.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1847,
    "Title": "[Closest Room](https://leetcode.com/problems/closest-room/)",
    "Solution": [
      [
        "C++",
        "C++/closest-room.cpp"
      ],
      [
        "Python",
        "Python/closest-room.py"
      ]
    ],
    "Time": "_O(nlogn + klogk + klogn)_",
    "Space": "_O(n + k)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1848,
    "Title": "[Minimum Distance to the Target Element](https://leetcode.com/problems/minimum-distance-to-the-target-element/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-distance-to-the-target-element.cpp"
      ],
      [
        "Python",
        "Python/minimum-distance-to-the-target-element.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1849,
    "Title": "[Splitting a String Into Descending Consecutive Values](https://leetcode.com/problems/splitting-a-string-into-descending-consecutive-values/)",
    "Solution": [
      [
        "C++",
        "C++/splitting-a-string-into-descending-consecutive-values.cpp"
      ],
      [
        "Python",
        "Python/splitting-a-string-into-descending-consecutive-values.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1850,
    "Title": "[Minimum Adjacent Swaps to Reach the Kth Smallest Number](https://leetcode.com/problems/minimum-adjacent-swaps-to-reach-the-kth-smallest-number/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-adjacent-swaps-to-reach-the-kth-smallest-number.cpp"
      ],
      [
        "Python",
        "Python/minimum-adjacent-swaps-to-reach-the-kth-smallest-number.py"
      ]
    ],
    "Time": "_O((k + n) * n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1851,
    "Title": "[Minimum Interval to Include Each Query](https://leetcode.com/problems/minimum-interval-to-include-each-query/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-interval-to-include-each-query.cpp"
      ],
      [
        "Python",
        "Python/minimum-interval-to-include-each-query.py"
      ]
    ],
    "Time": "_O(nlogn + klogk + klogn)_",
    "Space": "_O(n + k)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1852,
    "Title": "[Distinct Numbers in Each Subarray](https://leetcode.com/problems/distinct-numbers-in-each-subarray/)",
    "Solution": [
      [
        "C++",
        "C++/distinct-numbers-in-each-subarray.cpp"
      ],
      [
        "Python",
        "Python/distinct-numbers-in-each-subarray.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Two Pointers, Sliding Window"
  },
  {
    "Index": 1853,
    "Title": "[Convert Date Format](https://leetcode.com/problems/convert-date-format/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/convert-date-format.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1854,
    "Title": "[Maximum Population Year](https://leetcode.com/problems/maximum-population-year/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-population-year.cpp"
      ],
      [
        "Python",
        "Python/maximum-population-year.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Line Sweep"
  },
  {
    "Index": 1855,
    "Title": "[Maximum Distance Between a Pair of Values](https://leetcode.com/problems/maximum-distance-between-a-pair-of-values/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-distance-between-a-pair-of-values.cpp"
      ],
      [
        "Python",
        "Python/maximum-distance-between-a-pair-of-values.py"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Two Pointers"
  },
  {
    "Index": 1856,
    "Title": "[Maximum Subarray Min-Product](https://leetcode.com/problems/maximum-subarray-min-product/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-subarray-min-product.cpp"
      ],
      [
        "Python",
        "Python/maximum-subarray-min-product.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Largest Rectangle in Histogram](https://leetcode.com/problems/largest-rectangle-in-histogram/)"
  },
  {
    "Index": 1857,
    "Title": "[Largest Color Value in a Directed Graph](https://leetcode.com/problems/largest-color-value-in-a-directed-graph/)",
    "Solution": [
      [
        "C++",
        "C++/largest-color-value-in-a-directed-graph.cpp"
      ],
      [
        "Python",
        "Python/largest-color-value-in-a-directed-graph.py"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(n + m)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1858,
    "Title": "[Longest Word With All Prefixes](https://leetcode.com/problems/longest-word-with-all-prefixes/)",
    "Solution": [
      [
        "C++",
        "C++/longest-word-with-all-prefixes.cpp"
      ],
      [
        "Python",
        "Python/longest-word-with-all-prefixes.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(t)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Trie, DFS"
  },
  {
    "Index": 1859,
    "Title": "[Sorting the Sentence](https://leetcode.com/problems/sorting-the-sentence/)",
    "Solution": [
      [
        "C++",
        "C++/sorting-the-sentence.cpp"
      ],
      [
        "Python",
        "Python/sorting-the-sentence.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1860,
    "Title": "[Incremental Memory Leak](https://leetcode.com/problems/incremental-memory-leak/)",
    "Solution": [
      [
        "C++",
        "C++/incremental-memory-leak.cpp"
      ],
      [
        "Python",
        "Python/incremental-memory-leak.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "[GCJ2020 - Round 2](https://codingcompetitions.withgoogle.com/codejam/round/000000000019ffb9/00000000003384ea)",
    "Note": 0
  },
  {
    "Index": 1861,
    "Title": "[Rotating the Box](https://leetcode.com/problems/rotating-the-box/)",
    "Solution": [
      [
        "C++",
        "C++/rotating-the-box.cpp"
      ],
      [
        "Python",
        "Python/rotating-the-box.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1862,
    "Title": "[Sum of Floored Pairs](https://leetcode.com/problems/sum-of-floored-pairs/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-floored-pairs.cpp"
      ],
      [
        "Python",
        "Python/sum-of-floored-pairs.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1863,
    "Title": "[Sum of All Subset XOR Totals](https://leetcode.com/problems/sum-of-all-subset-xor-totals/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-all-subset-xor-totals.cpp"
      ],
      [
        "Python",
        "Python/sum-of-all-subset-xor-totals.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1864,
    "Title": "[Minimum Number of Swaps to Make the Binary String Alternating](https://leetcode.com/problems/minimum-number-of-swaps-to-make-the-binary-string-alternating/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-swaps-to-make-the-binary-string-alternating.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-swaps-to-make-the-binary-string-alternating.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1865,
    "Title": "[Finding Pairs With a Certain Sum](https://leetcode.com/problems/finding-pairs-with-a-certain-sum/)",
    "Solution": [
      [
        "C++",
        "C++/finding-pairs-with-a-certain-sum.cpp"
      ],
      [
        "Python",
        "Python/finding-pairs-with-a-certain-sum.py"
      ]
    ],
    "Time": "ctor: _O(n1 + n2)_<br>add: _O(1)_<br>count: _O(n1)_",
    "Space": "_O(n1 + n2)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1866,
    "Title": "[Number of Ways to Rearrange Sticks With K Sticks Visible](https://leetcode.com/problems/number-of-ways-to-rearrange-sticks-with-k-sticks-visible/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-ways-to-rearrange-sticks-with-k-sticks-visible.cpp"
      ],
      [
        "Python",
        "Python/number-of-ways-to-rearrange-sticks-with-k-sticks-visible.py"
      ]
    ],
    "Time": "_O(n * k)_",
    "Space": "_O(k)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1867,
    "Title": "[Orders With Maximum Quantity Above Average](https://leetcode.com/problems/orders-with-maximum-quantity-above-average/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/orders-with-maximum-quantity-above-average.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1868,
    "Title": "[Product of Two Run-Length Encoded Arrays](https://leetcode.com/problems/product-of-two-run-length-encoded-arrays/)",
    "Solution": [
      [
        "C++",
        "C++/product-of-two-run-length-encoded-arrays.cpp"
      ],
      [
        "Python",
        "Python/product-of-two-run-length-encoded-arrays.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Two Pointers"
  },
  {
    "Index": 1869,
    "Title": "[Longer Contiguous Segments of Ones than Zeros](https://leetcode.com/problems/longer-contiguous-segments-of-ones-than-zeros/)",
    "Solution": [
      [
        "C++",
        "C++/longer-contiguous-segments-of-ones-than-zeros.cpp"
      ],
      [
        "Python",
        "Python/longer-contiguous-segments-of-ones-than-zeros.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1870,
    "Title": "[Minimum Speed to Arrive on Time](https://leetcode.com/problems/minimum-speed-to-arrive-on-time/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-speed-to-arrive-on-time.cpp"
      ],
      [
        "Python",
        "Python/minimum-speed-to-arrive-on-time.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1871,
    "Title": "[Jump Game VII](https://leetcode.com/problems/jump-game-vii/)",
    "Solution": [
      [
        "C++",
        "C++/jump-game-vii.cpp"
      ],
      [
        "Python",
        "Python/jump-game-vii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1872,
    "Title": "[Stone Game VIII](https://leetcode.com/problems/stone-game-viii/)",
    "Solution": [
      [
        "C++",
        "C++/stone-game-viii.cpp"
      ],
      [
        "Python",
        "Python/stone-game-viii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1873,
    "Title": "[Calculate Special Bonus](https://leetcode.com/problems/calculate-special-bonus/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/calculate-special-bonus.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1874,
    "Title": "[Minimize Product Sum of Two Arrays](https://leetcode.com/problems/minimize-product-sum-of-two-arrays/)",
    "Solution": [
      [
        "C++",
        "C++/minimize-product-sum-of-two-arrays.cpp"
      ],
      [
        "Python",
        "Python/minimize-product-sum-of-two-arrays.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "[GCJ2008 - Round 1A](https://codingcompetitions.withgoogle.com/codejam/round/00000000004330f6/0000000000432f33), 🔒",
    "Note": 0
  },
  {
    "Index": 1875,
    "Title": "[Group Employees of the Same Salary](https://leetcode.com/problems/group-employees-of-the-same-salary/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/group-employees-of-the-same-salary.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1876,
    "Title": "[Substrings of Size Three with Distinct Characters](https://leetcode.com/problems/substrings-of-size-three-with-distinct-characters/)",
    "Solution": [
      [
        "C++",
        "C++/substrings-of-size-three-with-distinct-characters.cpp"
      ],
      [
        "Python",
        "Python/substrings-of-size-three-with-distinct-characters.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1877,
    "Title": "[Minimize Maximum Pair Sum in Array](https://leetcode.com/problems/minimize-maximum-pair-sum-in-array/)",
    "Solution": [
      [
        "C++",
        "C++/minimize-maximum-pair-sum-in-array.cpp"
      ],
      [
        "Python",
        "Python/minimize-maximum-pair-sum-in-array.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1878,
    "Title": "[Get Biggest Three Rhombus Sums in a Grid](https://leetcode.com/problems/get-biggest-three-rhombus-sums-in-a-grid/)",
    "Solution": [
      [
        "C++",
        "C++/get-biggest-three-rhombus-sums-in-a-grid.cpp"
      ],
      [
        "Python",
        "Python/get-biggest-three-rhombus-sums-in-a-grid.py"
      ]
    ],
    "Time": "_O(m * n * min(m, n))_",
    "Space": "_O(m * n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1879,
    "Title": "[Minimum XOR Sum of Two Arrays](https://leetcode.com/problems/minimum-xor-sum-of-two-arrays/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-xor-sum-of-two-arrays.cpp"
      ],
      [
        "Python",
        "Python/minimum-xor-sum-of-two-arrays.py"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "DP, `Hungarian Weighted Bipartite Matching`"
  },
  {
    "Index": 1880,
    "Title": "[Check if Word Equals Summation of Two Words](https://leetcode.com/problems/check-if-word-equals-summation-of-two-words/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-word-equals-summation-of-two-words.cpp"
      ],
      [
        "Python",
        "Python/check-if-word-equals-summation-of-two-words.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1881,
    "Title": "[Maximum Value after Insertion](https://leetcode.com/problems/maximum-value-after-insertion/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-value-after-insertion.cpp"
      ],
      [
        "Python",
        "Python/maximum-value-after-insertion.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1882,
    "Title": "[Process Tasks Using Servers](https://leetcode.com/problems/process-tasks-using-servers/)",
    "Solution": [
      [
        "C++",
        "C++/process-tasks-using-servers.cpp"
      ],
      [
        "Python",
        "Python/process-tasks-using-servers.py"
      ]
    ],
    "Time": "_O(n + mlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1883,
    "Title": "[Minimum Skips to Arrive at Meeting On Time](https://leetcode.com/problems/minimum-skips-to-arrive-at-meeting-on-time/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-skips-to-arrive-at-meeting-on-time.cpp"
      ],
      [
        "Python",
        "Python/minimum-skips-to-arrive-at-meeting-on-time.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1884,
    "Title": "[Egg Drop With 2 Eggs and N Floors](https://leetcode.com/problems/egg-drop-with-2-eggs-and-n-floors/)",
    "Solution": [
      [
        "C++",
        "C++/egg-drop-with-2-eggs-and-n-floors.cpp"
      ],
      [
        "Python",
        "Python/egg-drop-with-2-eggs-and-n-floors.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DP"
  },
  {
    "Index": 1885,
    "Title": "[Count Pairs in Two Arrays](https://leetcode.com/problems/count-pairs-in-two-arrays/)",
    "Solution": [
      [
        "C++",
        "C++/count-pairs-in-two-arrays.cpp"
      ],
      [
        "Python",
        "Python/count-pairs-in-two-arrays.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Two Pointers"
  },
  {
    "Index": 1886,
    "Title": "[Determine Whether Matrix Can Be Obtained By Rotation](https://leetcode.com/problems/determine-whether-matrix-can-be-obtained-by-rotation/)",
    "Solution": [
      [
        "C++",
        "C++/determine-whether-matrix-can-be-obtained-by-rotation.cpp"
      ],
      [
        "Python",
        "Python/determine-whether-matrix-can-be-obtained-by-rotation.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1887,
    "Title": "[Reduction Operations to Make the Array Elements Equal](https://leetcode.com/problems/reduction-operations-to-make-the-array-elements-equal/)",
    "Solution": [
      [
        "C++",
        "C++/reduction-operations-to-make-the-array-elements-equal.cpp"
      ],
      [
        "Python",
        "Python/reduction-operations-to-make-the-array-elements-equal.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Sort"
  },
  {
    "Index": 1888,
    "Title": "[Minimum Number of Flips to Make the Binary String Alternatings](https://leetcode.com/problems/minimum-number-of-flips-to-make-the-binary-string-alternating/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-flips-to-make-the-binary-string-alternating.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-flips-to-make-the-binary-string-alternating.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Two Pointers, Sliding Window"
  },
  {
    "Index": 1889,
    "Title": "[Minimum Space Wasted From Packaging](https://leetcode.com/problems/minimum-space-wasted-from-packaging/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-space-wasted-from-packaging.cpp"
      ],
      [
        "Python",
        "Python/minimum-space-wasted-from-packaging.py"
      ]
    ],
    "Time": "_O(mlogm + nlogn + mlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1890,
    "Title": "[The Latest Login in 2020](https://leetcode.com/problems/the-latest-login-in-2020/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/the-latest-login-in-2020.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1891,
    "Title": "[Cutting Ribbons](https://leetcode.com/problems/cutting-ribbons/)",
    "Solution": [
      [
        "C++",
        "C++/cutting-ribbons.cpp"
      ],
      [
        "Python",
        "Python/cutting-ribbons.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 1892,
    "Title": "[Page Recommendations II](https://leetcode.com/problems/page-recommendations-ii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/page-recommendations-ii.sql"
      ]
    ],
    "Time": "_O(n * m)_",
    "Space": "_O(n * m)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1893,
    "Title": "[Check if All the Integers in a Range Are Covered](https://leetcode.com/problems/check-if-all-the-integers-in-a-range-are-covered/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-all-the-integers-in-a-range-are-covered.cpp"
      ],
      [
        "Python",
        "Python/check-if-all-the-integers-in-a-range-are-covered.py"
      ]
    ],
    "Time": "_O(n + r)_",
    "Space": "_O(r)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Line Sweep, Sort"
  },
  {
    "Index": 1894,
    "Title": "[Find the Student that Will Replace the Chalk](https://leetcode.com/problems/find-the-student-that-will-replace-the-chalk/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-student-that-will-replace-the-chalk.cpp"
      ],
      [
        "Python",
        "Python/find-the-student-that-will-replace-the-chalk.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1895,
    "Title": "[Largest Magic Square](https://leetcode.com/problems/largest-magic-square/)",
    "Solution": [
      [
        "C++",
        "C++/largest-magic-square.cpp"
      ],
      [
        "Python",
        "Python/largest-magic-square.py"
      ]
    ],
    "Time": "_O(max(m, n) * min(m, n)^3)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1896,
    "Title": "[Minimum Cost to Change the Final Value of Expression](https://leetcode.com/problems/minimum-cost-to-change-the-final-value-of-expression/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-to-change-the-final-value-of-expression.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-to-change-the-final-value-of-expression.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Stack, DP"
  },
  {
    "Index": 1897,
    "Title": "[Redistribute Characters to Make All Strings Equal](https://leetcode.com/problems/redistribute-characters-to-make-all-strings-equal/)",
    "Solution": [
      [
        "C++",
        "C++/redistribute-characters-to-make-all-strings-equal.cpp"
      ],
      [
        "Python",
        "Python/redistribute-characters-to-make-all-strings-equal.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1898,
    "Title": "[Maximum Number of Removable Characters](https://leetcode.com/problems/maximum-number-of-removable-characters/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-removable-characters.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-removable-characters.py"
      ]
    ],
    "Time": "_O(rlogn)_",
    "Space": "_O(r)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1899,
    "Title": "[Merge Triplets to Form Target Triplet](https://leetcode.com/problems/merge-triplets-to-form-target-triplet/)",
    "Solution": [
      [
        "C++",
        "C++/merge-triplets-to-form-target-triplet.cpp"
      ],
      [
        "Python",
        "Python/merge-triplets-to-form-target-triplet.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1900,
    "Title": "[The Earliest and Latest Rounds Where Players Compete](https://leetcode.com/problems/the-earliest-and-latest-rounds-where-players-compete/)",
    "Solution": [
      [
        "C++",
        "C++/the-earliest-and-latest-rounds-where-players-compete.cpp"
      ],
      [
        "Python",
        "Python/the-earliest-and-latest-rounds-where-players-compete.py"
      ]
    ],
    "Time": "_O(n^4)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1901,
    "Title": "[Find a Peak Element II](https://leetcode.com/problems/find-a-peak-element-ii/)",
    "Solution": [
      [
        "C++",
        "C++/find-a-peak-element-ii.cpp"
      ],
      [
        "Python",
        "Python/find-a-peak-element-ii.py"
      ]
    ],
    "Time": "_O(min(n, m) * log(max(n, m)))_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1902,
    "Title": "[Depth of BST Given Insertion Order](https://depth-of-bst-given-insertion-order/)",
    "Solution": [
      [
        "C++",
        "C++/depth-of-bst-given-insertion-order.cpp"
      ],
      [
        "Python",
        "Python/depth-of-bst-given-insertion-order.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Sorted Dict"
  },
  {
    "Index": 1903,
    "Title": "[Largest Odd Number in String](https://leetcode.com/problems/largest-odd-number-in-string/)",
    "Solution": [
      [
        "C++",
        "C++/largest-odd-number-in-string.cpp"
      ],
      [
        "Python",
        "Python/largest-odd-number-in-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1904,
    "Title": "[The Number of Full Rounds You Have Played](https://leetcode.com/problems/the-number-of-full-rounds-you-have-played/)",
    "Solution": [
      [
        "C++",
        "C++/the-number-of-full-rounds-you-have-played.cpp"
      ],
      [
        "Python",
        "Python/the-number-of-full-rounds-you-have-played.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1905,
    "Title": "[Count Sub Islands](https://leetcode.com/problems/count-sub-islands/)",
    "Solution": [
      [
        "C++",
        "C++/count-sub-islands.cpp"
      ],
      [
        "Python",
        "Python/count-sub-islands.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Flood Fill"
  },
  {
    "Index": 1906,
    "Title": "[Minimum Absolute Difference Queries](https://leetcode.com/problems/minimum-absolute-difference-queries/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-absolute-difference-queries.cpp"
      ],
      [
        "Python",
        "Python/minimum-absolute-difference-queries.py"
      ]
    ],
    "Time": "_O(r * (n + q))_",
    "Space": "_O(r * n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1907,
    "Title": "[Count Salary Categories](https://leetcode.com/problems/count-salary-categories/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/count-salary-categories.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1908,
    "Title": "[Game of Nim](https://leetcode.com/problems/game-of-nim/)",
    "Solution": [
      [
        "C++",
        "C++/game-of-nim.cpp"
      ],
      [
        "Python",
        "Python/game-of-nim.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1909,
    "Title": "[Remove One Element to Make the Array Strictly Increasing](https://leetcode.com/problems/remove-one-element-to-make-the-array-strictly-increasing/)",
    "Solution": [
      [
        "C++",
        "C++/remove-one-element-to-make-the-array-strictly-increasing.cpp"
      ],
      [
        "Python",
        "Python/remove-one-element-to-make-the-array-strictly-increasing.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1910,
    "Title": "[Remove All Occurrences of a Substring](https://leetcode.com/problems/remove-all-occurrences-of-a-substring/)",
    "Solution": [
      [
        "C++",
        "C++/remove-all-occurrences-of-a-substring.cpp"
      ],
      [
        "Python",
        "Python/remove-all-occurrences-of-a-substring.py"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(n + m)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "`KMP Algorithm`"
  },
  {
    "Index": 1911,
    "Title": "[Maximum Alternating Subsequence Sum](https://leetcode.com/problems/maximum-alternating-subsequence-sum/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-alternating-subsequence-sum.cpp"
      ],
      [
        "Python",
        "Python/maximum-alternating-subsequence-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Best Time to Buy and Sell Stock II](https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/)",
    "Note": 0
  },
  {
    "Index": 1912,
    "Title": "[Design Movie Rental System](https://leetcode.com/problems/design-movie-rental-system/)",
    "Solution": [
      [
        "C++",
        "C++/design-movie-rental-system.cpp"
      ],
      [
        "Python",
        "Python/design-movie-rental-system.py"
      ]
    ],
    "Time": "ctor: _O(nlogn)_<br>search: _O(logn)_<br>rent: _O(logn)_<br>drop: _O(logn)_<br>report: _O(logn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1913,
    "Title": "[Maximum Product Difference Between Two Pairs](https://leetcode.com/problems/maximum-product-difference-between-two-pairs/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-product-difference-between-two-pairs.cpp"
      ],
      [
        "Python",
        "Python/maximum-product-difference-between-two-pairs.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1914,
    "Title": "[Cyclically Rotating a Grid](https://leetcode.com/problems/cyclically-rotating-a-grid/)",
    "Solution": [
      [
        "C++",
        "C++/cyclically-rotating-a-grid.cpp"
      ],
      [
        "Python",
        "Python/cyclically-rotating-a-grid.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1915,
    "Title": "[Number of Wonderful Substrings](https://leetcode.com/problems/number-of-wonderful-substrings/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-wonderful-substrings.cpp"
      ],
      [
        "Python",
        "Python/number-of-wonderful-substrings.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1916,
    "Title": "[Count Ways to Build Rooms in an Ant Colony](https://leetcode.com/problems/count-ways-to-build-rooms-in-an-ant-colony/)",
    "Solution": [
      [
        "C++",
        "C++/count-ways-to-build-rooms-in-an-ant-colony.cpp"
      ],
      [
        "Python",
        "Python/count-ways-to-build-rooms-in-an-ant-colony.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "DFS, Tree"
  },
  {
    "Index": 1917,
    "Title": "[Leetcodify Friends Recommendations](https://leetcode.com/problems/leetcodify-friends-recommendations/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/leetcodify-friends-recommendations.sql"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1918,
    "Title": "[Kth Smallest Subarray Sum](https://leetcode.com/problems/kth-smallest-subarray-sum/)",
    "Solution": [
      [
        "C++",
        "C++/kth-smallest-subarray-sum.cpp"
      ],
      [
        "Python",
        "Python/kth-smallest-subarray-sum.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 1919,
    "Title": "[Leetcodify Similar Friends](https://leetcode.com/problems/leetcodify-similar-friends/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/leetcodify-similar-friends.sql"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(n * l)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1920,
    "Title": "[Build Array from Permutation](https://leetcode.com/problems/build-array-from-permutation/)",
    "Solution": [
      [
        "C++",
        "C++/build-array-from-permutation.cpp"
      ],
      [
        "Python",
        "Python/build-array-from-permutation.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1921,
    "Title": "[Eliminate Maximum Number of Monsters](https://leetcode.com/problems/eliminate-maximum-number-of-monsters/)",
    "Solution": [
      [
        "C++",
        "C++/eliminate-maximum-number-of-monsters.cpp"
      ],
      [
        "Python",
        "Python/eliminate-maximum-number-of-monsters.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1922,
    "Title": "[Count Good Numbers](https://leetcode.com/problems/count-good-numbers/)",
    "Solution": [
      [
        "C++",
        "C++/count-good-numbers.cpp"
      ],
      [
        "Python",
        "Python/count-good-numbers.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1923,
    "Title": "[Longest Common Subpath](https://leetcode.com/problems/longest-common-subpath/)",
    "Solution": [
      [
        "C++",
        "C++/longest-common-subpath.cpp"
      ],
      [
        "Python",
        "Python/longest-common-subpath.py"
      ]
    ],
    "Time": "_O(m * nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1924,
    "Title": "[Erect the Fence II](https://leetcode.com/problems/erect-the-fence-ii/)",
    "Solution": [
      [
        "C++",
        "C++/erect-the-fence-ii.cpp"
      ],
      [
        "Python",
        "Python/erect-the-fence-ii.py"
      ]
    ],
    "Time": "_O(n)_ on average",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "`Welzl's Algorithm`"
  },
  {
    "Index": 1925,
    "Title": "[Count Square Sum Triples](https://leetcode.com/problems/count-square-sum-triples/)",
    "Solution": [
      [
        "C++",
        "C++/count-square-sum-triples.cpp"
      ],
      [
        "Python",
        "Python/count-square-sum-triples.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1926,
    "Title": "[Nearest Exit from Entrance in Maze](https://leetcode.com/problems/nearest-exit-from-entrance-in-maze/)",
    "Solution": [
      [
        "C++",
        "C++/nearest-exit-from-entrance-in-maze.cpp"
      ],
      [
        "Python",
        "Python/nearest-exit-from-entrance-in-maze.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1927,
    "Title": "[Sum Game](https://leetcode.com/problems/sum-game/)",
    "Solution": [
      [
        "C++",
        "C++/sum-game.cpp"
      ],
      [
        "Python",
        "Python/sum-game.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1928,
    "Title": "[Minimum Cost to Reach Destination in Time](https://leetcode.com/problems/minimum-cost-to-reach-destination-in-time/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-to-reach-destination-in-time.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-to-reach-destination-in-time.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "E\\",
    "Difficulty": "* log\\",
    "Tag": "V\\",
    "Note": ")_"
  },
  {
    "Index": 1929,
    "Title": "[Concatenation of Array](https://leetcode.com/problems/concatenation-of-array/)",
    "Solution": [
      [
        "C++",
        "C++/concatenation-of-array.cpp"
      ],
      [
        "Python",
        "Python/concatenation-of-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1930,
    "Title": "[Unique Length-3 Palindromic Subsequences](https://leetcode.com/problems/unique-length-3-palindromic-subsequences/)",
    "Solution": [
      [
        "C++",
        "C++/unique-length-3-palindromic-subsequences.cpp"
      ],
      [
        "Python",
        "Python/unique-length-3-palindromic-subsequences.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1931,
    "Title": "[Painting a Grid With Three Different Colors](https://leetcode.com/problems/painting-a-grid-with-three-different-colors/)",
    "Solution": [
      [
        "C++",
        "C++/painting-a-grid-with-three-different-colors.cpp"
      ],
      [
        "Python",
        "Python/painting-a-grid-with-three-different-colors.py"
      ]
    ],
    "Time": "_O(2^(3 * m) * logn)_",
    "Space": "_O(2^(2 * m))_",
    "Difficulty": "Hard",
    "Tag": "variant of [Number of Ways to Paint N × 3 Grid](https://leetcode.com/problems/number-of-ways-to-paint-n-3-grid/)",
    "Note": "DP, Backtracking, Matrix Exponentiation, State Compression"
  },
  {
    "Index": 1932,
    "Title": "[Merge BSTs to Create Single BST](https://leetcode.com/problems/merge-bsts-to-create-single-bst/)",
    "Solution": [
      [
        "C++",
        "C++/merge-bsts-to-create-single-bst.cpp"
      ],
      [
        "Python",
        "Python/merge-bsts-to-create-single-bst.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1933,
    "Title": "[Check if String Is Decomposable Into Value-Equal Substrings](https://leetcode.com/problems/check-if-string-is-decomposable-into-value-equal-substrings/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-string-is-decomposable-into-value-equal-substrings.cpp"
      ],
      [
        "Python",
        "Python/check-if-string-is-decomposable-into-value-equal-substrings.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒"
  },
  {
    "Index": 1934,
    "Title": "[Confirmation Rate](https://leetcode.com/problems/confirmation-rate/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/confirmation-rate.sql"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(n + m)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1935,
    "Title": "[Maximum Number of Words You Can Type](https://leetcode.com/problems/maximum-number-of-words-you-can-type/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-words-you-can-type.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-words-you-can-type.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1936,
    "Title": "[Add Minimum Number of Rungs](https://leetcode.com/problems/add-minimum-number-of-rungs/)",
    "Solution": [
      [
        "C++",
        "C++/add-minimum-number-of-rungs.cpp"
      ],
      [
        "Python",
        "Python/add-minimum-number-of-rungs.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1937,
    "Title": "[Maximum Number of Points with Cost](https://leetcode.com/problems/maximum-number-of-points-with-cost/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-points-with-cost.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-points-with-cost.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Prefix Sum"
  },
  {
    "Index": 1938,
    "Title": "[Maximum Genetic Difference Query](https://leetcode.com/problems/maximum-genetic-difference-query/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-genetic-difference-query.cpp"
      ],
      [
        "Python",
        "Python/maximum-genetic-difference-query.py"
      ]
    ],
    "Time": "_O(nlogk + mlogk)_",
    "Space": "_O(n + logk)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Maximum XOR With an Element From Array](https://leetcode.com/problems/maximum-xor-with-an-element-from-array/)"
  },
  {
    "Index": 1939,
    "Title": "[Users That Actively Request Confirmation Messages](https://leetcode.com/problems/users-that-actively-request-confirmation-messages/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/users-that-actively-request-confirmation-messages.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1940,
    "Title": "[Longest Common Subsequence Between Sorted Arrays](https://leetcode.com/problems/longest-common-subsequence-between-sorted-arrays/)",
    "Solution": [
      [
        "C++",
        "C++/longest-common-subsequence-between-sorted-arrays.cpp"
      ],
      [
        "Python",
        "Python/longest-common-subsequence-between-sorted-arrays.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(l)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 1941,
    "Title": "[Check if All Characters Have Equal Number of Occurrences](https://leetcode.com/problems/check-if-all-characters-have-equal-number-of-occurrences/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-all-characters-have-equal-number-of-occurrences.cpp"
      ],
      [
        "Python",
        "Python/check-if-all-characters-have-equal-number-of-occurrences.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1942,
    "Title": "[The Number of the Smallest Unoccupied Chair](https://leetcode.com/problems/the-number-of-the-smallest-unoccupied-chair/)",
    "Solution": [
      [
        "C++",
        "C++/the-number-of-the-smallest-unoccupied-chair.cpp"
      ],
      [
        "Python",
        "Python/the-number-of-the-smallest-unoccupied-chair.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1943,
    "Title": "[Describe the Painting](https://leetcode.com/problems/describe-the-painting/)",
    "Solution": [
      [
        "C++",
        "C++/describe-the-painting.cpp"
      ],
      [
        "Python",
        "Python/describe-the-painting.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1944,
    "Title": "[Number of Visible People in a Queue](https://leetcode.com/problems/number-of-visible-people-in-a-queue/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-visible-people-in-a-queue.cpp"
      ],
      [
        "Python",
        "Python/number-of-visible-people-in-a-queue.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Buildings With an Ocean View](https://leetcode.com/problems/buildings-with-an-ocean-view/)"
  },
  {
    "Index": 1945,
    "Title": "[Sum of Digits of String After Convert](https://leetcode.com/problems/sum-of-digits-of-string-after-convert/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-digits-of-string-after-convert.cpp"
      ],
      [
        "Python",
        "Python/sum-of-digits-of-string-after-convert.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1946,
    "Title": "[Largest Number After Mutating Substring](https://leetcode.com/problems/largest-number-after-mutating-substring/)",
    "Solution": [
      [
        "C++",
        "C++/largest-number-after-mutating-substring.cpp"
      ],
      [
        "Python",
        "Python/largest-number-after-mutating-substring.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1947,
    "Title": "[Maximum Compatibility Score Sum](https://leetcode.com/problems/maximum-compatibility-score-sum/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-compatibility-score-sum.cpp"
      ],
      [
        "Python",
        "Python/maximum-compatibility-score-sum.py"
      ]
    ],
    "Time": "_O(m^2 * (n + m))_",
    "Space": "_O(m^2)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Minimum XOR Sum of Two Arrays](https://leetcode.com/problems/minimum-xor-sum-of-two-arrays/)",
    "Note": "DP, `Hungarian Weighted Bipartite Matching`"
  },
  {
    "Index": 1948,
    "Title": "[Delete Duplicate Folders in System](https://leetcode.com/problems/delete-duplicate-folders-in-system/)",
    "Solution": [
      [
        "C++",
        "C++/delete-duplicate-folders-in-system.cpp"
      ],
      [
        "Python",
        "Python/delete-duplicate-folders-in-system.py"
      ]
    ],
    "Time": "_O(n * m * l + tlogt + l * t)_",
    "Space": "_O(l * t)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Find Duplicate Subtrees](https://leetcode.com/problems/find-duplicate-subtrees/)"
  },
  {
    "Index": 1949,
    "Title": "[Strong Friendship](https://leetcode.com/problems/strong-friendship/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/strong-friendship.sql"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1950,
    "Title": "[Maximum of Minimum Values in All Subarrays](https://leetcode.com/problems/maximum-of-minimum-values-in-all-subarrays/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-of-minimum-values-in-all-subarrays.cpp"
      ],
      [
        "Python",
        "Python/maximum-of-minimum-values-in-all-subarrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 1951,
    "Title": "[All the Pairs With the Maximum Number of Common Followers](https://leetcode.com/problems/all-the-pairs-with-the-maximum-number-of-common-followers/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/all-the-pairs-with-the-maximum-number-of-common-followers.sql"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1952,
    "Title": "[Three Divisors](https://leetcode.com/problems/three-divisors/)",
    "Solution": [
      [
        "C++",
        "C++/three-divisors.cpp"
      ],
      [
        "Python",
        "Python/three-divisors.py"
      ]
    ],
    "Time": "_O(sqrt(n))_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1953,
    "Title": "[Maximum Number of Weeks for Which You Can Work](https://leetcode.com/problems/maximum-number-of-weeks-for-which-you-can-work/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-weeks-for-which-you-can-work.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-weeks-for-which-you-can-work.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1954,
    "Title": "[Minimum Garden Perimeter to Collect Enough Apples](https://leetcode.com/problems/minimum-garden-perimeter-to-collect-enough-apples/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-garden-perimeter-to-collect-enough-apples.cpp"
      ],
      [
        "Python",
        "Python/minimum-garden-perimeter-to-collect-enough-apples.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Binary Search, `Cardano's Formula`"
  },
  {
    "Index": 1955,
    "Title": "[Count Number of Special Subsequences](https://leetcode.com/problems/count-number-of-special-subsequences/)",
    "Solution": [
      [
        "C++",
        "C++/count-number-of-special-subsequences.cpp"
      ],
      [
        "Python",
        "Python/count-number-of-special-subsequences.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1956,
    "Title": "[Minimum Time For K Virus Variants to Spread](https://leetcode.com/problems/minimum-time-for-k-virus-variants-to-spread/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-time-for-k-virus-variants-to-spread.cpp"
      ],
      [
        "Python",
        "Python/minimum-time-for-k-virus-variants-to-spread.py"
      ]
    ],
    "Time": "_O(nlogn * logr)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 1957,
    "Title": "[Delete Characters to Make Fancy String](https://leetcode.com/problems/delete-characters-to-make-fancy-string/)",
    "Solution": [
      [
        "C++",
        "C++/delete-characters-to-make-fancy-string.cpp"
      ],
      [
        "Python",
        "Python/delete-characters-to-make-fancy-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1958,
    "Title": "[Check if Move is Legal](https://leetcode.com/problems/check-if-move-is-legal/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-move-is-legal.cpp"
      ],
      [
        "Python",
        "Python/check-if-move-is-legal.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1959,
    "Title": "[Minimum Total Space Wasted With K Resizing Operations](https://leetcode.com/problems/minimum-total-space-wasted-with-k-resizing-operations/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-total-space-wasted-with-k-resizing-operations.cpp"
      ],
      [
        "Python",
        "Python/minimum-total-space-wasted-with-k-resizing-operations.py"
      ]
    ],
    "Time": "_O(k * n^2)_",
    "Space": "_O(k * n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1960,
    "Title": "[Maximum Product of the Length of Two Palindromic Substrings](https://leetcode.com/problems/maximum-product-of-the-length-of-two-palindromic-substrings/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-product-of-the-length-of-two-palindromic-substrings.cpp"
      ],
      [
        "Python",
        "Python/maximum-product-of-the-length-of-two-palindromic-substrings.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "`Manacher's Algorithm`, DP"
  },
  {
    "Index": 1961,
    "Title": "[Check If String Is a Prefix of Array](https://leetcode.com/problems/check-if-string-is-a-prefix-of-array/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-string-is-a-prefix-of-array.cpp"
      ],
      [
        "Python",
        "Python/check-if-string-is-a-prefix-of-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1962,
    "Title": "[Remove Stones to Minimize the Total](https://leetcode.com/problems/remove-stones-to-minimize-the-total/)",
    "Solution": [
      [
        "C++",
        "C++/remove-stones-to-minimize-the-total.cpp"
      ],
      [
        "Python",
        "Python/remove-stones-to-minimize-the-total.py"
      ]
    ],
    "Time": "_O(n + klogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1963,
    "Title": "[Minimum Number of Swaps to Make the String Balanced](https://leetcode.com/problems/minimum-number-of-swaps-to-make-the-string-balanced/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-swaps-to-make-the-string-balanced.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-swaps-to-make-the-string-balanced.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Maximum Nesting Depth of the Parentheses](https://leetcode.com/problems/maximum-nesting-depth-of-the-parentheses/)",
    "Note": 0
  },
  {
    "Index": 1964,
    "Title": "[Find the Longest Valid Obstacle Course at Each Position](https://leetcode.com/problems/find-the-longest-valid-obstacle-course-at-each-position/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-longest-valid-obstacle-course-at-each-position.cpp"
      ],
      [
        "Python",
        "Python/find-the-longest-valid-obstacle-course-at-each-position.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Longest Increasing Subsequence](https://leetcode.com/problems/longest-increasing-subsequence/)",
    "Note": "Binary Search, Segment Tree, DP"
  },
  {
    "Index": 1965,
    "Title": "[Employees With Missing Information](https://leetcode.com/problems/employees-with-missing-information/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/employees-with-missing-information.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1966,
    "Title": "[Binary Searchable Numbers in an Unsorted Array](https://leetcode.com/problems/binary-searchable-numbers-in-an-unsorted-array/)",
    "Solution": [
      [
        "C++",
        "C++/binary-searchable-numbers-in-an-unsorted-array.cpp"
      ],
      [
        "Python",
        "Python/binary-searchable-numbers-in-an-unsorted-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Prefix Sum"
  },
  {
    "Index": 1967,
    "Title": "[Number of Strings That Appear as Substrings in Word](https://leetcode.com/problems/number-of-strings-that-appear-as-substrings-in-word/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-strings-that-appear-as-substrings-in-word.cpp"
      ],
      [
        "Python",
        "Python/number-of-strings-that-appear-as-substrings-in-word.py"
      ]
    ],
    "Time": "_O(n * l + m)_",
    "Space": "_O(t)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "`KMP Algorithm`, `Aho-Corasick Automata`, Trie"
  },
  {
    "Index": 1968,
    "Title": "[Array With Elements Not Equal to Average of Neighbors](https://leetcode.com/problems/array-with-elements-not-equal-to-average-of-neighbors/)",
    "Solution": [
      [
        "C++",
        "C++/array-with-elements-not-equal-to-average-of-neighbors.cpp"
      ],
      [
        "Python",
        "Python/array-with-elements-not-equal-to-average-of-neighbors.py"
      ]
    ],
    "Time": "_O(n)_  on average",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Wiggle Sort II](https://leetcode.com/problems/wiggle-sort-ii/)",
    "Note": "Quick Select, Tri Partition"
  },
  {
    "Index": 1969,
    "Title": "[Minimum Non-Zero Product of the Array Elements](https://leetcode.com/problems/minimum-non-zero-product-of-the-array-elements/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-non-zero-product-of-the-array-elements.cpp"
      ],
      [
        "Python",
        "Python/minimum-non-zero-product-of-the-array-elements.py"
      ]
    ],
    "Time": "_O(min(p, logM))_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1970,
    "Title": "[Last Day Where You Can Still Cross](https://leetcode.com/problems/last-day-where-you-can-still-cross/)",
    "Solution": [
      [
        "C++",
        "C++/last-day-where-you-can-still-cross.cpp"
      ],
      [
        "Python",
        "Python/last-day-where-you-can-still-cross.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Bricks Falling When Hit](https://leetcode.com/problems/bricks-falling-when-hit/)"
  },
  {
    "Index": 1971,
    "Title": "[Find if Path Exists in Graph](https://leetcode.com/problems/find-if-path-exists-in-graph/)",
    "Solution": [
      [
        "C++",
        "C++/find-if-path-exists-in-graph.cpp"
      ],
      [
        "Python",
        "Python/find-if-path-exists-in-graph.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "V\\",
    "Difficulty": "+ \\",
    "Tag": "E\\",
    "Note": ")_"
  },
  {
    "Index": 1972,
    "Title": "[First and Last Call On the Same Day](https://leetcode.com/problems/first-and-last-call-on-the-same-day/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/first-and-last-call-on-the-same-day.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1973,
    "Title": "[Count Nodes Equal to Sum of Descendants](https://leetcode.com/problems/count-nodes-equal-to-sum-of-descendants/)",
    "Solution": [
      [
        "C++",
        "C++/count-nodes-equal-to-sum-of-descendants.cpp"
      ],
      [
        "Python",
        "Python/count-nodes-equal-to-sum-of-descendants.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1974,
    "Title": "[Minimum Time to Type Word Using Special Typewriter](https://leetcode.com/problems/minimum-time-to-type-word-using-special-typewriter/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-time-to-type-word-using-special-typewriter.cpp"
      ],
      [
        "Python",
        "Python/minimum-time-to-type-word-using-special-typewriter.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1975,
    "Title": "[Maximum Matrix Sum](https://leetcode.com/problems/maximum-matrix-sum/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-matrix-sum.cpp"
      ],
      [
        "Python",
        "Python/maximum-matrix-sum.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1976,
    "Title": "[Number of Ways to Arrive at Destination](https://leetcode.com/problems/number-of-ways-to-arrive-at-destination/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-ways-to-arrive-at-destination.cpp"
      ],
      [
        "Python",
        "Python/number-of-ways-to-arrive-at-destination.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "E\\",
    "Difficulty": "* log\\",
    "Tag": "V\\",
    "Note": ")_"
  },
  {
    "Index": 1977,
    "Title": "[Number of Ways to Separate Numbers](https://leetcode.com/problems/number-of-ways-to-separate-numbers/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-ways-to-separate-numbers.cpp"
      ],
      [
        "Python",
        "Python/number-of-ways-to-separate-numbers.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "DP"
  },
  {
    "Index": 1978,
    "Title": "[Employees Whose Manager Left the Company](https://leetcode.com/problems/employees-whose-manager-left-the-company/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/employees-whose-manager-left-the-company.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1979,
    "Title": "[Find Greatest Common Divisor of Array](https://leetcode.com/problems/find-greatest-common-divisor-of-array/)",
    "Solution": [
      [
        "C++",
        "C++/find-greatest-common-divisor-of-array.cpp"
      ],
      [
        "Python",
        "Python/find-greatest-common-divisor-of-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1980,
    "Title": "[Find Unique Binary String](https://leetcode.com/problems/find-unique-binary-string/)",
    "Solution": [
      [
        "C++",
        "C++/find-unique-binary-string.cpp"
      ],
      [
        "Python",
        "Python/find-unique-binary-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "`Cantor Diagonalization`"
  },
  {
    "Index": 1981,
    "Title": "[Minimize the Difference Between Target and Chosen Elements](https://leetcode.com/problems/minimize-the-difference-between-target-and-chosen-elements/)",
    "Solution": [
      [
        "C++",
        "C++/minimize-the-difference-between-target-and-chosen-elements.cpp"
      ],
      [
        "Python",
        "Python/minimize-the-difference-between-target-and-chosen-elements.py"
      ]
    ],
    "Time": "_O(t * m * n)_",
    "Space": "_O(t)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DP, Pruning"
  },
  {
    "Index": 1982,
    "Title": "[Find Array Given Subset Sums](https://leetcode.com/problems/find-array-given-subset-sums/)",
    "Solution": [
      [
        "C++",
        "C++/find-array-given-subset-sums.cpp"
      ],
      [
        "Python",
        "Python/find-array-given-subset-sums.py"
      ]
    ],
    "Time": "_O(n * 2^n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Math, DP, OrderedDict"
  },
  {
    "Index": 1983,
    "Title": "[Widest Pair of Indices With Equal Range Sum](https://leetcode.com/problems/widest-pair-of-indices-with-equal-range-sum/)",
    "Solution": [
      [
        "C++",
        "C++/widest-pair-of-indices-with-equal-range-sum.cpp"
      ],
      [
        "Python",
        "Python/widest-pair-of-indices-with-equal-range-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Find the Longest Substring Containing Vowels in Even Counts](https://leetcode.com/problems/find-the-longest-substring-containing-vowels-in-even-counts/), 🔒"
  },
  {
    "Index": 1984,
    "Title": "[Minimum Difference Between Highest and Lowest of K Scores](https://leetcode.com/problems/minimum-difference-between-highest-and-lowest-of-k-scores/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-difference-between-highest-and-lowest-of-k-scores.cpp"
      ],
      [
        "Python",
        "Python/minimum-difference-between-highest-and-lowest-of-k-scores.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Two Pointers, Sliding Window"
  },
  {
    "Index": 1985,
    "Title": "[Find the Kth Largest Integer in the Array](https://leetcode.com/problems/find-the-kth-largest-integer-in-the-array/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-kth-largest-integer-in-the-array.cpp"
      ],
      [
        "Python",
        "Python/find-the-kth-largest-integer-in-the-array.py"
      ]
    ],
    "Time": "_O(n)_ on average",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Quick Select"
  },
  {
    "Index": 1986,
    "Title": "[Minimum Number of Work Sessions to Finish the Tasks](https://leetcode.com/problems/minimum-number-of-work-sessions-to-finish-the-tasks/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-work-sessions-to-finish-the-tasks.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-work-sessions-to-finish-the-tasks.py"
      ]
    ],
    "Time": "_O(n * 2^n)_",
    "Space": "_O(2^n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DP"
  },
  {
    "Index": 1987,
    "Title": "[Number of Unique Good Subsequences](https://leetcode.com/problems/number-of-unique-good-subsequences/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-unique-good-subsequences.cpp"
      ],
      [
        "Python",
        "Python/number-of-unique-good-subsequences.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Distinct Subsequences II](https://leetcode.com/problems/distinct-subsequences-ii/)",
    "Note": "DP"
  },
  {
    "Index": 1988,
    "Title": "[Find Cutoff Score for Each School](https://leetcode.com/problems/find-cutoff-score-for-each-schooly/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-cutoff-score-for-each-school.sql"
      ]
    ],
    "Time": "_O(n * m)_",
    "Space": "_O(n * m)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1989,
    "Title": "[Maximum Number of People That Can Be Caught in Tag](https://leetcode.com/problems/maximum-number-of-people-that-can-be-caught-in-tag/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-people-that-can-be-caught-in-tag.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-people-that-can-be-caught-in-tag.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 1990,
    "Title": "[Count the Number of Experiments](https://leetcode.com/problems/count-the-number-of-experiments/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/count-the-number-of-experiments.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 1991,
    "Title": "[Find the Middle Index in Array](https://leetcode.com/problems/find-the-middle-index-in-array/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-middle-index-in-array.cpp"
      ],
      [
        "Python",
        "Python/find-the-middle-index-in-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 1992,
    "Title": "[Find All Groups of Farmland](https://leetcode.com/problems/find-all-groups-of-farmland/)",
    "Solution": [
      [
        "C++",
        "C++/find-all-groups-of-farmland.cpp"
      ],
      [
        "Python",
        "Python/find-all-groups-of-farmland.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Number of Islands](https://leetcode.com/problems/number-of-islands/)"
  },
  {
    "Index": 1993,
    "Title": "[Operations on Tree](https://leetcode.com/problems/operations-on-tree/)",
    "Solution": [
      [
        "C++",
        "C++/operations-on-tree.cpp"
      ],
      [
        "Python",
        "Python/operations-on-tree.py"
      ]
    ],
    "Time": "ctor: _O(n)_<br>lock: _O(1)_<br>unlock: _O(1)_<br>upgrade: _O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 1994,
    "Title": "[The Number of Good Subsets](https://leetcode.com/problems/the-number-of-good-subsets/)",
    "Solution": [
      [
        "C++",
        "C++/the-number-of-good-subsets.cpp"
      ],
      [
        "Python",
        "Python/the-number-of-good-subsets.py"
      ]
    ],
    "Time": "_O(n * 2^p)_",
    "Space": "_O(2^p)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "DP, `Sieve of Eratosthenes`"
  },
  {
    "Index": 1995,
    "Title": "[Count Special Quadruplets](https://leetcode.com/problems/count-special-quadruplets/)",
    "Solution": [
      [
        "C++",
        "C++/count-special-quadruplets.cpp"
      ],
      [
        "Python",
        "Python/count-special-quadruplets.py"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "variant of [4 Sum](https://leetcode.com/problems/4sum/)"
  },
  {
    "Index": 1996,
    "Title": "[The Number of Weak Characters in the Game](https://leetcode.com/problems/the-number-of-weak-characters-in-the-game/)",
    "Solution": [
      [
        "C++",
        "C++/the-number-of-weak-characters-in-the-game.cpp"
      ],
      [
        "Python",
        "Python/the-number-of-weak-characters-in-the-game.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 1997,
    "Title": "[First Day Where You Have Been in All the Rooms](https://leetcode.com/problems/first-day-where-you-have-been-in-all-the-rooms/)",
    "Solution": [
      [
        "C++",
        "C++/first-day-where-you-have-been-in-all-the-rooms.cpp"
      ],
      [
        "Python",
        "Python/first-day-where-you-have-been-in-all-the-rooms.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DP"
  },
  {
    "Index": 1998,
    "Title": "[GCD Sort of an Array](https://leetcode.com/problems/gcd-sort-of-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/gcd-sort-of-an-array.cpp"
      ],
      [
        "Python",
        "Python/gcd-sort-of-an-array.py"
      ]
    ],
    "Time": "_O(nlogn + m)_",
    "Space": "_O(n + m)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 1999,
    "Title": "[Smallest Greater Multiple Made of Two Digits](https://leetcode.com/problems/smallest-greater-multiple-made-of-two-digits/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-greater-multiple-made-of-two-digits.cpp"
      ],
      [
        "Python",
        "Python/smallest-greater-multiple-made-of-two-digits.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Backtracking, Bit Manipulation"
  },
  {
    "Index": 2000,
    "Title": "[Reverse Prefix of Word](https://leetcode.com/problems/reverse-prefix-of-word/)",
    "Solution": [
      [
        "C++",
        "C++/reverse-prefix-of-word.cpp"
      ],
      [
        "Python",
        "Python/reverse-prefix-of-word.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2001,
    "Title": "[Number of Pairs of Interchangeable Rectangles](https://leetcode.com/problems/number-of-pairs-of-interchangeable-rectangles/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-pairs-of-interchangeable-rectangles.cpp"
      ],
      [
        "Python",
        "Python/number-of-pairs-of-interchangeable-rectangles.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Math"
  },
  {
    "Index": 2002,
    "Title": "[Maximum Product of the Length of Two Palindromic Subsequences](https://leetcode.com/problems/maximum-product-of-the-length-of-two-palindromic-subsequences/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-product-of-the-length-of-two-palindromic-subsequences.cpp"
      ],
      [
        "Python",
        "Python/maximum-product-of-the-length-of-two-palindromic-subsequences.py"
      ]
    ],
    "Time": "_O(3^n)_",
    "Space": "_O(2^n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2003,
    "Title": "[Smallest Missing Genetic Value in Each Subtree](https://leetcode.com/problems/smallest-missing-genetic-value-in-each-subtree/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-missing-genetic-value-in-each-subtree.cpp"
      ],
      [
        "Python",
        "Python/smallest-missing-genetic-value-in-each-subtree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2004,
    "Title": "[The Number of Seniors and Juniors to Join the Company](https://leetcode.com/problems/the-number-of-seniors-and-juniors-to-join-the-company/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/the-number-of-seniors-and-juniors-to-join-the-company.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2005,
    "Title": "[Subtree Removal Game with Fibonacci Tree](https://leetcode.com/problems/subtree-removal-game-with-fibonacci-tree/)",
    "Solution": [
      [
        "C++",
        "C++/subtree-removal-game-with-fibonacci-tree.cpp"
      ],
      [
        "Python",
        "Python/subtree-removal-game-with-fibonacci-tree.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Math, `Sprague-Grundy Theorem`, `Colon Principle`"
  },
  {
    "Index": 2006,
    "Title": "[Count Number of Pairs With Absolute Difference K](https://leetcode.com/problems/count-number-of-pairs-with-absolute-difference-k/)",
    "Solution": [
      [
        "C++",
        "C++/count-number-of-pairs-with-absolute-difference-k.cpp"
      ],
      [
        "Python",
        "Python/count-number-of-pairs-with-absolute-difference-k.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "variant of [Two Sum](https://leetcode.com/problems/two-sum/)"
  },
  {
    "Index": 2007,
    "Title": "[Find Original Array From Doubled Array](https://leetcode.com/problems/find-original-array-from-doubled-array/)",
    "Solution": [
      [
        "C++",
        "C++/find-original-array-from-doubled-array.cpp"
      ],
      [
        "Python",
        "Python/find-original-array-from-doubled-array.py"
      ]
    ],
    "Time": "_O(n + klogk)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Array of Doubled Pairs](https://leetcode.com/problems/array-of-doubled-pairs/)"
  },
  {
    "Index": 2008,
    "Title": "[Maximum Earnings From Taxi](https://leetcode.com/problems/maximum-earnings-from-taxi/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-earnings-from-taxi.cpp"
      ],
      [
        "Python",
        "Python/maximum-earnings-from-taxi.py"
      ]
    ],
    "Time": "_O(n + mlogm)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2009,
    "Title": "[Minimum Number of Operations to Make Array Continuous](https://leetcode.com/problems/minimum-number-of-operations-to-make-array-continuous/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-operations-to-make-array-continuous.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-operations-to-make-array-continuous.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2010,
    "Title": "[The Number of Seniors and Juniors to Join the Company II](https://leetcode.com/problems/the-number-of-seniors-and-juniors-to-join-the-company-ii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/the-number-of-seniors-and-juniors-to-join-the-company.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2011,
    "Title": "[Final Value of Variable After Performing Operations](https://leetcode.com/problems/final-value-of-variable-after-performing-operations/)",
    "Solution": [
      [
        "C++",
        "C++/final-value-of-variable-after-performing-operations.cpp"
      ],
      [
        "Python",
        "Python/final-value-of-variable-after-performing-operations.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2012,
    "Title": "[Sum of Beauty in the Array](https://leetcode.com/problems/sum-of-beauty-in-the-array/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-beauty-in-the-array.cpp"
      ],
      [
        "Python",
        "Python/sum-of-beauty-in-the-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2013,
    "Title": "[Detect Squares](https://leetcode.com/problems/detect-squares/)",
    "Solution": [
      [
        "C++",
        "C++/detect-squares.cpp"
      ],
      [
        "Python",
        "Python/detect-squares.py"
      ]
    ],
    "Time": "ctor: _O(1)_<br>add: _O(1)_<br>count: _O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2014,
    "Title": "[Longest Subsequence Repeated k Times](https://leetcode.com/problems/longest-subsequence-repeated-k-times/)",
    "Solution": [
      [
        "C++",
        "C++/longest-subsequence-repeated-k-times.cpp"
      ],
      [
        "Python",
        "Python/longest-subsequence-repeated-k-times.py"
      ]
    ],
    "Time": "_O(n * (n/k)!)_",
    "Space": "_O(n/k)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2015,
    "Title": "[Average Height of Buildings in Each Segment](https://leetcode.com/problems/average-height-of-buildings-in-each-segment/)",
    "Solution": [
      [
        "C++",
        "C++/average-height-of-buildings-in-each-segment.cpp"
      ],
      [
        "Python",
        "Python/average-height-of-buildings-in-each-segment.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2016,
    "Title": "[Maximum Difference Between Increasing Elements](https://leetcode.com/problems/maximum-difference-between-increasing-elements/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-difference-between-increasing-elements.cpp"
      ],
      [
        "Python",
        "Python/maximum-difference-between-increasing-elements.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "variant of [Best Time to Buy and Sell Stock](https://leetcode.com/problems/best-time-to-buy-and-sell-stock/)"
  },
  {
    "Index": 2017,
    "Title": "[Grid Game](https://leetcode.com/problems/grid-game/)",
    "Solution": [
      [
        "C++",
        "C++/grid-game.cpp"
      ],
      [
        "Python",
        "Python/grid-game.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2018,
    "Title": "[Check if Word Can Be Placed In Crossword](https://leetcode.com/problems/check-if-word-can-be-placed-in-crossword/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-word-can-be-placed-in-crossword.cpp"
      ],
      [
        "Python",
        "Python/check-if-word-can-be-placed-in-crossword.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2019,
    "Title": "[The Score of Students Solving Math Expression](https://leetcode.com/problems/the-score-of-students-solving-math-expression/)",
    "Solution": [
      [
        "C++",
        "C++/the-score-of-students-solving-math-expression.cpp"
      ],
      [
        "Python",
        "Python/the-score-of-students-solving-math-expression.py"
      ]
    ],
    "Time": "_O(n^3 * a^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Burst Balloons](https://leetcode.com/problems/burst-balloons/)"
  },
  {
    "Index": 2020,
    "Title": "[Number of Accounts That Did Not Stream](https://leetcode.com/problems/number-of-accounts-that-did-not-stream/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/number-of-accounts-that-did-not-stream.sql"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2021,
    "Title": "[Brightest Position on Street](https://leetcode.com/problems/brightest-position-on-street/)",
    "Solution": [
      [
        "C++",
        "C++/brightest-position-on-street.cpp"
      ],
      [
        "Python",
        "Python/brightest-position-on-street.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2022,
    "Title": "[Convert 1D Array Into 2D Array](https://leetcode.com/problems/convert-1d-array-into-2d-array/)",
    "Solution": [
      [
        "C++",
        "C++/convert-1d-array-into-2d-array.cpp"
      ],
      [
        "Python",
        "Python/convert-1d-array-into-2d-array.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2023,
    "Title": "[Number of Pairs of Strings With Concatenation Equal to Target](https://leetcode.com/problems/number-of-pairs-of-strings-with-concatenation-equal-to-target/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-pairs-of-strings-with-concatenation-equal-to-target.cpp"
      ],
      [
        "Python",
        "Python/number-of-pairs-of-strings-with-concatenation-equal-to-target.py"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Two Sum](https://leetcode.com/problems/two-sum/)"
  },
  {
    "Index": 2024,
    "Title": "[Maximize the Confusion of an Exam](https://leetcode.com/problems/maximize-the-confusion-of-an-exam/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-the-confusion-of-an-exam.cpp"
      ],
      [
        "Python",
        "Python/maximize-the-confusion-of-an-exam.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Longest Repeating Character Replacement](https://leetcode.com/problems/longest-repeating-character-replacement/)",
    "Note": "Sliding Window"
  },
  {
    "Index": 2025,
    "Title": "[Maximum Number of Ways to Partition an Array](https://leetcode.com/problems/maximum-number-of-ways-to-partition-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-ways-to-partition-an-array.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-ways-to-partition-an-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2026,
    "Title": "[Low-Quality Problems](https://leetcode.com/problems/low-quality-problems/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/low-quality-problems.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2027,
    "Title": "[Minimum Moves to Convert String](https://leetcode.com/problems/minimum-moves-to-convert-string/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-moves-to-convert-string.cpp"
      ],
      [
        "Python",
        "Python/minimum-moves-to-convert-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2028,
    "Title": "[Find Missing Observations](https://leetcode.com/problems/find-missing-observations/)",
    "Solution": [
      [
        "C++",
        "C++/find-missing-observations.cpp"
      ],
      [
        "Python",
        "Python/find-missing-observations.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2029,
    "Title": "[Stone Game IX](https://leetcode.com/problems/stone-game-ix/)",
    "Solution": [
      [
        "C++",
        "C++/stone-game-ix.cpp"
      ],
      [
        "Python",
        "Python/stone-game-ix.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2030,
    "Title": "[Smallest K-Length Subsequence With Occurrences of a Letter](https://leetcode.com/problems/smallest-k-length-subsequence-with-occurrences-of-a-letter/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-k-length-subsequence-with-occurrences-of-a-letter.cpp"
      ],
      [
        "Python",
        "Python/smallest-k-length-subsequence-with-occurrences-of-a-letter.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2031,
    "Title": "[Count Subarrays With More Ones Than Zeros](https://leetcode.com/problems/count-subarrays-with-more-ones-than-zeros/)",
    "Solution": [
      [
        "C++",
        "C++/count-subarrays-with-more-ones-than-zeros.cpp"
      ],
      [
        "Python",
        "Python/count-subarrays-with-more-ones-than-zeros.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2032,
    "Title": "[Two Out of Three](https://leetcode.com/problems/two-out-of-three/)",
    "Solution": [
      [
        "C++",
        "C++/two-out-of-three.cpp"
      ],
      [
        "Python",
        "Python/two-out-of-three.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(min(n, r))_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2033,
    "Title": "[Minimum Operations to Make a Uni-Value Grid](https://leetcode.com/problems/minimum-operations-to-make-a-uni-value-grid/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-make-a-uni-value-grid.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-make-a-uni-value-grid.py"
      ]
    ],
    "Time": "_O(m * n)_  on average",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Minimum Moves to Equal Array Elements II](https://leetcode.com/problems/minimum-moves-to-equal-array-elements-ii/)"
  },
  {
    "Index": 2034,
    "Title": "[Stock Price Fluctuation](https://leetcode.com/problems/stock-price-fluctuation/)",
    "Solution": [
      [
        "C++",
        "C++/stock-price-fluctuation.cpp"
      ],
      [
        "Python",
        "Python/stock-price-fluctuation.py"
      ]
    ],
    "Time": "ctor: _O(1)_<br>update: _O(logn)_<br>current: _O(1)_<br>max: _O(1)_<br>min: _O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2035,
    "Title": "[Partition Array Into Two Arrays to Minimize Sum Difference](https://leetcode.com/problems/partition-array-into-two-arrays-to-minimize-sum-difference/)",
    "Solution": [
      [
        "C++",
        "C++/partition-array-into-two-arrays-to-minimize-sum-difference.cpp"
      ],
      [
        "Python",
        "Python/partition-array-into-two-arrays-to-minimize-sum-difference.py"
      ]
    ],
    "Time": "_O(n * 2^n)_",
    "Space": "_O(2^n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2036,
    "Title": "[Maximum Alternating Subarray Sum](https://leetcode.com/problems/maximum-alternating-subarray-sum/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-alternating-subarray-sum.cpp"
      ],
      [
        "Python",
        "Python/maximum-alternating-subarray-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Maximum Alternating Subsequence Sum](https://leetcode.com/problems/maximum-alternating-subsequence-sum/), 🔒"
  },
  {
    "Index": 2037,
    "Title": "[Minimum Number of Moves to Seat Everyone](https://leetcode.com/problems/minimum-number-of-moves-to-seat-everyone/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-moves-to-seat-everyone.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-moves-to-seat-everyone.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Greedy"
  },
  {
    "Index": 2038,
    "Title": "[Remove Colored Pieces if Both Neighbors are the Same Color](https://leetcode.com/problems/remove-colored-pieces-if-both-neighbors-are-the-same-color/)",
    "Solution": [
      [
        "C++",
        "C++/remove-colored-pieces-if-both-neighbors-are-the-same-color.cpp"
      ],
      [
        "Python",
        "Python/remove-colored-pieces-if-both-neighbors-are-the-same-color.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2039,
    "Title": "[The Time When the Network Becomes Idle](https://leetcode.com/problems/the-time-when-the-network-becomes-idle/)",
    "Solution": [
      [
        "C++",
        "C++/the-time-when-the-network-becomes-idle.cpp"
      ],
      [
        "Python",
        "Python/the-time-when-the-network-becomes-idle.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "E\\",
    "Difficulty": ")_",
    "Tag": "_O(\\",
    "Note": "E\\"
  },
  {
    "Index": 2040,
    "Title": "[Kth Smallest Product of Two Sorted Arrays](https://leetcode.com/problems/kth-smallest-product-of-two-sorted-arrays/)",
    "Solution": [
      [
        "C++",
        "C++/kth-smallest-product-of-two-sorted-arrays.cpp"
      ],
      [
        "Python",
        "Python/kth-smallest-product-of-two-sorted-arrays.py"
      ]
    ],
    "Time": "_O((m + n) * logr)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Binary Search, Two Pointers"
  },
  {
    "Index": 2041,
    "Title": "[Accepted Candidates From the Interviews](https://leetcode.com/problems/accepted-candidates-from-the-interviews/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/accepted-candidates-from-the-interviews.sql"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2042,
    "Title": "[Check if Numbers Are Ascending in a Sentence](https://leetcode.com/problems/check-if-numbers-are-ascending-in-a-sentence/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-numbers-are-ascending-in-a-sentence.cpp"
      ],
      [
        "Python",
        "Python/check-if-numbers-are-ascending-in-a-sentence.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2043,
    "Title": "[Simple Bank System](https://leetcode.com/problems/simple-bank-system/)",
    "Solution": [
      [
        "C++",
        "C++/simple-bank-system.cpp"
      ],
      [
        "Python",
        "Python/simple-bank-system.py"
      ]
    ],
    "Time": "ctor: _O(1)_<br>transer: _O(1)_<br>deposit: _O(1)_<br>withdraw: _O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2044,
    "Title": "[Count Number of Maximum Bitwise-OR Subsets](https://leetcode.com/problems/count-number-of-maximum-bitwise-or-subsets/)",
    "Solution": [
      [
        "C++",
        "C++/count-number-of-maximum-bitwise-or-subsets.cpp"
      ],
      [
        "Python",
        "Python/count-number-of-maximum-bitwise-or-subsets.py"
      ]
    ],
    "Time": "_O(min(2^n, m * n))_",
    "Space": "_O(min(2^n, m))_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2045,
    "Title": "[Second Minimum Time to Reach Destination](https://leetcode.com/problems/second-minimum-time-to-reach-destination/)",
    "Solution": [
      [
        "C++",
        "C++/second-minimum-time-to-reach-destination.cpp"
      ],
      [
        "Python",
        "Python/second-minimum-time-to-reach-destination.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "E\\",
    "Difficulty": ")_",
    "Tag": "_O(\\",
    "Note": "E\\"
  },
  {
    "Index": 2046,
    "Title": "[Sort Linked List Already Sorted Using Absolute Values](https://leetcode.com/problems/sort-linked-list-already-sorted-using-absolute-values/)",
    "Solution": [
      [
        "C++",
        "C++/sort-linked-list-already-sorted-using-absolute-values.cpp"
      ],
      [
        "Python",
        "Python/sort-linked-list-already-sorted-using-absolute-values.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2047,
    "Title": "[Number of Valid Words in a Sentence](https://leetcode.com/problems/number-of-valid-words-in-a-sentence/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-valid-words-in-a-sentence.cpp"
      ],
      [
        "Python",
        "Python/number-of-valid-words-in-a-sentence.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2048,
    "Title": "[Next Greater Numerically Balanced Number](https://leetcode.com/problems/next-greater-numerically-balanced-number/)",
    "Solution": [
      [
        "C++",
        "C++/next-greater-numerically-balanced-number.cpp"
      ],
      [
        "Python",
        "Python/next-greater-numerically-balanced-number.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Permutations, Precompute, Binary Search"
  },
  {
    "Index": 2049,
    "Title": "[Count Nodes With the Highest Score](https://leetcode.com/problems/count-nodes-with-the-highest-score/)",
    "Solution": [
      [
        "C++",
        "C++/count-nodes-with-the-highest-score.cpp"
      ],
      [
        "Python",
        "Python/count-nodes-with-the-highest-score.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2050,
    "Title": "[Parallel Courses III](https://leetcode.com/problems/parallel-courses-iii/)",
    "Solution": [
      [
        "C++",
        "C++/parallel-courses-iii.cpp"
      ],
      [
        "Python",
        "Python/parallel-courses-iii.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "V\\",
    "Difficulty": "+ \\",
    "Tag": "E\\",
    "Note": ")_"
  },
  {
    "Index": 2051,
    "Title": "[The Category of Each Member in the Store](https://leetcode.com/problems/the-category-of-each-member-in-the-store/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/the-category-of-each-member-in-the-store.sql"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2052,
    "Title": "[Minimum Cost to Separate Sentence Into Rows](https://leetcode.com/problems/minimum-cost-to-separate-sentence-into-rows/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-to-separate-sentence-into-rows.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-to-separate-sentence-into-rows.py"
      ]
    ],
    "Time": "_O(s + n * k)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2053,
    "Title": "[Kth Distinct String in an Array](https://leetcode.com/problems/kth-distinct-string-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/kth-distinct-string-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/kth-distinct-string-in-an-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2054,
    "Title": "[Two Best Non-Overlapping Events](https://leetcode.com/problems/two-best-non-overlapping-events/)",
    "Solution": [
      [
        "C++",
        "C++/two-best-non-overlapping-events.cpp"
      ],
      [
        "Python",
        "Python/two-best-non-overlapping-events.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Line Sweep, Heap"
  },
  {
    "Index": 2055,
    "Title": "[Plates Between Candles](https://leetcode.com/problems/plates-between-candles/)",
    "Solution": [
      [
        "C++",
        "C++/plates-between-candles.cpp"
      ],
      [
        "Python",
        "Python/plates-between-candles.py"
      ]
    ],
    "Time": "_O(n + q)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2056,
    "Title": "[Number of Valid Move Combinations On Chessboard](https://leetcode.com/problems/number-of-valid-move-combinations-on-chessboard/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-valid-move-combinations-on-chessboard.cpp"
      ],
      [
        "Python",
        "Python/number-of-valid-move-combinations-on-chessboard.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2057,
    "Title": "[Smallest Index With Equal Value](https://leetcode.com/problems/smallest-index-with-equal-value/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-index-with-equal-value.cpp"
      ],
      [
        "Python",
        "Python/smallest-index-with-equal-value.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2058,
    "Title": "[Find the Minimum and Maximum Number of Nodes Between Critical Points](https://leetcode.com/problems/find-the-minimum-and-maximum-number-of-nodes-between-critical-points/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-minimum-and-maximum-number-of-nodes-between-critical-points.cpp"
      ],
      [
        "Python",
        "Python/find-the-minimum-and-maximum-number-of-nodes-between-critical-points.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2059,
    "Title": "[Minimum Operations to Convert Number](https://leetcode.com/problems/minimum-operations-to-convert-number/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-convert-number.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-convert-number.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2060,
    "Title": "[Check if an Original String Exists Given Two Encoded Strings](https://leetcode.com/problems/check-if-an-original-string-exists-given-two-encoded-strings/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-an-original-string-exists-given-two-encoded-strings.cpp"
      ],
      [
        "Python",
        "Python/check-if-an-original-string-exists-given-two-encoded-strings.py"
      ]
    ],
    "Time": "_O(m * n * k)_",
    "Space": "_O(min(m, n) * k)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2061,
    "Title": "[Number of Spaces Cleaning Robot Cleaned](https://leetcode.com/problems/number-of-spaces-cleaning-robot-cleaned/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-spaces-cleaning-robot-cleaned.cpp"
      ],
      [
        "Python",
        "Python/number-of-spaces-cleaning-robot-cleaned.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2062,
    "Title": "[Count Vowel Substrings of a String](https://leetcode.com/problems/count-vowel-substrings-of-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/count-vowel-substrings-of-a-string.cpp"
      ],
      [
        "Python",
        "Python/count-vowel-substrings-of-a-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "variant of [Count Number of Nice Subarrays](https://leetcode.com/problems/count-number-of-nice-subarrays/)"
  },
  {
    "Index": 2063,
    "Title": "[Vowels of All Substrings](https://leetcode.com/problems/vowels-of-all-substrings/)",
    "Solution": [
      [
        "C++",
        "C++/vowels-of-all-substrings.cpp"
      ],
      [
        "Python",
        "Python/vowels-of-all-substrings.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2064,
    "Title": "[Minimized Maximum of Products Distributed to Any Store](https://leetcode.com/problems/minimized-maximum-of-products-distributed-to-any-store/)",
    "Solution": [
      [
        "C++",
        "C++/minimized-maximum-of-products-distributed-to-any-store.cpp"
      ],
      [
        "Python",
        "Python/minimized-maximum-of-products-distributed-to-any-store.py"
      ]
    ],
    "Time": "_O(nlogm)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Minimum Limit of Balls in a Bag](https://leetcode.com/problems/minimum-limit-of-balls-in-a-bag/)"
  },
  {
    "Index": 2065,
    "Title": "[Maximum Path Quality of a Graph](https://leetcode.com/problems/maximum-path-quality-of-a-graph/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-path-quality-of-a-graph.cpp"
      ],
      [
        "Python",
        "Python/maximum-path-quality-of-a-graph.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "V\\",
    "Difficulty": "+ \\",
    "Tag": "E\\",
    "Note": "+ 4^10)_"
  },
  {
    "Index": 2066,
    "Title": "[Account Balance](https://leetcode.com/problems/account-balance/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/account-balance.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2067,
    "Title": "[Number of Equal Count Substrings](https://leetcode.com/problems/number-of-equal-count-substrings/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-equal-count-substrings.cpp"
      ],
      [
        "Python",
        "Python/number-of-equal-count-substrings.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2068,
    "Title": "[Check Whether Two Strings are Almost Equivalent](https://leetcode.com/problems/check-whether-two-strings-are-almost-equivalent/)",
    "Solution": [
      [
        "C++",
        "C++/check-whether-two-strings-are-almost-equivalent.cpp"
      ],
      [
        "Python",
        "Python/check-whether-two-strings-are-almost-equivalent.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2069,
    "Title": "[Walking Robot Simulation II](https://leetcode.com/problems/walking-robot-simulation-ii/)",
    "Solution": [
      [
        "C++",
        "C++/walking-robot-simulation-ii.cpp"
      ],
      [
        "Python",
        "Python/walking-robot-simulation-ii.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2070,
    "Title": "[Most Beautiful Item for Each Query](https://leetcode.com/problems/most-beautiful-item-for-each-query/)",
    "Solution": [
      [
        "C++",
        "C++/most-beautiful-item-for-each-query.cpp"
      ],
      [
        "Python",
        "Python/most-beautiful-item-for-each-query.py"
      ]
    ],
    "Time": "_O(nlogn + qlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Sort, Binary Search"
  },
  {
    "Index": 2071,
    "Title": "[Maximum Number of Tasks You Can Assign](https://leetcode.com/problems/maximum-number-of-tasks-you-can-assign/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-tasks-you-can-assign.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-tasks-you-can-assign.py"
      ]
    ],
    "Time": "_O(n * (logn)^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Greedy, Binary Search, Sorted List"
  },
  {
    "Index": 2072,
    "Title": "[The Winner University](https://leetcode.com/problems/the-winner-university/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/the-winner-university.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2073,
    "Title": "[Time Needed to Buy Tickets](https://leetcode.com/problems/time-needed-to-buy-tickets/)",
    "Solution": [
      [
        "C++",
        "C++/time-needed-to-buy-tickets.cpp"
      ],
      [
        "Python",
        "Python/time-needed-to-buy-tickets.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2074,
    "Title": "[Reverse Nodes in Even Length Groups](https://leetcode.com/problems/reverse-nodes-in-even-length-groups/)",
    "Solution": [
      [
        "C++",
        "C++/reverse-nodes-in-even-length-groups.cpp"
      ],
      [
        "Python",
        "Python/reverse-nodes-in-even-length-groups.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2075,
    "Title": "[Decode the Slanted Ciphertext](https://leetcode.com/problems/decode-the-slanted-ciphertext/)",
    "Solution": [
      [
        "C++",
        "C++/decode-the-slanted-ciphertext.cpp"
      ],
      [
        "Python",
        "Python/decode-the-slanted-ciphertext.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2076,
    "Title": "[Process Restricted Friend Requests](https://leetcode.com/problems/process-restricted-friend-requests/)",
    "Solution": [
      [
        "C++",
        "C++/process-restricted-friend-requests.cpp"
      ],
      [
        "Python",
        "Python/process-restricted-friend-requests.py"
      ]
    ],
    "Time": "_O(n * r)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Union Find"
  },
  {
    "Index": 2077,
    "Title": "[Paths in Maze That Lead to Same Room](https://leetcode.com/problems/paths-in-maze-that-lead-to-same-room/)",
    "Solution": [
      [
        "C++",
        "C++/paths-in-maze-that-lead-to-same-room.cpp"
      ],
      [
        "Python",
        "Python/paths-in-maze-that-lead-to-same-room.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "V\\",
    "Difficulty": "^3)_",
    "Tag": "_O(\\",
    "Note": "E\\"
  },
  {
    "Index": 2078,
    "Title": "[Two Furthest Houses With Different Colors](https://leetcode.com/problems/two-furthest-houses-with-different-colors/)",
    "Solution": [
      [
        "C++",
        "C++/two-furthest-houses-with-different-colors.cpp"
      ],
      [
        "Python",
        "Python/two-furthest-houses-with-different-colors.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2079,
    "Title": "[Watering Plants](https://leetcode.com/problems/watering-plants/)",
    "Solution": [
      [
        "C++",
        "C++/watering-plants.cpp"
      ],
      [
        "Python",
        "Python/watering-plants.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2080,
    "Title": "[Range Frequency Queries](https://leetcode.com/problems/range-frequency-queries/)",
    "Solution": [
      [
        "C++",
        "C++/range-frequency-queries.cpp"
      ],
      [
        "Python",
        "Python/range-frequency-queries.py"
      ]
    ],
    "Time": "ctor: _O(n)_<br>query: _O(logn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2081,
    "Title": "[Sum of k-Mirror Numbers](https://leetcode.com/problems/sum-of-k-mirror-numbers/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-k-mirror-numbers.cpp"
      ],
      [
        "Python",
        "Python/sum-of-k-mirror-numbers.py"
      ]
    ],
    "Time": "_O(10^6)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "String, Palindrome, Brute Force"
  },
  {
    "Index": 2082,
    "Title": "[The Number of Rich Customers](https://leetcode.com/problems/the-number-of-rich-customers/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/the-number-of-rich-customers.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2083,
    "Title": "[Substrings That Begin and End With the Same Letter](https://leetcode.com/problems/substrings-that-begin-and-end-with-the-same-letter/)",
    "Solution": [
      [
        "C++",
        "C++/substrings-that-begin-and-end-with-the-same-letter.cpp"
      ],
      [
        "Python",
        "Python/substrings-that-begin-and-end-with-the-same-letter.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2084,
    "Title": "[Drop Type 1 Orders for Customers With Type 0 Orders](https://leetcode.com/problems/drop-type-1-orders-for-customers-with-type-0-orders/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/drop-type-1-orders-for-customers-with-type-0-orders.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2085,
    "Title": "[Count Common Words With One Occurrence](https://leetcode.com/problems/count-common-words-with-one-occurrence/)",
    "Solution": [
      [
        "C++",
        "C++/count-common-words-with-one-occurrence.cpp"
      ],
      [
        "Python",
        "Python/count-common-words-with-one-occurrence.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2086,
    "Title": "[Minimum Number of Buckets Required to Collect Rainwater from Houses](https://leetcode.com/problems/minimum-number-of-buckets-required-to-collect-rainwater-from-houses/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-buckets-required-to-collect-rainwater-from-houses.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-buckets-required-to-collect-rainwater-from-houses.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Greedy"
  },
  {
    "Index": 2087,
    "Title": "[Minimum Cost Homecoming of a Robot in a Grid](https://leetcode.com/problems/minimum-cost-homecoming-of-a-robot-in-a-grid/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-homecoming-of-a-robot-in-a-grid.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-homecoming-of-a-robot-in-a-grid.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Greedy"
  },
  {
    "Index": 2088,
    "Title": "[Count Fertile Pyramids in a Land](https://leetcode.com/problems/count-fertile-pyramids-in-a-land/)",
    "Solution": [
      [
        "C++",
        "C++/count-fertile-pyramids-in-a-land.cpp"
      ],
      [
        "Python",
        "Python/count-fertile-pyramids-in-a-land.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2089,
    "Title": "[Find Target Indices After Sorting Array](https://leetcode.com/problems/find-target-indices-after-sorting-array/)",
    "Solution": [
      [
        "C++",
        "C++/find-target-indices-after-sorting-array.cpp"
      ],
      [
        "Python",
        "Python/find-target-indices-after-sorting-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Counting Sort"
  },
  {
    "Index": 2090,
    "Title": "[K Radius Subarray Averages](https://leetcode.com/problems/k-radius-subarray-averages/)",
    "Solution": [
      [
        "C++",
        "C++/k-radius-subarray-averages.cpp"
      ],
      [
        "Python",
        "Python/k-radius-subarray-averages.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2091,
    "Title": "[Removing Minimum and Maximum From Array](https://leetcode.com/problems/removing-minimum-and-maximum-from-array/)",
    "Solution": [
      [
        "C++",
        "C++/removing-minimum-and-maximum-from-array.cpp"
      ],
      [
        "Python",
        "Python/removing-minimum-and-maximum-from-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2092,
    "Title": "[Find All People With Secret](https://leetcode.com/problems/find-all-people-with-secret/)",
    "Solution": [
      [
        "C++",
        "C++/find-all-people-with-secret.cpp"
      ],
      [
        "Python",
        "Python/find-all-people-with-secret.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(nlogn)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "BFS, DFS, Union Find"
  },
  {
    "Index": 2093,
    "Title": "[Minimum Path Cost in a Hidden Grid](https://leetcode.com/problems/minimum-cost-to-reach-city-with-discounts/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-to-reach-city-with-discounts.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-to-reach-city-with-discounts.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "E\\",
    "Difficulty": "* log\\",
    "Tag": "V\\",
    "Note": ")_"
  },
  {
    "Index": 2094,
    "Title": "[Finding 3-Digit Even Numbers](https://leetcode.com/problems/finding-3-digit-even-numbers/)",
    "Solution": [
      [
        "C++",
        "C++/finding-3-digit-even-numbers.cpp"
      ],
      [
        "Python",
        "Python/finding-3-digit-even-numbers.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2095,
    "Title": "[Delete the Middle Node of a Linked List](https://leetcode.com/problems/delete-the-middle-node-of-a-linked-list/)",
    "Solution": [
      [
        "C++",
        "C++/delete-the-middle-node-of-a-linked-list.cpp"
      ],
      [
        "Python",
        "Python/delete-the-middle-node-of-a-linked-list.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2096,
    "Title": "[Step-By-Step Directions From a Binary Tree Node to Another](https://leetcode.com/problems/step-by-step-directions-from-a-binary-tree-node-to-another/)",
    "Solution": [
      [
        "C++",
        "C++/step-by-step-directions-from-a-binary-tree-node-to-another.cpp"
      ],
      [
        "Python",
        "Python/step-by-step-directions-from-a-binary-tree-node-to-another.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2097,
    "Title": "[Valid Arrangement of Pairs](https://leetcode.com/problems/valid-arrangement-of-pairs/)",
    "Solution": [
      [
        "C++",
        "C++/valid-arrangement-of-pairs.cpp"
      ],
      [
        "Python",
        "Python/valid-arrangement-of-pairs.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "V\\",
    "Difficulty": "+ \\",
    "Tag": "E\\",
    "Note": ")_"
  },
  {
    "Index": 2098,
    "Title": "[Subsequence of Size K With the Largest Even Sum](https://leetcode.com/problems/subsequence-of-size-k-with-the-largest-even-sum/)",
    "Solution": [
      [
        "C++",
        "C++/subsequence-of-size-k-with-the-largest-even-sum.cpp"
      ],
      [
        "Python",
        "Python/subsequence-of-size-k-with-the-largest-even-sum.py"
      ]
    ],
    "Time": "_O(n)_ on average",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2099,
    "Title": "[Find Subsequence of Length K With the Largest Sum](https://leetcode.com/problems/find-subsequence-of-length-k-with-the-largest-sum/)",
    "Solution": [
      [
        "C++",
        "C++/find-subsequence-of-length-k-with-the-largest-sum.cpp"
      ],
      [
        "Python",
        "Python/find-subsequence-of-length-k-with-the-largest-sum.py"
      ]
    ],
    "Time": "_O(n)_ on average",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2100,
    "Title": "[Find Good Days to Rob the Bank](https://leetcode.com/problems/find-good-days-to-rob-the-bank/)",
    "Solution": [
      [
        "C++",
        "C++/find-good-days-to-rob-the-bank.cpp"
      ],
      [
        "Python",
        "Python/find-good-days-to-rob-the-bank.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2101,
    "Title": "[Detonate the Maximum Bombs](https://leetcode.com/problems/detonate-the-maximum-bombs/)",
    "Solution": [
      [
        "C++",
        "C++/detonate-the-maximum-bombs.cpp"
      ],
      [
        "Python",
        "Python/detonate-the-maximum-bombs.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "V\\",
    "Difficulty": "^2 + \\V\\",
    "Tag": "* \\",
    "Note": "E\\"
  },
  {
    "Index": 2102,
    "Title": "[Sequentially Ordinal Rank Tracker](https://leetcode.com/problems/sequentially-ordinal-rank-tracker/)",
    "Solution": [
      [
        "C++",
        "C++/sequentially-ordinal-rank-tracker.cpp"
      ],
      [
        "Python",
        "Python/sequentially-ordinal-rank-tracker.py"
      ]
    ],
    "Time": "add: _O(logn)_<br>get: _O(logn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2103,
    "Title": "[Rings and Rods](https://leetcode.com/problems/rings-and-rods/)",
    "Solution": [
      [
        "C++",
        "C++/rings-and-rods.cpp"
      ],
      [
        "Python",
        "Python/rings-and-rods.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2104,
    "Title": "[Sum of Subarray Ranges](https://leetcode.com/problems/sum-of-subarray-ranges/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-subarray-ranges.cpp"
      ],
      [
        "Python",
        "Python/sum-of-subarray-ranges.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2105,
    "Title": "[Watering Plants II](https://leetcode.com/problems/watering-plants-ii/)",
    "Solution": [
      [
        "C++",
        "C++/watering-plants-ii.cpp"
      ],
      [
        "Python",
        "Python/watering-plants-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2106,
    "Title": "[Maximum Fruits Harvested After at Most K Steps](https://leetcode.com/problems/maximum-fruits-harvested-after-at-most-k-steps/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-fruits-harvested-after-at-most-k-steps.cpp"
      ],
      [
        "Python",
        "Python/maximum-fruits-harvested-after-at-most-k-steps.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2107,
    "Title": "[Number of Unique Flavors After Sharing K Candies](https://leetcode.com/problems/number-of-unique-flavors-after-sharing-k-candies/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-unique-flavors-after-sharing-k-candies.cpp"
      ],
      [
        "Python",
        "Python/number-of-unique-flavors-after-sharing-k-candies.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2108,
    "Title": "[Find First Palindromic String in the Array](https://leetcode.com/problems/find-first-palindromic-string-in-the-array/)",
    "Solution": [
      [
        "C++",
        "C++/find-first-palindromic-string-in-the-array.cpp"
      ],
      [
        "Python",
        "Python/find-first-palindromic-string-in-the-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2109,
    "Title": "[Adding Spaces to a String](https://leetcode.com/problems/adding-spaces-to-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/adding-spaces-to-a-string.cpp"
      ],
      [
        "Python",
        "Python/adding-spaces-to-a-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Inplace"
  },
  {
    "Index": 2110,
    "Title": "[Number of Smooth Descent Periods of a Stock](https://leetcode.com/problems/number-of-smooth-descent-periods-of-a-stock/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-smooth-descent-periods-of-a-stock.cpp"
      ],
      [
        "Python",
        "Python/number-of-smooth-descent-periods-of-a-stock.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2111,
    "Title": "[Minimum Operations to Make the Array K-Increasing](https://leetcode.com/problems/minimum-operations-to-make-the-array-k-increasing/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-make-the-array-k-increasing.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-make-the-array-k-increasing.py"
      ]
    ],
    "Time": "_O(nlog(n/k))_",
    "Space": "_O(n/k)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Longest Increasing Subsequence](https://leetcode.com/problems/longest-increasing-subsequence/)"
  },
  {
    "Index": 2112,
    "Title": "[The Airport With the Most Traffic](https://leetcode.com/problems/the-airport-with-the-most-traffic/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/the-airport-with-the-most-traffic.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2113,
    "Title": "[Elements in Array After Removing and Replacing Elements](https://leetcode.com/problems/elements-in-array-after-removing-and-replacing-elements/)",
    "Solution": [
      [
        "C++",
        "C++/elements-in-array-after-removing-and-replacing-elements.cpp"
      ],
      [
        "Python",
        "Python/elements-in-array-after-removing-and-replacing-elements.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2114,
    "Title": "[Maximum Number of Words Found in Sentences](https://leetcode.com/problems/maximum-number-of-words-found-in-sentences/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-words-found-in-sentences.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-words-found-in-sentences.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2115,
    "Title": "[Find All Possible Recipes from Given Supplies](https://leetcode.com/problems/find-all-possible-recipes-from-given-supplies/)",
    "Solution": [
      [
        "C++",
        "C++/find-all-possible-recipes-from-given-supplies.cpp"
      ],
      [
        "Python",
        "Python/find-all-possible-recipes-from-given-supplies.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "E\\",
    "Difficulty": ")_",
    "Tag": "_O(\\",
    "Note": "E\\"
  },
  {
    "Index": 2116,
    "Title": "[Check if a Parentheses String Can Be Valid](https://leetcode.com/problems/check-if-a-parentheses-string-can-be-valid/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-a-parentheses-string-can-be-valid.cpp"
      ],
      [
        "Python",
        "Python/check-if-a-parentheses-string-can-be-valid.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2117,
    "Title": "[Abbreviating the Product of a Range](https://leetcode.com/problems/abbreviating-the-product-of-a-range/)",
    "Solution": [
      [
        "C++",
        "C++/abbreviating-the-product-of-a-range.cpp"
      ],
      [
        "Python",
        "Python/abbreviating-the-product-of-a-range.py"
      ]
    ],
    "Time": "_O(r - l)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2118,
    "Title": "[Build the Equation](https://leetcode.com/problems/build-the-equation/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/build-the-equation.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2119,
    "Title": "[A Number After a Double Reversal](https://leetcode.com/problems/a-number-after-a-double-reversal/)",
    "Solution": [
      [
        "C++",
        "C++/a-number-after-a-double-reversal.cpp"
      ],
      [
        "Python",
        "Python/a-number-after-a-double-reversal.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2120,
    "Title": "[Execution of All Suffix Instructions Staying in a Grid](https://leetcode.com/problems/execution-of-all-suffix-instructions-staying-in-a-grid/)",
    "Solution": [
      [
        "C++",
        "C++/execution-of-all-suffix-instructions-staying-in-a-grid.cpp"
      ],
      [
        "Python",
        "Python/execution-of-all-suffix-instructions-staying-in-a-grid.py"
      ]
    ],
    "Time": "_O(m)_",
    "Space": "_O(m)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2121,
    "Title": "[Intervals Between Identical Elements](https://leetcode.com/problems/intervals-between-identical-elements/)",
    "Solution": [
      [
        "C++",
        "C++/intervals-between-identical-elements.cpp"
      ],
      [
        "Python",
        "Python/intervals-between-identical-elements.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2122,
    "Title": "[Recover the Original Array](https://leetcode.com/problems/recover-the-original-array/)",
    "Solution": [
      [
        "C++",
        "C++/recover-the-original-array.cpp"
      ],
      [
        "Python",
        "Python/recover-the-original-array.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2123,
    "Title": "[Minimum Operations to Remove Adjacent Ones in Matrix](https://leetcode.com/problems/minimum-operations-to-remove-adjacent-ones-in-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-remove-adjacent-ones-in-matrix.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-remove-adjacent-ones-in-matrix.py"
      ]
    ],
    "Time": "_O(m * n * sqrt(m * n))_",
    "Space": "_O(m + n)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Maximum Students Taking Exam](https://leetcode.com/problems/maximum-students-taking-exam/), 🔒",
    "Note": "`Hopcroft-Karp Bipartite Matching`, Maximum Independent Set"
  },
  {
    "Index": 2124,
    "Title": "[Check if All A's Appears Before All B's](https://leetcode.com/problems/check-if-all-as-appears-before-all-bs/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-all-as-appears-before-all-bs.cpp"
      ],
      [
        "Python",
        "Python/check-if-all-as-appears-before-all-bs.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2125,
    "Title": "[Number of Laser Beams in a Bank](https://leetcode.com/problems/number-of-laser-beams-in-a-bank/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-laser-beams-in-a-bank.cpp"
      ],
      [
        "Python",
        "Python/number-of-laser-beams-in-a-bank.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2126,
    "Title": "[Destroying Asteroids](https://leetcode.com/problems/destroying-asteroids/)",
    "Solution": [
      [
        "C++",
        "C++/destroying-asteroids.cpp"
      ],
      [
        "Python",
        "Python/destroying-asteroids.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Greedy"
  },
  {
    "Index": 2127,
    "Title": "[Maximum Employees to Be Invited to a Meeting](https://leetcode.com/problems/maximum-employees-to-be-invited-to-a-meeting/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-employees-to-be-invited-to-a-meeting.cpp"
      ],
      [
        "Python",
        "Python/maximum-employees-to-be-invited-to-a-meeting.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2128,
    "Title": "[Remove All Ones With Row and Column Flips](https://leetcode.com/problems/remove-all-ones-with-row-and-column-flips/)",
    "Solution": [
      [
        "C++",
        "C++/remove-all-ones-with-row-and-column-flips.cpp"
      ],
      [
        "Python",
        "Python/remove-all-ones-with-row-and-column-flips.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2129,
    "Title": "[Capitalize the Title](https://leetcode.com/problems/capitalize-the-title/)",
    "Solution": [
      [
        "C++",
        "C++/capitalize-the-title.cpp"
      ],
      [
        "Python",
        "Python/capitalize-the-title.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2130,
    "Title": "[Maximum Twin Sum of a Linked List](https://leetcode.com/problems/maximum-twin-sum-of-a-linked-list/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-twin-sum-of-a-linked-list.cpp"
      ],
      [
        "Python",
        "Python/maximum-twin-sum-of-a-linked-list.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2131,
    "Title": "[Longest Palindrome by Concatenating Two Letter Words](https://leetcode.com/problems/longest-palindrome-by-concatenating-two-letter-words/)",
    "Solution": [
      [
        "C++",
        "C++/longest-palindrome-by-concatenating-two-letter-words.cpp"
      ],
      [
        "Python",
        "Python/longest-palindrome-by-concatenating-two-letter-words.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2132,
    "Title": "[Stamping the Grid](https://leetcode.com/problems/stamping-the-grid/)",
    "Solution": [
      [
        "C++",
        "C++/stamping-the-grid.cpp"
      ],
      [
        "Python",
        "Python/stamping-the-grid.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2133,
    "Title": "[Check if Every Row and Column Contains All Numbers](https://leetcode.com/problems/check-if-every-row-and-column-contains-all-numbers/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-every-row-and-column-contains-all-numbers.cpp"
      ],
      [
        "Python",
        "Python/check-if-every-row-and-column-contains-all-numbers.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2134,
    "Title": "[Minimum Swaps to Group All 1's Together II](https://leetcode.com/problems/minimum-swaps-to-group-all-1s-together-ii/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-swaps-to-group-all-1s-together-ii.cpp"
      ],
      [
        "Python",
        "Python/minimum-swaps-to-group-all-1s-together-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2135,
    "Title": "[Count Words Obtained After Adding a Letter](https://leetcode.com/problems/count-words-obtained-after-adding-a-letter/)",
    "Solution": [
      [
        "C++",
        "C++/count-words-obtained-after-adding-a-letter.cpp"
      ],
      [
        "Python",
        "Python/count-words-obtained-after-adding-a-letter.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Bitmasks"
  },
  {
    "Index": 2136,
    "Title": "[Earliest Possible Day of Full Bloom](https://leetcode.com/problems/earliest-possible-day-of-full-bloom/)",
    "Solution": [
      [
        "C++",
        "C++/earliest-possible-day-of-full-bloom.cpp"
      ],
      [
        "Python",
        "Python/earliest-possible-day-of-full-bloom.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Greedy"
  },
  {
    "Index": 2137,
    "Title": "[Pour Water Between Buckets to Make Water Levels Equal](https://leetcode.com/problems/pour-water-between-buckets-to-make-water-levels-equal/)",
    "Solution": [
      [
        "C++",
        "C++/pour-water-between-buckets-to-make-water-levels-equal.cpp"
      ],
      [
        "Python",
        "Python/pour-water-between-buckets-to-make-water-levels-equal.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2138,
    "Title": "[Divide a String Into Groups of Size k](https://leetcode.com/problems/divide-a-string-into-groups-of-size-k/)",
    "Solution": [
      [
        "C++",
        "C++/divide-a-string-into-groups-of-size-k.cpp"
      ],
      [
        "Python",
        "Python/divide-a-string-into-groups-of-size-k.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2139,
    "Title": "[Minimum Moves to Reach Target Score](https://leetcode.com/problems/minimum-moves-to-reach-target-score/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-moves-to-reach-target-score.cpp"
      ],
      [
        "Python",
        "Python/minimum-moves-to-reach-target-score.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2140,
    "Title": "[Solving Questions With Brainpower](https://leetcode.com/problems/solving-questions-with-brainpower/)",
    "Solution": [
      [
        "C++",
        "C++/solving-questions-with-brainpower.cpp"
      ],
      [
        "Python",
        "Python/solving-questions-with-brainpower.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2141,
    "Title": "[Maximum Running Time of N Computers](https://leetcode.com/problems/maximum-running-time-of-n-computers/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-running-time-of-n-computers.cpp"
      ],
      [
        "Python",
        "Python/maximum-running-time-of-n-computers.py"
      ]
    ],
    "Time": "_O(nlogm)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Greedy, Binary Search"
  },
  {
    "Index": 2142,
    "Title": "[The Number of Passengers in Each Bus I](https://leetcode.com/problems/the-number-of-passengers-in-each-bus-i/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/the-number-of-passengers-in-each-bus-i.sql"
      ]
    ],
    "Time": "_O(p * b + blogb)_",
    "Space": "_O(p * b)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2143,
    "Title": "[Choose Numbers From Two Arrays in Range](https://leetcode.com/problems/choose-numbers-from-two-arrays-in-range/)",
    "Solution": [
      [
        "C++",
        "C++/choose-numbers-from-two-arrays-in-range.cpp"
      ],
      [
        "Python",
        "Python/choose-numbers-from-two-arrays-in-range.py"
      ]
    ],
    "Time": "_O(n^2 * v)_",
    "Space": "_O(n * v)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 2144,
    "Title": "[Minimum Cost of Buying Candies With Discount](https://leetcode.com/problems/minimum-cost-of-buying-candies-with-discount/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-of-buying-candies-with-discount.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-of-buying-candies-with-discount.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Greedy, Sort"
  },
  {
    "Index": 2145,
    "Title": "[Count the Hidden Sequences](https://leetcode.com/problems/count-the-hidden-sequences/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-hidden-sequences.cpp"
      ],
      [
        "Python",
        "Python/count-the-hidden-sequences.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2146,
    "Title": "[K Highest Ranked Items Within a Price Range](https://leetcode.com/problems/k-highest-ranked-items-within-a-price-range/)",
    "Solution": [
      [
        "C++",
        "C++/k-highest-ranked-items-within-a-price-range.cpp"
      ],
      [
        "Python",
        "Python/k-highest-ranked-items-within-a-price-range.py"
      ]
    ],
    "Time": "_O(m * n + klogk)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "BFS, Quick Select, Sort"
  },
  {
    "Index": 2147,
    "Title": "[Number of Ways to Divide a Long Corridor](https://leetcode.com/problems/number-of-ways-to-divide-a-long-corridor/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-ways-to-divide-a-long-corridor.cpp"
      ],
      [
        "Python",
        "Python/number-of-ways-to-divide-a-long-corridor.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Greedy, Combinatorics"
  },
  {
    "Index": 2148,
    "Title": "[Count Elements With Strictly Smaller and Greater Elements](https://leetcode.com/problems/count-elements-with-strictly-smaller-and-greater-elements/)",
    "Solution": [
      [
        "C++",
        "C++/count-elements-with-strictly-smaller-and-greater-elements.cpp"
      ],
      [
        "Python",
        "Python/count-elements-with-strictly-smaller-and-greater-elements.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2149,
    "Title": "[Rearrange Array Elements by Sign](https://leetcode.com/problems/rearrange-array-elements-by-sign/)",
    "Solution": [
      [
        "C++",
        "C++/rearrange-array-elements-by-sign.cpp"
      ],
      [
        "Python",
        "Python/rearrange-array-elements-by-sign.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2150,
    "Title": "[Find All Lonely Numbers in the Array](https://leetcode.com/problems/find-all-lonely-numbers-in-the-array/)",
    "Solution": [
      [
        "C++",
        "C++/find-all-lonely-numbers-in-the-array.cpp"
      ],
      [
        "Python",
        "Python/find-all-lonely-numbers-in-the-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2151,
    "Title": "[Maximum Good People Based on Statements](https://leetcode.com/problems/maximum-good-people-based-on-statements/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-good-people-based-on-statements.cpp"
      ],
      [
        "Python",
        "Python/maximum-good-people-based-on-statements.py"
      ]
    ],
    "Time": "_O(n^2 * 2^n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2152,
    "Title": "[Minimum Number of Lines to Cover Points](https://leetcode.com/problems/minimum-number-of-lines-to-cover-points/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-lines-to-cover-points.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-lines-to-cover-points.py"
      ]
    ],
    "Time": "_O(n * 2^n)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2153,
    "Title": "[The Number of Passengers in Each Bus II](https://leetcode.com/problems/the-number-of-passengers-in-each-bus-ii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/the-number-of-passengers-in-each-bus-ii.sql"
      ]
    ],
    "Time": "_O(p * b + blogb)_",
    "Space": "_O(p * b)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2154,
    "Title": "[Keep Multiplying Found Values by Two](https://leetcode.com/problems/keep-multiplying-found-values-by-two/)",
    "Solution": [
      [
        "C++",
        "C++/keep-multiplying-found-values-by-two.cpp"
      ],
      [
        "Python",
        "Python/keep-multiplying-found-values-by-two.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2155,
    "Title": "[All Divisions With the Highest Score of a Binary Array](https://leetcode.com/problems/all-divisions-with-the-highest-score-of-a-binary-array/)",
    "Solution": [
      [
        "C++",
        "C++/all-divisions-with-the-highest-score-of-a-binary-array.cpp"
      ],
      [
        "Python",
        "Python/all-divisions-with-the-highest-score-of-a-binary-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2156,
    "Title": "[Find Substring With Given Hash Value](https://leetcode.com/problems/find-substring-with-given-hash-value/)",
    "Solution": [
      [
        "C++",
        "C++/find-substring-with-given-hash-value.cpp"
      ],
      [
        "Python",
        "Python/find-substring-with-given-hash-value.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2157,
    "Title": "[Groups of Strings](https://leetcode.com/problems/groups-of-strings/)",
    "Solution": [
      [
        "C++",
        "C++/groups-of-strings.cpp"
      ],
      [
        "Python",
        "Python/groups-of-strings.py"
      ]
    ],
    "Time": "_O(26 * n)_",
    "Space": "_O(26 * n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2158,
    "Title": "[Amount of New Area Painted Each Day](https://leetcode.com/problems/amount-of-new-area-painted-each-day/)",
    "Solution": [
      [
        "C++",
        "C++/amount-of-new-area-painted-each-day.cpp"
      ],
      [
        "Python",
        "Python/amount-of-new-area-painted-each-day.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(r)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 2159,
    "Title": "[Order Two Columns Independently](https://leetcode.com/problems/order-two-columns-independently/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/order-two-columns-independently.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2160,
    "Title": "[Minimum Sum of Four Digit Number After Splitting Digits](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-sum-of-four-digit-number-after-splitting-digits.cpp"
      ],
      [
        "Python",
        "Python/minimum-sum-of-four-digit-number-after-splitting-digits.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Greedy"
  },
  {
    "Index": 2161,
    "Title": "[Partition Array According to Given Pivot](https://leetcode.com/problems/partition-array-according-to-given-pivot/)",
    "Solution": [
      [
        "C++",
        "C++/partition-array-according-to-given-pivot.cpp"
      ],
      [
        "Python",
        "Python/partition-array-according-to-given-pivot.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2162,
    "Title": "[Minimum Cost to Set Cooking Time](https://leetcode.com/problems/minimum-cost-to-set-cooking-time/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-to-set-cooking-time.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-to-set-cooking-time.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2163,
    "Title": "[Minimum Difference in Sums After Removal of Elements](https://leetcode.com/problems/minimum-difference-in-sums-after-removal-of-elements/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-difference-in-sums-after-removal-of-elements.cpp"
      ],
      [
        "Python",
        "Python/minimum-difference-in-sums-after-removal-of-elements.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Heap, Prefix Sum"
  },
  {
    "Index": 2164,
    "Title": "[Sort Even and Odd Indices Independently](https://leetcode.com/problems/sort-even-and-odd-indices-independently/)",
    "Solution": [
      [
        "C++",
        "C++/sort-even-and-odd-indices-independently.cpp"
      ],
      [
        "Python",
        "Python/sort-even-and-odd-indices-independently.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(c)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Counting Sort, Inplace"
  },
  {
    "Index": 2165,
    "Title": "[Smallest Value of the Rearranged Number](https://leetcode.com/problems/smallest-value-of-the-rearranged-number/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-value-of-the-rearranged-number.cpp"
      ],
      [
        "Python",
        "Python/smallest-value-of-the-rearranged-number.py"
      ]
    ],
    "Time": "_O(d)_",
    "Space": "_O(d)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Greedy, Counting Sort"
  },
  {
    "Index": 2166,
    "Title": "[Design Bitset](https://leetcode.com/problems/design-bitset/)",
    "Solution": [
      [
        "C++",
        "C++/design-bitset.cpp"
      ],
      [
        "Python",
        "Python/design-bitset.py"
      ]
    ],
    "Time": "ctor: _O(n)_<br>fix: _O(1)_<br>fix: _O(1)_<br>unfix: _O(1)_<br>flip: _O(1)_<br>all: _O(1)_<br>one: _O(1)_<br>count: _O(1)_<br>toString: _O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2167,
    "Title": "[Minimum Time to Remove All Cars Containing Illegal Goods](https://leetcode.com/problems/minimum-time-to-remove-all-cars-containing-illegal-goods/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-time-to-remove-all-cars-containing-illegal-goods.cpp"
      ],
      [
        "Python",
        "Python/minimum-time-to-remove-all-cars-containing-illegal-goods.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2168,
    "Title": "[Unique Substrings With Equal Digit Frequency](https://leetcode.com/problems/unique-substrings-with-equal-digit-frequency/)",
    "Solution": [
      [
        "C++",
        "C++/unique-substrings-with-equal-digit-frequency.cpp"
      ],
      [
        "Python",
        "Python/unique-substrings-with-equal-digit-frequency.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2169,
    "Title": "[Count Operations to Obtain Zero](https://leetcode.com/problems/count-operations-to-obtain-zero/)",
    "Solution": [
      [
        "C++",
        "C++/count-operations-to-obtain-zero.cpp"
      ],
      [
        "Python",
        "Python/count-operations-to-obtain-zero.py"
      ]
    ],
    "Time": "_O(log(min(m, n)))_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2170,
    "Title": "[Minimum Operations to Make the Array Alternating](https://leetcode.com/problems/minimum-operations-to-make-the-array-alternating/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-make-the-array-alternating.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-make-the-array-alternating.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2171,
    "Title": "[Removing Minimum Number of Magic Beans](https://leetcode.com/problems/removing-minimum-number-of-magic-beans/)",
    "Solution": [
      [
        "C++",
        "C++/removing-minimum-number-of-magic-beans.cpp"
      ],
      [
        "Python",
        "Python/removing-minimum-number-of-magic-beans.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2172,
    "Title": "[Maximum AND Sum of Array](https://leetcode.com/problems/maximum-and-sum-of-array/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-and-sum-of-array.cpp"
      ],
      [
        "Python",
        "Python/maximum-and-sum-of-array.py"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Maximum Compatibility Score Sum](https://leetcode.com/problems/maximum-compatibility-score-sum/)",
    "Note": "DP, `Hungarian Weighted Bipartite Matching`"
  },
  {
    "Index": 2173,
    "Title": "[Longest Winning Streak](https://leetcode.com/problems/longest-winning-streak/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/longest-winning-streak.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2174,
    "Title": "[Remove All Ones With Row and Column Flips II](https://leetcode.com/problems/remove-all-ones-with-row-and-column-flips-ii/)",
    "Solution": [
      [
        "C++",
        "C++/remove-all-ones-with-row-and-column-flips-ii.cpp"
      ],
      [
        "Python",
        "Python/remove-all-ones-with-row-and-column-flips-ii.py"
      ]
    ],
    "Time": "_O((m * n) * 2^(m * n))_",
    "Space": "_O(2^(m * n))_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2175,
    "Title": "[The Change in Global Rankings](https://leetcode.com/problems/the-change-in-global-rankings/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/the-change-in-global-rankings.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2176,
    "Title": "[Count Equal and Divisible Pairs in an Array](https://leetcode.com/problems/count-equal-and-divisible-pairs-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/count-equal-and-divisible-pairs-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/count-equal-and-divisible-pairs-in-an-array.py"
      ]
    ],
    "Time": "_O(nlogk + n * sqrt(k))_",
    "Space": "_O(n + sqrt(k))_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2177,
    "Title": "[Find Three Consecutive Integers That Sum to a Given Number](https://leetcode.com/problems/find-three-consecutive-integers-that-sum-to-a-given-number/)",
    "Solution": [
      [
        "C++",
        "C++/find-three-consecutive-integers-that-sum-to-a-given-number.cpp"
      ],
      [
        "Python",
        "Python/find-three-consecutive-integers-that-sum-to-a-given-number.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2178,
    "Title": "[Maximum Split of Positive Even Integers](https://leetcode.com/problems/maximum-split-of-positive-even-integers/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-split-of-positive-even-integers.cpp"
      ],
      [
        "Python",
        "Python/maximum-split-of-positive-even-integers.py"
      ]
    ],
    "Time": "_O(sqrt(n))_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Greedy"
  },
  {
    "Index": 2179,
    "Title": "[Count Good Triplets in an Array](https://leetcode.com/problems/count-good-triplets-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/count-good-triplets-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/count-good-triplets-in-an-array.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Create Sorted Array through Instructions](https://leetcode.com/problems/create-sorted-array-through-instructions/)",
    "Note": "BIT, Fenwick Tree"
  },
  {
    "Index": 2180,
    "Title": "[Count Integers With Even Digit Sum](https://leetcode.com/problems/count-integers-with-even-digit-sum/)",
    "Solution": [
      [
        "C++",
        "C++/count-integers-with-even-digit-sum.cpp"
      ],
      [
        "Python",
        "Python/count-integers-with-even-digit-sum.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2181,
    "Title": "[Merge Nodes in Between Zeros](https://leetcode.com/problems/merge-nodes-in-between-zeros/)",
    "Solution": [
      [
        "C++",
        "C++/merge-nodes-in-between-zeros.cpp"
      ],
      [
        "Python",
        "Python/merge-nodes-in-between-zeros.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2182,
    "Title": "[Construct String With Repeat Limit](https://leetcode.com/problems/construct-string-with-repeat-limit/)",
    "Solution": [
      [
        "C++",
        "C++/construct-string-with-repeat-limit.cpp"
      ],
      [
        "Python",
        "Python/construct-string-with-repeat-limit.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Greedy"
  },
  {
    "Index": 2183,
    "Title": "[Count Array Pairs Divisible by K](https://leetcode.com/problems/count-array-pairs-divisible-by-k/)",
    "Solution": [
      [
        "C++",
        "C++/count-array-pairs-divisible-by-k.cpp"
      ],
      [
        "Python",
        "Python/count-array-pairs-divisible-by-k.py"
      ]
    ],
    "Time": "_O(nlogk + k)_",
    "Space": "_O(sqrt(k))_",
    "Difficulty": "Hard",
    "Tag": "variant of [Count Equal and Divisible Pairs in an Array](https://leetcode.com/problems/count-equal-and-divisible-pairs-in-an-array/)"
  },
  {
    "Index": 2184,
    "Title": "[Number of Ways to Build Sturdy Brick Wall](https://leetcode.com/problems/number-of-ways-to-build-sturdy-brick-wall/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-ways-to-build-sturdy-brick-wall.cpp"
      ],
      [
        "Python",
        "Python/number-of-ways-to-build-sturdy-brick-wall.py"
      ]
    ],
    "Time": "_O(h * p^2)_",
    "Space": "_O(p^2)_",
    "Difficulty": "Medium",
    "Tag": "🔒, variant of [Painting a Grid With Three Different Colors](https://leetcode.com/problems/painting-a-grid-with-three-different-colors/)",
    "Note": "DP, Backtracking, Matrix Exponentiation"
  },
  {
    "Index": 2185,
    "Title": "[Counting Words With a Given Prefix](https://leetcode.com/problems/counting-words-with-a-given-prefix/)",
    "Solution": [
      [
        "C++",
        "C++/counting-words-with-a-given-prefix.cpp"
      ],
      [
        "Python",
        "Python/counting-words-with-a-given-prefix.py"
      ]
    ],
    "Time": "_O(n * p)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2186,
    "Title": "[Minimum Number of Steps to Make Two Strings Anagram II](https://leetcode.com/problems/minimum-number-of-steps-to-make-two-strings-anagram-ii/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-steps-to-make-two-strings-anagram-ii.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-steps-to-make-two-strings-anagram-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Minimum Number of Steps to Make Two Strings Anagram](https://leetcode.com/problems/minimum-number-of-steps-to-make-two-strings-anagram/)"
  },
  {
    "Index": 2187,
    "Title": "[Minimum Time to Complete Trips](https://leetcode.com/problems/minimum-time-to-complete-trips/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-time-to-complete-trips.cpp"
      ],
      [
        "Python",
        "Python/minimum-time-to-complete-trips.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2188,
    "Title": "[Minimum Time to Finish the Race](https://leetcode.com/problems/minimum-time-to-finish-the-race/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-time-to-finish-the-race.cpp"
      ],
      [
        "Python",
        "Python/minimum-time-to-finish-the-race.py"
      ]
    ],
    "Time": "_O((n + l) * logc)_",
    "Space": "_O(n + l + logc)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2189,
    "Title": "[Number of Ways to Build House of Cards](https://leetcode.com/problems/number-of-ways-to-build-house-of-cards/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-ways-to-build-house-of-cards.cpp"
      ],
      [
        "Python",
        "Python/number-of-ways-to-build-house-of-cards.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2190,
    "Title": "[Most Frequent Number Following Key In an Array](https://leetcode.com/problems/most-frequent-number-following-key-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/most-frequent-number-following-key-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/most-frequent-number-following-key-in-an-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2191,
    "Title": "[Sort the Jumbled Numbers](https://leetcode.com/problems/sort-the-jumbled-numbers/)",
    "Solution": [
      [
        "C++",
        "C++/sort-the-jumbled-numbers.cpp"
      ],
      [
        "Python",
        "Python/sort-the-jumbled-numbers.py"
      ]
    ],
    "Time": "_O(nlogm + nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Sort"
  },
  {
    "Index": 2192,
    "Title": "[All Ancestors of a Node in a Directed Acyclic Graph](https://leetcode.com/problems/all-ancestors-of-a-node-in-a-directed-acyclic-graph/)",
    "Solution": [
      [
        "C++",
        "C++/all-ancestors-of-a-node-in-a-directed-acyclic-graph.cpp"
      ],
      [
        "Python",
        "Python/all-ancestors-of-a-node-in-a-directed-acyclic-graph.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "V\\",
    "Difficulty": "* \\",
    "Tag": "E\\",
    "Note": ")_"
  },
  {
    "Index": 2193,
    "Title": "[Minimum Number of Moves to Make Palindrome](https://leetcode.com/problems/minimum-number-of-moves-to-make-palindrome/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-moves-to-make-palindrome.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-moves-to-make-palindrome.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Greedy, BIT, Fenwick Tree"
  },
  {
    "Index": 2194,
    "Title": "[Cells in a Range on an Excel Sheet](https://leetcode.com/problems/cells-in-a-range-on-an-excel-sheet/)",
    "Solution": [
      [
        "C++",
        "C++/cells-in-a-range-on-an-excel-sheet.cpp"
      ],
      [
        "Python",
        "Python/cells-in-a-range-on-an-excel-sheet.py"
      ]
    ],
    "Time": "_O(26^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2195,
    "Title": "[Append K Integers With Minimal Sum](https://leetcode.com/problems/append-k-integers-with-minimal-sum/)",
    "Solution": [
      [
        "C++",
        "C++/append-k-integers-with-minimal-sum.cpp"
      ],
      [
        "Python",
        "Python/append-k-integers-with-minimal-sum.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Greedy"
  },
  {
    "Index": 2196,
    "Title": "[Create Binary Tree From Descriptions](https://leetcode.com/problems/create-binary-tree-from-descriptions/)",
    "Solution": [
      [
        "C++",
        "C++/create-binary-tree-from-descriptions.cpp"
      ],
      [
        "Python",
        "Python/create-binary-tree-from-descriptions.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2197,
    "Title": "[Replace Non-Coprime Numbers in Array](https://leetcode.com/problems/replace-non-coprime-numbers-in-array/)",
    "Solution": [
      [
        "C++",
        "C++/replace-non-coprime-numbers-in-array.cpp"
      ],
      [
        "Python",
        "Python/replace-non-coprime-numbers-in-array.py"
      ]
    ],
    "Time": "_O(nlogm)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2198,
    "Title": "[Number of Single Divisor Triplets](https://leetcode.com/problems/number-of-single-divisor-triplets/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-single-divisor-triplets.cpp"
      ],
      [
        "Python",
        "Python/number-of-single-divisor-triplets.py"
      ]
    ],
    "Time": "_O(d^3)_",
    "Space": "_O(d)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2199,
    "Title": "[Finding the Topic of Each Post](https://leetcode.com/problems/finding-the-topic-of-each-post/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/finding-the-topic-of-each-post.sql"
      ]
    ],
    "Time": "_O(n * mlogm)_",
    "Space": "_O(n * m)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2200,
    "Title": "[Find All K-Distant Indices in an Array](https://leetcode.com/problems/find-all-k-distant-indices-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/find-all-k-distant-indices-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/find-all-k-distant-indices-in-an-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2201,
    "Title": "[Count Artifacts That Can Be Extracted](https://leetcode.com/problems/count-artifacts-that-can-be-extracted/)",
    "Solution": [
      [
        "C++",
        "C++/count-artifacts-that-can-be-extracted.cpp"
      ],
      [
        "Python",
        "Python/count-artifacts-that-can-be-extracted.py"
      ]
    ],
    "Time": "_O(a + d)_",
    "Space": "_O(d)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2202,
    "Title": "[Maximize the Topmost Element After K Moves](https://leetcode.com/problems/maximize-the-topmost-element-after-k-moves/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-the-topmost-element-after-k-moves.cpp"
      ],
      [
        "Python",
        "Python/maximize-the-topmost-element-after-k-moves.py"
      ]
    ],
    "Time": "_O(min(n, k))_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2203,
    "Title": "[Minimum Weighted Subgraph With the Required Paths](https://leetcode.com/problems/minimum-weighted-subgraph-with-the-required-paths/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-weighted-subgraph-with-the-required-paths.cpp"
      ],
      [
        "Python",
        "Python/minimum-weighted-subgraph-with-the-required-paths.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "E\\",
    "Difficulty": "* log\\",
    "Tag": "V\\",
    "Note": ")_"
  },
  {
    "Index": 2204,
    "Title": "[Distance to a Cycle in Undirected Graph](https://leetcode.com/problems/distance-to-a-cycle-in-undirected-graph/)",
    "Solution": [
      [
        "C++",
        "C++/distance-to-a-cycle-in-undirected-graph.cpp"
      ],
      [
        "Python",
        "Python/distance-to-a-cycle-in-undirected-graph.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "V\\",
    "Difficulty": "+ \\",
    "Tag": "E\\",
    "Note": ")_"
  },
  {
    "Index": 2205,
    "Title": "[The Number of Users That Are Eligible for Discount](https://leetcode.com/problems/the-number-of-users-that-are-eligible-for-discount/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/the-number-of-users-that-are-eligible-for-discount.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2206,
    "Title": "[Divide Array Into Equal Pairs](https://leetcode.com/problems/divide-array-into-equal-pairs/)",
    "Solution": [
      [
        "C++",
        "C++/divide-array-into-equal-pairs.cpp"
      ],
      [
        "Python",
        "Python/divide-array-into-equal-pairs.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2207,
    "Title": "[Maximize Number of Subsequences in a String](https://leetcode.com/problems/maximize-number-of-subsequences-in-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-number-of-subsequences-in-a-string.cpp"
      ],
      [
        "Python",
        "Python/maximize-number-of-subsequences-in-a-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Counting, Greedy"
  },
  {
    "Index": 2208,
    "Title": "[Minimum Operations to Halve Array Sum](https://leetcode.com/problems/minimum-operations-to-halve-array-sum/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-halve-array-sum.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-halve-array-sum.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Heap"
  },
  {
    "Index": 2209,
    "Title": "[Minimum White Tiles After Covering With Carpets](https://leetcode.com/problems/minimum-white-tiles-after-covering-with-carpets/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-white-tiles-after-covering-with-carpets.cpp"
      ],
      [
        "Python",
        "Python/minimum-white-tiles-after-covering-with-carpets.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2210,
    "Title": "[Count Hills and Valleys in an Array](https://leetcode.com/problems/count-hills-and-valleys-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/count-hills-and-valleys-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/count-hills-and-valleys-in-an-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2211,
    "Title": "[Count Collisions on a Road](https://leetcode.com/problems/count-collisions-on-a-road/)",
    "Solution": [
      [
        "C++",
        "C++/count-collisions-on-a-road.cpp"
      ],
      [
        "Python",
        "Python/count-collisions-on-a-road.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2212,
    "Title": "[Maximum Points in an Archery Competition](https://leetcode.com/problems/maximum-points-in-an-archery-competition/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-points-in-an-archery-competition.cpp"
      ],
      [
        "Python",
        "Python/maximum-points-in-an-archery-competition.py"
      ]
    ],
    "Time": "_O(n * 2^n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2213,
    "Title": "[Longest Substring of One Repeating Character](https://leetcode.com/problems/longest-substring-of-one-repeating-character/)",
    "Solution": [
      [
        "C++",
        "C++/longest-substring-of-one-repeating-character.cpp"
      ],
      [
        "Python",
        "Python/longest-substring-of-one-repeating-character.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2214,
    "Title": "[Minimum Health to Beat Game](https://leetcode.com/problems/minimum-health-to-beat-game/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-health-to-beat-game.cpp"
      ],
      [
        "Python",
        "Python/minimum-health-to-beat-game.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Greedy"
  },
  {
    "Index": 2215,
    "Title": "[Find the Difference of Two Arrays](https://leetcode.com/problems/find-the-difference-of-two-arrays/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-difference-of-two-arrays.cpp"
      ],
      [
        "Python",
        "Python/find-the-difference-of-two-arrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2216,
    "Title": "[Minimum Deletions to Make Array Beautiful](https://leetcode.com/problems/minimum-deletions-to-make-array-beautiful/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-deletions-to-make-array-beautiful.cpp"
      ],
      [
        "Python",
        "Python/minimum-deletions-to-make-array-beautiful.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Greedy"
  },
  {
    "Index": 2217,
    "Title": "[Find Palindrome With Fixed Length](https://leetcode.com/problems/find-palindrome-with-fixed-length/)",
    "Solution": [
      [
        "C++",
        "C++/find-palindrome-with-fixed-length.cpp"
      ],
      [
        "Python",
        "Python/find-palindrome-with-fixed-length.py"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2218,
    "Title": "[Maximum Value of K Coins From Piles](https://leetcode.com/problems/maximum-value-of-k-coins-from-piles/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-value-of-k-coins-from-piles.cpp"
      ],
      [
        "Python",
        "Python/maximum-value-of-k-coins-from-piles.py"
      ]
    ],
    "Time": "_O(min(n * k^2, m * k)))_",
    "Space": "_O(k)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2219,
    "Title": "[Maximum Sum Score of Array](https://leetcode.com/problems/maximum-sum-score-of-array/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-sum-score-of-array.cpp"
      ],
      [
        "Python",
        "Python/maximum-sum-score-of-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2220,
    "Title": "[Minimum Bit Flips to Convert Number](https://leetcode.com/problems/minimum-bit-flips-to-convert-number/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-bit-flips-to-convert-number.cpp"
      ],
      [
        "Python",
        "Python/minimum-bit-flips-to-convert-number.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2221,
    "Title": "[Find Triangular Sum of an Array](https://leetcode.com/problems/find-triangular-sum-of-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/find-triangular-sum-of-an-array.cpp"
      ],
      [
        "Python",
        "Python/find-triangular-sum-of-an-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2222,
    "Title": "[Number of Ways to Select Buildings](https://leetcode.com/problems/number-of-ways-to-select-buildings/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-ways-to-select-buildings.cpp"
      ],
      [
        "Python",
        "Python/number-of-ways-to-select-buildings.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2223,
    "Title": "[Sum of Scores of Built Strings](https://leetcode.com/problems/sum-of-scores-of-built-strings/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-scores-of-built-strings.cpp"
      ],
      [
        "Python",
        "Python/sum-of-scores-of-built-strings.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2224,
    "Title": "[Minimum Number of Operations to Convert Time](https://leetcode.com/problems/minimum-number-of-operations-to-convert-time/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-operations-to-convert-time.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-operations-to-convert-time.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Greedy"
  },
  {
    "Index": 2225,
    "Title": "[Find Players With Zero or One Losses](https://leetcode.com/problems/find-players-with-zero-or-one-losses/)",
    "Solution": [
      [
        "C++",
        "C++/find-players-with-zero-or-one-losses.cpp"
      ],
      [
        "Python",
        "Python/find-players-with-zero-or-one-losses.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2226,
    "Title": "[Maximum Candies Allocated to K Children](https://leetcode.com/problems/maximum-candies-allocated-to-k-children/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-candies-allocated-to-k-children.cpp"
      ],
      [
        "Python",
        "Python/maximum-candies-allocated-to-k-children.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2227,
    "Title": "[Encrypt and Decrypt Strings](https://leetcode.com/problems/encrypt-and-decrypt-strings/)",
    "Solution": [
      [
        "C++",
        "C++/encrypt-and-decrypt-strings.cpp"
      ],
      [
        "Python",
        "Python/encrypt-and-decrypt-strings.py"
      ]
    ],
    "Time": "ctor: _O(m + d)_<br>encrypt: _O(n)_<br>decrypt: _O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2228,
    "Title": "[Users With Two Purchases Within Seven Days](https://leetcode.com/problems/users-with-two-purchases-within-seven-days/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/users-with-two-purchases-within-seven-days.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2229,
    "Title": "[Check if an Array Is Consecutive](https://leetcode.com/problems/check-if-an-array-is-consecutive/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-an-array-is-consecutive.cpp"
      ],
      [
        "Python",
        "Python/check-if-an-array-is-consecutive.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒"
  },
  {
    "Index": 2230,
    "Title": "[The Users That Are Eligible for Discount](https://leetcode.com/problems/the-users-that-are-eligible-for-discount/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/the-users-that-are-eligible-for-discount.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2231,
    "Title": "[Largest Number After Digit Swaps by Parity](https://leetcode.com/problems/largest-number-after-digit-swaps-by-parity/)",
    "Solution": [
      [
        "C++",
        "C++/largest-number-after-digit-swaps-by-parity.cpp"
      ],
      [
        "Python",
        "Python/largest-number-after-digit-swaps-by-parity.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Counting Sort"
  },
  {
    "Index": 2232,
    "Title": "[Minimize Result by Adding Parentheses to Expression](https://leetcode.com/problems/minimize-result-by-adding-parentheses-to-expression/)",
    "Solution": [
      [
        "C++",
        "C++/minimize-result-by-adding-parentheses-to-expression.cpp"
      ],
      [
        "Python",
        "Python/minimize-result-by-adding-parentheses-to-expression.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2233,
    "Title": "[Maximum Product After K Increments](https://leetcode.com/problems/maximum-product-after-k-increments/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-product-after-k-increments.cpp"
      ],
      [
        "Python",
        "Python/maximum-product-after-k-increments.py"
      ]
    ],
    "Time": "_O(n + k)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2234,
    "Title": "[Maximum Total Beauty of the Gardens](https://leetcode.com/problems/maximum-total-beauty-of-the-gardens/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-total-beauty-of-the-gardens.cpp"
      ],
      [
        "Python",
        "Python/maximum-total-beauty-of-the-gardens.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2235,
    "Title": "[Add Two Integers](https://leetcode.com/problems/add-two-integers/)",
    "Solution": [
      [
        "C++",
        "C++/add-two-integers.cpp"
      ],
      [
        "Python",
        "Python/add-two-integers.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2236,
    "Title": "[Root Equals Sum of Children](https://leetcode.com/problems/root-equals-sum-of-children/)",
    "Solution": [
      [
        "C++",
        "C++/root-equals-sum-of-children.cpp"
      ],
      [
        "Python",
        "Python/root-equals-sum-of-children.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Tree"
  },
  {
    "Index": 2237,
    "Title": "[Count Positions on Street With Required Brightness](https://leetcode.com/problems/count-positions-on-street-with-required-brightness/)",
    "Solution": [
      [
        "C++",
        "C++/count-positions-on-street-with-required-brightness.cpp"
      ],
      [
        "Python",
        "Python/count-positions-on-street-with-required-brightness.py"
      ]
    ],
    "Time": "_O(n + l)_",
    "Space": "_O(min(n, l))_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2238,
    "Title": "[Number of Times a Driver Was a Passenger](https://leetcode.com/problems/number-of-times-a-driver-was-a-passenger/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/number-of-times-a-driver-was-a-passenger.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2239,
    "Title": "[Find Closest Number to Zero](https://leetcode.com/problems/find-closest-number-to-zero/)",
    "Solution": [
      [
        "C++",
        "C++/find-closest-number-to-zero.cpp"
      ],
      [
        "Python",
        "Python/find-closest-number-to-zero.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2240,
    "Title": "[Number of Ways to Buy Pens and Pencils](https://leetcode.com/problems/number-of-ways-to-buy-pens-and-pencils/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-ways-to-buy-pens-and-pencils.cpp"
      ],
      [
        "Python",
        "Python/number-of-ways-to-buy-pens-and-pencils.py"
      ]
    ],
    "Time": "_O(sqrt(t))_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2241,
    "Title": "[Design an ATM Machine](https://leetcode.com/problems/design-an-atm-machine/)",
    "Solution": [
      [
        "C++",
        "C++/design-an-atm-machine.cpp"
      ],
      [
        "Python",
        "Python/design-an-atm-machine.py"
      ]
    ],
    "Time": "ctor: _O(1)_<br>deposit: _O(1)_<br>withdraw: _O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2242,
    "Title": "[Maximum Score of a Node Sequence](https://leetcode.com/problems/maximum-score-of-a-node-sequence/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-score-of-a-node-sequence.cpp"
      ],
      [
        "Python",
        "Python/maximum-score-of-a-node-sequence.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "V\\",
    "Difficulty": "+ \\",
    "Tag": "E\\",
    "Note": ")_"
  },
  {
    "Index": 2243,
    "Title": "[Calculate Digit Sum of a String](https://leetcode.com/problems/calculate-digit-sum-of-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/calculate-digit-sum-of-a-string.cpp"
      ],
      [
        "Python",
        "Python/calculate-digit-sum-of-a-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2244,
    "Title": "[Minimum Rounds to Complete All Tasks](https://leetcode.com/problems/minimum-rounds-to-complete-all-tasks/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-rounds-to-complete-all-tasks.cpp"
      ],
      [
        "Python",
        "Python/minimum-rounds-to-complete-all-tasks.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2245,
    "Title": "[Maximum Trailing Zeros in a Cornered Path](https://leetcode.com/problems/maximum-trailing-zeros-in-a-cornered-path/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-trailing-zeros-in-a-cornered-path.cpp"
      ],
      [
        "Python",
        "Python/maximum-trailing-zeros-in-a-cornered-path.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2246,
    "Title": "[Longest Path With Different Adjacent Characters](https://leetcode.com/problems/longest-path-with-different-adjacent-characters/)",
    "Solution": [
      [
        "C++",
        "C++/longest-path-with-different-adjacent-characters.cpp"
      ],
      [
        "Python",
        "Python/longest-path-with-different-adjacent-characters.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "DFS, BFS, Topological Sort"
  },
  {
    "Index": 2247,
    "Title": "[Maximum Cost of Trip With K Highways](https://leetcode.com/problems/maximum-cost-of-trip-with-k-highways/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-cost-of-trip-with-k-highways.cpp"
      ],
      [
        "Python",
        "Python/maximum-cost-of-trip-with-k-highways.py"
      ]
    ],
    "Time": "_O(n^2 * 2^n)_",
    "Space": "_O(n * 2^n)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 2248,
    "Title": "[Intersection of Multiple Arrays](https://leetcode.com/problems/intersection-of-multiple-arrays/)",
    "Solution": [
      [
        "C++",
        "C++/intersection-of-multiple-arrays.cpp"
      ],
      [
        "Python",
        "Python/intersection-of-multiple-arrays.py"
      ]
    ],
    "Time": "_O(n * l + r)_",
    "Space": "_O(l)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2249,
    "Title": "[Count Lattice Points Inside a Circle](https://leetcode.com/problems/count-lattice-points-inside-a-circle/)",
    "Solution": [
      [
        "C++",
        "C++/count-lattice-points-inside-a-circle.cpp"
      ],
      [
        "Python",
        "Python/count-lattice-points-inside-a-circle.py"
      ]
    ],
    "Time": "_O(n * r^2)_",
    "Space": "_O(min(n * r^2, max_x * max_y))_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2250,
    "Title": "[Count Number of Rectangles Containing Each Point](https://leetcode.com/problems/count-number-of-rectangles-containing-each-point/)",
    "Solution": [
      [
        "C++",
        "C++/count-number-of-rectangles-containing-each-point.cpp"
      ],
      [
        "Python",
        "Python/count-number-of-rectangles-containing-each-point.py"
      ]
    ],
    "Time": "_O(nlogn + m * max_y * logn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2251,
    "Title": "[Number of Flowers in Full Bloom](https://leetcode.com/problems/number-of-flowers-in-full-bloom/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-flowers-in-full-bloom.cpp"
      ],
      [
        "Python",
        "Python/number-of-flowers-in-full-bloom.py"
      ]
    ],
    "Time": "_O(nlogn + mlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2252,
    "Title": "[Dynamic Pivoting of a Table](https://leetcode.com/problems/dynamic-pivoting-of-a-table/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/dynamic-pivoting-of-a-table.sql"
      ]
    ],
    "Time": "_O(n * m)_",
    "Space": "_O(n * m)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2253,
    "Title": "[Dynamic Unpivoting of a Table](https://leetcode.com/problems/dynamic-unpivoting-of-a-table/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/dynamic-unpivoting-of-a-table.sql"
      ]
    ],
    "Time": "_O(n * m)_",
    "Space": "_O(n * m)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2254,
    "Title": "[Design Video Sharing Platform](https://leetcode.com/problems/design-video-sharing-platform/)",
    "Solution": [
      [
        "C++",
        "C++/design-video-sharing-platform.cpp"
      ],
      [
        "Python",
        "Python/design-video-sharing-platform.py"
      ]
    ],
    "Time": "ctor: _O(1)_<br>upload: _O(logn + l)_<br>remove: _O(logn)_<br>like: _O(1)_<br>dislike: _O(1)_<br>view: _O(1)_<br>getLikesAndDislikes: _O(1)_<br>getViews: _O(1)_",
    "Space": "_O(n * l)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 2255,
    "Title": "[Count Prefixes of a Given String](https://leetcode.com/problems/count-prefixes-of-a-given-string/)",
    "Solution": [
      [
        "C++",
        "C++/count-prefixes-of-a-given-string.cpp"
      ],
      [
        "Python",
        "Python/count-prefixes-of-a-given-string.py"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2256,
    "Title": "[Minimum Average Difference](https://leetcode.com/problems/minimum-average-difference/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-average-difference.cpp"
      ],
      [
        "Python",
        "Python/minimum-average-difference.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2257,
    "Title": "[Count Unguarded Cells in the Grid](https://leetcode.com/problems/count-unguarded-cells-in-the-grid/)",
    "Solution": [
      [
        "C++",
        "C++/count-unguarded-cells-in-the-grid.cpp"
      ],
      [
        "Python",
        "Python/count-unguarded-cells-in-the-grid.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2258,
    "Title": "[Escape the Spreading Fire](https://leetcode.com/problems/escape-the-spreading-fire/)",
    "Solution": [
      [
        "C++",
        "C++/escape-the-spreading-fire.cpp"
      ],
      [
        "Python",
        "Python/escape-the-spreading-fire.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "BFS"
  },
  {
    "Index": 2259,
    "Title": "[Remove Digit From Number to Maximize Result](https://leetcode.com/problems/remove-digit-from-number-to-maximize-result/)",
    "Solution": [
      [
        "C++",
        "C++/remove-digit-from-number-to-maximize-result.cpp"
      ],
      [
        "Python",
        "Python/remove-digit-from-number-to-maximize-result.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Greedy"
  },
  {
    "Index": 2260,
    "Title": "[Minimum Consecutive Cards to Pick Up](https://leetcode.com/problems/minimum-consecutive-cards-to-pick-up/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-consecutive-cards-to-pick-up.cpp"
      ],
      [
        "Python",
        "Python/minimum-consecutive-cards-to-pick-up.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2261,
    "Title": "[K Divisible Elements Subarrays](https://leetcode.com/problems/k-divisible-elements-subarrays/)",
    "Solution": [
      [
        "C++",
        "C++/k-divisible-elements-subarrays.cpp"
      ],
      [
        "Python",
        "Python/k-divisible-elements-subarrays.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(t)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2262,
    "Title": "[Total Appeal of A String](https://leetcode.com/problems/total-appeal-of-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/total-appeal-of-a-string.cpp"
      ],
      [
        "Python",
        "Python/total-appeal-of-a-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(26)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Count Unique Characters of All Substrings of a Given String](https://leetcode.com/problems/count-unique-characters-of-all-substrings-of-a-given-string/)"
  },
  {
    "Index": 2263,
    "Title": "[Make Array Non-decreasing or Non-increasing](https://leetcode.com/problems/make-array-non-decreasing-or-non-increasing/)",
    "Solution": [
      [
        "C++",
        "C++/make-array-non-decreasing-or-non-increasing.cpp"
      ],
      [
        "Python",
        "Python/make-array-non-decreasing-or-non-increasing.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "DP, Greedy, Heap"
  },
  {
    "Index": 2264,
    "Title": "[Largest 3-Same-Digit Number in String](https://leetcode.com/problems/largest-3-same-digit-number-in-string/)",
    "Solution": [
      [
        "C++",
        "C++/largest-3-same-digit-number-in-string.cpp"
      ],
      [
        "Python",
        "Python/largest-3-same-digit-number-in-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2265,
    "Title": "[Count Nodes Equal to Average of Subtree](https://leetcode.com/problems/count-nodes-equal-to-average-of-subtree/)",
    "Solution": [
      [
        "C++",
        "C++/count-nodes-equal-to-average-of-subtree.cpp"
      ],
      [
        "Python",
        "Python/count-nodes-equal-to-average-of-subtree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS, Tree"
  },
  {
    "Index": 2266,
    "Title": "[Count Number of Texts](https://leetcode.com/problems/count-number-of-texts/)",
    "Solution": [
      [
        "C++",
        "C++/count-number-of-texts.cpp"
      ],
      [
        "Python",
        "Python/count-number-of-texts.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2267,
    "Title": "[Check if There Is a Valid Parentheses String Path](https://leetcode.com/problems/check-if-there-is-a-valid-parentheses-string-path/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-there-is-a-valid-parentheses-string-path.cpp"
      ],
      [
        "Python",
        "Python/check-if-there-is-a-valid-parentheses-string-path.py"
      ]
    ],
    "Time": "_O(m * n * (m + n) / 32)_",
    "Space": "_O(n * (m + n) / 32)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Codeforces Round #801 C](https://codeforces.com/contest/1695/problem/C)"
  },
  {
    "Index": 2268,
    "Title": "[Minimum Number of Keypresses](https://leetcode.com/problems/minimum-number-of-keypresses/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-keypresses.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-keypresses.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Greedy, Sort"
  },
  {
    "Index": 2269,
    "Title": "[Find the K-Beauty of a Number](https://leetcode.com/problems/find-the-k-beauty-of-a-number/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-k-beauty-of-a-number.cpp"
      ],
      [
        "Python",
        "Python/find-the-k-beauty-of-a-number.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(logn)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2270,
    "Title": "[Number of Ways to Split Array](https://leetcode.com/problems/number-of-ways-to-split-array/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-ways-to-split-array.cpp"
      ],
      [
        "Python",
        "Python/number-of-ways-to-split-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2271,
    "Title": "[Maximum White Tiles Covered by a Carpet](https://leetcode.com/problems/maximum-white-tiles-covered-by-a-carpet/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-white-tiles-covered-by-a-carpet.cpp"
      ],
      [
        "Python",
        "Python/maximum-white-tiles-covered-by-a-carpet.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2272,
    "Title": "[Substring With Largest Variance](https://leetcode.com/problems/substring-with-largest-variance/)",
    "Solution": [
      [
        "C++",
        "C++/substring-with-largest-variance.cpp"
      ],
      [
        "Python",
        "Python/substring-with-largest-variance.py"
      ]
    ],
    "Time": "_O(a^2 * n)_",
    "Space": "_O(a)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2273,
    "Title": "[Find Resultant Array After Removing Anagrams](https://leetcode.com/problems/find-resultant-array-after-removing-anagrams/)",
    "Solution": [
      [
        "C++",
        "C++/find-resultant-array-after-removing-anagrams.cpp"
      ],
      [
        "Python",
        "Python/find-resultant-array-after-removing-anagrams.py"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2274,
    "Title": "[Maximum Consecutive Floors Without Special Floors](https://leetcode.com/problems/maximum-consecutive-floors-without-special-floors/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-consecutive-floors-without-special-floors.cpp"
      ],
      [
        "Python",
        "Python/maximum-consecutive-floors-without-special-floors.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2275,
    "Title": "[Largest Combination With Bitwise AND Greater Than Zero](https://leetcode.com/problems/largest-combination-with-bitwise-and-greater-than-zero/)",
    "Solution": [
      [
        "C++",
        "C++/largest-combination-with-bitwise-and-greater-than-zero.cpp"
      ],
      [
        "Python",
        "Python/largest-combination-with-bitwise-and-greater-than-zero.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(logr)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2276,
    "Title": "[Count Integers in Intervals](https://leetcode.com/problems/count-integers-in-intervals/)",
    "Solution": [
      [
        "C++",
        "C++/count-integers-in-intervals.cpp"
      ],
      [
        "Python",
        "Python/count-integers-in-intervals.py"
      ]
    ],
    "Time": "ctor: _O(1)_<br>add: _O(logn)_, amortized<br>Count: _O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2277,
    "Title": "[Closest Node to Path in Tree](https://leetcode.com/problems/closest-node-to-path-in-tree/)",
    "Solution": [
      [
        "C++",
        "C++/closest-node-to-path-in-tree.cpp"
      ],
      [
        "Python",
        "Python/closest-node-to-path-in-tree.py"
      ]
    ],
    "Time": "_O(n + q)_",
    "Space": "_O(n + q)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Tree, BFS, Binary Lifting, `Tarjan's Offline LCA Algorithm`"
  },
  {
    "Index": 2278,
    "Title": "[Percentage of Letter in String](https://leetcode.com/problems/percentage-of-letter-in-string/)",
    "Solution": [
      [
        "C++",
        "C++/percentage-of-letter-in-string.cpp"
      ],
      [
        "Python",
        "Python/percentage-of-letter-in-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2279,
    "Title": "[Maximum Bags With Full Capacity of Rocks](https://leetcode.com/problems/maximum-bags-with-full-capacity-of-rocks/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-bags-with-full-capacity-of-rocks.cpp"
      ],
      [
        "Python",
        "Python/maximum-bags-with-full-capacity-of-rocks.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Greedy, Sort"
  },
  {
    "Index": 2280,
    "Title": "[Minimum Lines to Represent a Line Chart](https://leetcode.com/problems/minimum-lines-to-represent-a-line-chart/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-lines-to-represent-a-line-chart.cpp"
      ],
      [
        "Python",
        "Python/minimum-lines-to-represent-a-line-chart.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2281,
    "Title": "[Sum of Total Strength of Wizards](https://leetcode.com/problems/sum-of-total-strength-of-wizards/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-total-strength-of-wizards.cpp"
      ],
      [
        "Python",
        "Python/sum-of-total-strength-of-wizards.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Largest Rectangle in Histogram](https://leetcode.com/problems/largest-rectangle-in-histogram/)"
  },
  {
    "Index": 2282,
    "Title": "[Number of People That Can Be Seen in a Grid](https://leetcode.com/problems/number-of-people-that-can-be-seen-in-a-grid/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-people-that-can-be-seen-in-a-grid.cpp"
      ],
      [
        "Python",
        "Python/number-of-people-that-can-be-seen-in-a-grid.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Medium",
    "Tag": "🔒, variant of [Number of Visible People in a Queue](https://leetcode.com/problems/number-of-visible-people-in-a-queue/)"
  },
  {
    "Index": 2283,
    "Title": "[Check if Number Has Equal Digit Count and Digit Value](https://leetcode.com/problems/check-if-number-has-equal-digit-count-and-digit-value/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-number-has-equal-digit-count-and-digit-value.cpp"
      ],
      [
        "Python",
        "Python/check-if-number-has-equal-digit-count-and-digit-value.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2284,
    "Title": "[Sender With Largest Word Count](https://leetcode.com/problems/sender-with-largest-word-count/)",
    "Solution": [
      [
        "C++",
        "C++/sender-with-largest-word-count.cpp"
      ],
      [
        "Python",
        "Python/sender-with-largest-word-count.py"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2285,
    "Title": "[Maximum Total Importance of Roads](https://leetcode.com/problems/maximum-total-importance-of-roads/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-total-importance-of-roads.cpp"
      ],
      [
        "Python",
        "Python/maximum-total-importance-of-roads.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Greedy, Counting Sort"
  },
  {
    "Index": 2286,
    "Title": "[Booking Concert Tickets in Groups](https://leetcode.com/problems/booking-concert-tickets-in-groups/)",
    "Solution": [
      [
        "C++",
        "C++/booking-concert-tickets-in-groups.cpp"
      ],
      [
        "Python",
        "Python/booking-concert-tickets-in-groups.py"
      ]
    ],
    "Time": "ctor: _O(n)_<br>gather: _O(logn)_<br>scatter: _O(logn)_, amortized",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2287,
    "Title": "[Rearrange Characters to Make Target String](https://leetcode.com/problems/rearrange-characters-to-make-target-string/)",
    "Solution": [
      [
        "C++",
        "C++/rearrange-characters-to-make-target-string.cpp"
      ],
      [
        "Python",
        "Python/rearrange-characters-to-make-target-string.py"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2288,
    "Title": "[Apply Discount to Prices](https://leetcode.com/problems/apply-discount-to-prices/)",
    "Solution": [
      [
        "C++",
        "C++/apply-discount-to-prices.cpp"
      ],
      [
        "Python",
        "Python/apply-discount-to-prices.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2289,
    "Title": "[Steps to Make Array Non-decreasing](https://leetcode.com/problems/steps-to-make-array-non-decreasing/)",
    "Solution": [
      [
        "C++",
        "C++/steps-to-make-array-non-decreasing.cpp"
      ],
      [
        "Python",
        "Python/steps-to-make-array-non-decreasing.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2290,
    "Title": "[Minimum Obstacle Removal to Reach Corner](https://leetcode.com/problems/minimum-obstacle-removal-to-reach-corner/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-obstacle-removal-to-reach-corner.cpp"
      ],
      [
        "Python",
        "Python/minimum-obstacle-removal-to-reach-corner.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Minimum Cost to Make at Least One Valid Path in a Grid](https://leetcode.com/problems/minimum-cost-to-make-at-least-one-valid-path-in-a-grid/)",
    "Note": "`A* Search Algorithm`, 0-1 BFS, Deque"
  },
  {
    "Index": 2291,
    "Title": "[Maximum Profit From Trading Stocks](https://leetcode.com/problems/maximum-profit-from-trading-stocks/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-profit-from-trading-stocks.cpp"
      ],
      [
        "Python",
        "Python/maximum-profit-from-trading-stocks.py"
      ]
    ],
    "Time": "_O(n * b)_",
    "Space": "_O(b)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2292,
    "Title": "[Products With Three or More Orders in Two Consecutive Years](https://leetcode.com/problems/products-with-three-or-more-orders-in-two-consecutive-years/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/products-with-three-or-more-orders-in-two-consecutive-years.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2293,
    "Title": "[Min Max Game](https://leetcode.com/problems/min-max-game/)",
    "Solution": [
      [
        "C++",
        "C++/min-max-game.cpp"
      ],
      [
        "Python",
        "Python/min-max-game.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2294,
    "Title": "[Partition Array Such That Maximum Difference Is K](https://leetcode.com/problems/partition-array-such-that-maximum-difference-is-k/)",
    "Solution": [
      [
        "C++",
        "C++/partition-array-such-that-maximum-difference-is-k.cpp"
      ],
      [
        "Python",
        "Python/partition-array-such-that-maximum-difference-is-k.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Greedy"
  },
  {
    "Index": 2295,
    "Title": "[Replace Elements in an Array](https://leetcode.com/problems/replace-elements-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/replace-elements-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/replace-elements-in-an-array.py"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2296,
    "Title": "[Design a Text Editor](https://leetcode.com/problems/design-a-text-editor/)",
    "Solution": [
      [
        "C++",
        "C++/design-a-text-editor.cpp"
      ],
      [
        "Python",
        "Python/design-a-text-editor.py"
      ]
    ],
    "Time": "ctor: _O(1)_<br>addText: _O(l)_<br>deleteText: _O(k)_<br>cursorLeft: _O(k)_<br>cursorRight: _O(k)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2297,
    "Title": "[Jump Game IX](https://leetcode.com/problems/jump-game-ix/)",
    "Solution": [
      [
        "C++",
        "C++/jump-game-ix.cpp"
      ],
      [
        "Python",
        "Python/jump-game-ix.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2298,
    "Title": "[Tasks Count in the Weekend](https://leetcode.com/problems/tasks-count-in-the-weekend/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/tasks-count-in-the-weekend.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2299,
    "Title": "[Strong Password Checker II](https://leetcode.com/problems/strong-password-checker-ii/)",
    "Solution": [
      [
        "C++",
        "C++/strong-password-checker-ii.cpp"
      ],
      [
        "Python",
        "Python/strong-password-checker-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2300,
    "Title": "[Successful Pairs of Spells and Potions](https://leetcode.com/problems/successful-pairs-of-spells-and-potions/)",
    "Solution": [
      [
        "C++",
        "C++/successful-pairs-of-spells-and-potions.cpp"
      ],
      [
        "Python",
        "Python/successful-pairs-of-spells-and-potions.py"
      ]
    ],
    "Time": "_O(mlogm + nlogm)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2301,
    "Title": "[Match Substring After Replacement](https://leetcode.com/problems/match-substring-after-replacement/)",
    "Solution": [
      [
        "C++",
        "C++/match-substring-after-replacement.cpp"
      ],
      [
        "Python",
        "Python/match-substring-after-replacement.py"
      ]
    ],
    "Time": "_O(n * k)_",
    "Space": "_O(m)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2302,
    "Title": "[Count Subarrays With Score Less Than K](https://leetcode.com/problems/count-subarrays-with-score-less-than-k/)",
    "Solution": [
      [
        "C++",
        "C++/count-subarrays-with-score-less-than-k.cpp"
      ],
      [
        "Python",
        "Python/count-subarrays-with-score-less-than-k.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2303,
    "Title": "[Calculate Amount Paid in Taxes](https://leetcode.com/problems/calculate-amount-paid-in-taxes/)",
    "Solution": [
      [
        "C++",
        "C++/calculate-amount-paid-in-taxes.cpp"
      ],
      [
        "Python",
        "Python/calculate-amount-paid-in-taxes.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2304,
    "Title": "[Minimum Path Cost in a Grid](https://leetcode.com/problems/minimum-path-cost-in-a-grid/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-path-cost-in-a-grid.cpp"
      ],
      [
        "Python",
        "Python/minimum-path-cost-in-a-grid.py"
      ]
    ],
    "Time": "_O(m * n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2305,
    "Title": "[Fair Distribution of Cookies](https://leetcode.com/problems/fair-distribution-of-cookies/)",
    "Solution": [
      [
        "C++",
        "C++/fair-distribution-of-cookies.cpp"
      ],
      [
        "Python",
        "Python/fair-distribution-of-cookies.py"
      ]
    ],
    "Time": "_O(k * 3^n)_",
    "Space": "_O(2^n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2306,
    "Title": "[Naming a Company](https://leetcode.com/problems/naming-a-company/)",
    "Solution": [
      [
        "C++",
        "C++/naming-a-company.cpp"
      ],
      [
        "Python",
        "Python/naming-a-company.py"
      ]
    ],
    "Time": "_O(26 * n * l)_",
    "Space": "_O(n * l)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2307,
    "Title": "[Check for Contradictions in Equations](https://leetcode.com/problems/check-for-contradictions-in-equations/)",
    "Solution": [
      [
        "C++",
        "C++/check-for-contradictions-in-equations.cpp"
      ],
      [
        "Python",
        "Python/check-for-contradictions-in-equations.py"
      ]
    ],
    "Time": "_O(e + q)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒, variant of [Evaluate Division](https://leetcode.com/problems/evaluate-division/)",
    "Note": "DFS, Union Find"
  },
  {
    "Index": 2308,
    "Title": "[Arrange Table by Gender](https://leetcode.com/problems/arrange-table-by-gender/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/arrange-table-by-gender.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2309,
    "Title": "[Greatest English Letter in Upper and Lower Case](https://leetcode.com/problems/greatest-english-letter-in-upper-and-lower-case/)",
    "Solution": [
      [
        "C++",
        "C++/greatest-english-letter-in-upper-and-lower-case.cpp"
      ],
      [
        "Python",
        "Python/greatest-english-letter-in-upper-and-lower-case.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2310,
    "Title": "[Sum of Numbers With Units Digit K](https://leetcode.com/problems/sum-of-numbers-with-units-digit-k/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-numbers-with-units-digit-k.cpp"
      ],
      [
        "Python",
        "Python/sum-of-numbers-with-units-digit-k.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2311,
    "Title": "[Longest Binary Subsequence Less Than or Equal to K](https://leetcode.com/problems/longest-binary-subsequence-less-than-or-equal-to-k/)",
    "Solution": [
      [
        "C++",
        "C++/longest-binary-subsequence-less-than-or-equal-to-k.cpp"
      ],
      [
        "Python",
        "Python/longest-binary-subsequence-less-than-or-equal-to-k.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Greedy"
  },
  {
    "Index": 2312,
    "Title": "[Selling Pieces of Wood](https://leetcode.com/problems/selling-pieces-of-wood/)",
    "Solution": [
      [
        "C++",
        "C++/selling-pieces-of-wood.cpp"
      ],
      [
        "Python",
        "Python/selling-pieces-of-wood.py"
      ]
    ],
    "Time": "_O(m * n * (m + n))_",
    "Space": "_O(m + n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2313,
    "Title": "[Minimum Flips in Binary Tree to Get Result](https://leetcode.com/problems/minimum-flips-in-binary-tree-to-get-result/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-flips-in-binary-tree-to-get-result.cpp"
      ],
      [
        "Python",
        "Python/minimum-flips-in-binary-tree-to-get-result.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 2314,
    "Title": "[The First Day of the Maximum Recorded Degree in Each City](https://leetcode.com/problems/the-first-day-of-the-maximum-recorded-degree-in-each-city/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/the-first-day-of-the-maximum-recorded-degree-in-each-city.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2315,
    "Title": "[Count Asterisks](https://leetcode.com/problems/count-asterisks/)",
    "Solution": [
      [
        "C++",
        "C++/count-asterisks.cpp"
      ],
      [
        "Python",
        "Python/count-asterisks.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2316,
    "Title": "[Count Unreachable Pairs of Nodes in an Undirected Graph](https://leetcode.com/problems/count-unreachable-pairs-of-nodes-in-an-undirected-graph/)",
    "Solution": [
      [
        "C++",
        "C++/count-unreachable-pairs-of-nodes-in-an-undirected-graph.cpp"
      ],
      [
        "Python",
        "Python/count-unreachable-pairs-of-nodes-in-an-undirected-graph.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Flood Fill, BFS, Math"
  },
  {
    "Index": 2317,
    "Title": "[Maximum XOR After Operations](https://leetcode.com/problems/maximum-xor-after-operations/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-xor-after-operations.cpp"
      ],
      [
        "Python",
        "Python/maximum-xor-after-operations.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2318,
    "Title": "[Number of Distinct Roll Sequences](https://leetcode.com/problems/number-of-distinct-roll-sequences/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-distinct-roll-sequences.cpp"
      ],
      [
        "Python",
        "Python/number-of-distinct-roll-sequences.py"
      ]
    ],
    "Time": "_O(6^3 * n)_",
    "Space": "_O(6^2)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2319,
    "Title": "[Check if Matrix Is X-Matrix](https://leetcode.com/problems/check-if-matrix-is-x-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-matrix-is-x-matrix.cpp"
      ],
      [
        "Python",
        "Python/check-if-matrix-is-x-matrix.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2320,
    "Title": "[Count Number of Ways to Place Houses](https://leetcode.com/problems/count-number-of-ways-to-place-houses/)",
    "Solution": [
      [
        "C++",
        "C++/count-number-of-ways-to-place-houses.cpp"
      ],
      [
        "Python",
        "Python/count-number-of-ways-to-place-houses.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Fibonacci Number](https://leetcode.com/problems/fibonacci-number/)"
  },
  {
    "Index": 2321,
    "Title": "[Maximum Score Of Spliced Array](https://leetcode.com/problems/maximum-score-of-spliced-array/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-score-of-spliced-array.cpp"
      ],
      [
        "Python",
        "Python/maximum-score-of-spliced-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2322,
    "Title": "[Minimum Score After Removals on a Tree](https://leetcode.com/problems/minimum-score-after-removals-on-a-tree/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-score-after-removals-on-a-tree.cpp"
      ],
      [
        "Python",
        "Python/minimum-score-after-removals-on-a-tree.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "DFS, Tree"
  },
  {
    "Index": 2323,
    "Title": "[Find Minimum Time to Finish All Jobs II](https://leetcode.com/problems/find-minimum-time-to-finish-all-jobs-ii/)",
    "Solution": [
      [
        "C++",
        "C++/find-minimum-time-to-finish-all-jobs-ii.cpp"
      ],
      [
        "Python",
        "Python/find-minimum-time-to-finish-all-jobs-ii.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2324,
    "Title": "[Product Sales Analysis IV](https://leetcode.com/problems/product-sales-analysis-iv/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/product-sales-analysis-iv.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2325,
    "Title": "[Decode the Message](https://leetcode.com/problems/decode-the-message/)",
    "Solution": [
      [
        "C++",
        "C++/decode-the-message.cpp"
      ],
      [
        "Python",
        "Python/decode-the-message.py"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2326,
    "Title": "[Spiral Matrix IV](https://leetcode.com/problems/spiral-matrix-iv/)",
    "Solution": [
      [
        "C++",
        "C++/spiral-matrix-iv.cpp"
      ],
      [
        "Python",
        "Python/spiral-matrix-iv.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2327,
    "Title": "[Number of People Aware of a Secret](https://leetcode.com/problems/number-of-people-aware-of-a-secret/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-people-aware-of-a-secret.cpp"
      ],
      [
        "Python",
        "Python/number-of-people-aware-of-a-secret.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(f)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2328,
    "Title": "[Number of Increasing Paths in a Grid](https://leetcode.com/problems/number-of-increasing-paths-in-a-grid/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-increasing-paths-in-a-grid.cpp"
      ],
      [
        "Python",
        "Python/number-of-increasing-paths-in-a-grid.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2329,
    "Title": "[Product Sales Analysis V](https://leetcode.com/problems/product-sales-analysis-v/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/product-sales-analysis-v.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2330,
    "Title": "[Valid Palindrome IV](https://leetcode.com/problems/valid-palindrome-iv/)",
    "Solution": [
      [
        "C++",
        "C++/valid-palindrome-iv.cpp"
      ],
      [
        "Python",
        "Python/valid-palindrome-iv.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "String, Two Pointers"
  },
  {
    "Index": 2331,
    "Title": "[Evaluate Boolean Binary Tree](https://leetcode.com/problems/evaluate-boolean-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/evaluate-boolean-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/evaluate-boolean-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 2332,
    "Title": "[The Latest Time to Catch a Bus](https://leetcode.com/problems/the-latest-time-to-catch-a-bus/)",
    "Solution": [
      [
        "C++",
        "C++/the-latest-time-to-catch-a-bus.cpp"
      ],
      [
        "Python",
        "Python/the-latest-time-to-catch-a-bus.py"
      ]
    ],
    "Time": "_O(nlogn + mlogm)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "String, Two Pointers"
  },
  {
    "Index": 2333,
    "Title": "[Minimum Sum of Squared Difference](https://leetcode.com/problems/minimum-sum-of-squared-difference/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-sum-of-squared-difference.cpp"
      ],
      [
        "Python",
        "Python/minimum-sum-of-squared-difference.py"
      ]
    ],
    "Time": "_O(nlogn + nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2334,
    "Title": "[Subarray With Elements Greater Than Varying Threshold](https://leetcode.com/problems/subarray-with-elements-greater-than-varying-threshold/)",
    "Solution": [
      [
        "C++",
        "C++/subarray-with-elements-greater-than-varying-threshold.cpp"
      ],
      [
        "Python",
        "Python/subarray-with-elements-greater-than-varying-threshold.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Maximum Subarray Min-Product](https://leetcode.com/problems/maximum-subarray-min-product/)"
  },
  {
    "Index": 2335,
    "Title": "[Minimum Amount of Time to Fill Cups](https://leetcode.com/problems/minimum-amount-of-time-to-fill-cups/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-amount-of-time-to-fill-cups.cpp"
      ],
      [
        "Python",
        "Python/minimum-amount-of-time-to-fill-cups.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2336,
    "Title": "[Smallest Number in Infinite Set](https://leetcode.com/problems/smallest-number-in-infinite-set/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-number-in-infinite-set.cpp"
      ],
      [
        "Python",
        "Python/smallest-number-in-infinite-set.py"
      ]
    ],
    "Time": "ctor: _O(1)_<br>popSmallest: _O(logn)_<br>addBack: _O(logn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2337,
    "Title": "[Move Pieces to Obtain a String](https://leetcode.com/problems/move-pieces-to-obtain-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/move-pieces-to-obtain-a-string.cpp"
      ],
      [
        "Python",
        "Python/move-pieces-to-obtain-a-string.py"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "String, Two Pointers"
  },
  {
    "Index": 2338,
    "Title": "[Count the Number of Ideal Arrays](https://leetcode.com/problems/count-the-number-of-ideal-arrays/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-number-of-ideal-arrays.cpp"
      ],
      [
        "Python",
        "Python/count-the-number-of-ideal-arrays.py"
      ]
    ],
    "Time": "_O(sqrt(m) + n + m * (logm + sqrt(m)/log(sqrt(m))))_",
    "Space": "_O(sqrt(m) + n + logm)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Count Ways to Make Array With Product](https://leetcode.com/problems/count-ways-to-make-array-with-product/)"
  },
  {
    "Index": 2339,
    "Title": "[All the Matches of the League](https://leetcode.com/problems/all-the-matches-of-the-league/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/all-the-matches-of-the-league.sql"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2340,
    "Title": "[Minimum Adjacent Swaps to Make a Valid Array](https://leetcode.com/problems/minimum-adjacent-swaps-to-make-a-valid-array/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-adjacent-swaps-to-make-a-valid-array.cpp"
      ],
      [
        "Python",
        "Python/minimum-adjacent-swaps-to-make-a-valid-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2341,
    "Title": "[Maximum Number of Pairs in Array](https://leetcode.com/problems/maximum-number-of-pairs-in-array/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-pairs-in-array.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-pairs-in-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(r)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2342,
    "Title": "[Max Sum of a Pair With Equal Sum of Digits](https://leetcode.com/problems/max-sum-of-a-pair-with-equal-sum-of-digits/)",
    "Solution": [
      [
        "C++",
        "C++/max-sum-of-a-pair-with-equal-sum-of-digits.cpp"
      ],
      [
        "Python",
        "Python/max-sum-of-a-pair-with-equal-sum-of-digits.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2343,
    "Title": "[Query Kth Smallest Trimmed Number](https://leetcode.com/problems/query-kth-smallest-trimmed-number/)",
    "Solution": [
      [
        "C++",
        "C++/query-kth-smallest-trimmed-number.cpp"
      ],
      [
        "Python",
        "Python/query-kth-smallest-trimmed-number.py"
      ]
    ],
    "Time": "_O(q + n * t)_",
    "Space": "_O(t + n + q)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2344,
    "Title": "[Minimum Deletions to Make Array Divisible](https://leetcode.com/problems/minimum-deletions-to-make-array-divisible/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-deletions-to-make-array-divisible.cpp"
      ],
      [
        "Python",
        "Python/minimum-deletions-to-make-array-divisible.py"
      ]
    ],
    "Time": "_O(n + m + logr)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2345,
    "Title": "[Finding the Number of Visible Mountains](https://leetcode.com/problems/finding-the-number-of-visible-mountains/)",
    "Solution": [
      [
        "C++",
        "C++/finding-the-number-of-visible-mountains.cpp"
      ],
      [
        "Python",
        "Python/finding-the-number-of-visible-mountains.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2346,
    "Title": "[Compute the Rank as a Percentage](https://leetcode.com/problems/compute-the-rank-as-a-percentage/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/compute-the-rank-as-a-percentage.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2347,
    "Title": "[Best Poker Hand](https://leetcode.com/problems/best-poker-hand/)",
    "Solution": [
      [
        "C++",
        "C++/best-poker-hand.cpp"
      ],
      [
        "Python",
        "Python/best-poker-hand.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2348,
    "Title": "[Number of Zero-Filled Subarrays](https://leetcode.com/problems/number-of-zero-filled-subarrays/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-zero-filled-subarrays.cpp"
      ],
      [
        "Python",
        "Python/number-of-zero-filled-subarrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Two Pointers, Combinatorics"
  },
  {
    "Index": 2349,
    "Title": "[Design a Number Container System](https://leetcode.com/problems/design-a-number-container-system/)",
    "Solution": [
      [
        "C++",
        "C++/design-a-number-container-system.cpp"
      ],
      [
        "Python",
        "Python/design-a-number-container-system.py"
      ]
    ],
    "Time": "ctor: _O(1)_<br>change: _O(logn)_<br>find: _O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2350,
    "Title": "[Shortest Impossible Sequence of Rolls](https://leetcode.com/problems/shortest-impossible-sequence-of-rolls/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-impossible-sequence-of-rolls.cpp"
      ],
      [
        "Python",
        "Python/shortest-impossible-sequence-of-rolls.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(k)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2351,
    "Title": "[First Letter to Appear Twice](https://leetcode.com/problems/first-letter-to-appear-twice/)",
    "Solution": [
      [
        "C++",
        "C++/first-letter-to-appear-twice.cpp"
      ],
      [
        "Python",
        "Python/first-letter-to-appear-twice.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2352,
    "Title": "[Equal Row and Column Pairs](https://leetcode.com/problems/equal-row-and-column-pairs/)",
    "Solution": [
      [
        "C++",
        "C++/equal-row-and-column-pairs.cpp"
      ],
      [
        "Python",
        "Python/equal-row-and-column-pairs.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2353,
    "Title": "[Design a Food Rating System](https://leetcode.com/problems/design-a-food-rating-system/)",
    "Solution": [
      [
        "C++",
        "C++/design-a-food-rating-system.cpp"
      ],
      [
        "Python",
        "Python/design-a-food-rating-system.py"
      ]
    ],
    "Time": "ctor: _O(nlogn)_<br>changeRating: _O(logn)_<br>highestRated: _O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2354,
    "Title": "[Number of Excellent Pairs](https://leetcode.com/problems/number-of-excellent-pairs/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-excellent-pairs.cpp"
      ],
      [
        "Python",
        "Python/number-of-excellent-pairs.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2355,
    "Title": "[Maximum Number of Books You Can Take](https://leetcode.com/problems/maximum-number-of-books-you-can-take/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-books-you-can-take.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-books-you-can-take.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 2356,
    "Title": "[Number of Unique Subjects Taught by Each Teacher](https://leetcode.com/problems/number-of-unique-subjects-taught-by-each-teacher/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/number-of-unique-subjects-taught-by-each-teacher.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2357,
    "Title": "[Make Array Zero by Subtracting Equal Amounts](https://leetcode.com/problems/make-array-zero-by-subtracting-equal-amounts/)",
    "Solution": [
      [
        "C++",
        "C++/make-array-zero-by-subtracting-equal-amounts.cpp"
      ],
      [
        "Python",
        "Python/make-array-zero-by-subtracting-equal-amounts.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2358,
    "Title": "[Maximum Number of Groups Entering a Competition](https://leetcode.com/problems/maximum-number-of-groups-entering-a-competition/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-groups-entering-a-competition.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-groups-entering-a-competition.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2359,
    "Title": "[Find Closest Node to Given Two Nodes](https://leetcode.com/problems/find-closest-node-to-given-two-nodes/)",
    "Solution": [
      [
        "C++",
        "C++/find-closest-node-to-given-two-nodes.cpp"
      ],
      [
        "Python",
        "Python/find-closest-node-to-given-two-nodes.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Graph, Hash Table, DFS"
  },
  {
    "Index": 2360,
    "Title": "[Longest Cycle in a Graph](https://leetcode.com/problems/longest-cycle-in-a-graph/)",
    "Solution": [
      [
        "C++",
        "C++/longest-cycle-in-a-graph.cpp"
      ],
      [
        "Python",
        "Python/longest-cycle-in-a-graph.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Graph, Hash Table, DFS"
  },
  {
    "Index": 2361,
    "Title": "[Minimum Costs Using the Train Line](https://leetcode.com/problems/minimum-costs-using-the-train-line/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-costs-using-the-train-line.cpp"
      ],
      [
        "Python",
        "Python/minimum-costs-using-the-train-line.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 2362,
    "Title": "[Generate the Invoice](https://leetcode.com/problems/generate-the-invoice/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/generate-the-invoice.sql"
      ]
    ],
    "Time": "_O(m + nlogn)_",
    "Space": "_O(n + m)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2363,
    "Title": "[Merge Similar Items](https://leetcode.com/problems/merge-similar-items/)",
    "Solution": [
      [
        "C++",
        "C++/merge-similar-items.cpp"
      ],
      [
        "Python",
        "Python/merge-similar-items.py"
      ]
    ],
    "Time": "_O((m + n) * log(m + n))_",
    "Space": "_O(m + n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2364,
    "Title": "[Count Number of Bad Pairs](https://leetcode.com/problems/count-number-of-bad-pairs/)",
    "Solution": [
      [
        "C++",
        "C++/count-number-of-bad-pairs.cpp"
      ],
      [
        "Python",
        "Python/count-number-of-bad-pairs.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Count Nice Pairs in an Array](https://leetcode.com/problems/count-nice-pairs-in-an-array/)"
  },
  {
    "Index": 2365,
    "Title": "[Task Scheduler II](https://leetcode.com/problems/task-scheduler-ii/)",
    "Solution": [
      [
        "C++",
        "C++/task-scheduler-ii.cpp"
      ],
      [
        "Python",
        "Python/task-scheduler-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2366,
    "Title": "[Minimum Replacements to Sort the Array](https://leetcode.com/problems/minimum-replacements-to-sort-the-array/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-replacements-to-sort-the-array.cpp"
      ],
      [
        "Python",
        "Python/minimum-replacements-to-sort-the-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2367,
    "Title": "[Number of Arithmetic Triplets](https://leetcode.com/problems/number-of-arithmetic-triplets/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-arithmetic-triplets.cpp"
      ],
      [
        "Python",
        "Python/number-of-arithmetic-triplets.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2368,
    "Title": "[Reachable Nodes With Restrictions](https://leetcode.com/problems/reachable-nodes-with-restrictions/)",
    "Solution": [
      [
        "C++",
        "C++/reachable-nodes-with-restrictions.cpp"
      ],
      [
        "Python",
        "Python/reachable-nodes-with-restrictions.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "BFS"
  },
  {
    "Index": 2369,
    "Title": "[Check if There is a Valid Partition For The Array](https://leetcode.com/problems/check-if-there-is-a-valid-partition-for-the-array/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-there-is-a-valid-partition-for-the-array.cpp"
      ],
      [
        "Python",
        "Python/check-if-there-is-a-valid-partition-for-the-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2370,
    "Title": "[Longest Ideal Subsequence](https://leetcode.com/problems/longest-ideal-subsequence/)",
    "Solution": [
      [
        "C++",
        "C++/longest-ideal-subsequence.cpp"
      ],
      [
        "Python",
        "Python/longest-ideal-subsequence.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2371,
    "Title": "[Minimize Maximum Value in a Grid](https://leetcode.com/problems/minimize-maximum-value-in-a-grid/)",
    "Solution": [
      [
        "C++",
        "C++/minimize-maximum-value-in-a-grid.cpp"
      ],
      [
        "Python",
        "Python/minimize-maximum-value-in-a-grid.py"
      ]
    ],
    "Time": "_O((m * n) * log(m * n))_",
    "Space": "_O(m * n)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 2372,
    "Title": "[Calculate the Influence of Each Salesperson](https://leetcode.com/problems/calculate-the-influence-of-each-salesperson/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/calculate-the-influence-of-each-salesperson.sql"
      ]
    ],
    "Time": "_O(sp + c + s)_",
    "Space": "_O(sp + c + s)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2373,
    "Title": "[Largest Local Values in a Matrix](https://leetcode.com/problems/largest-local-values-in-a-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/largest-local-values-in-a-matrix.cpp"
      ],
      [
        "Python",
        "Python/largest-local-values-in-a-matrix.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2374,
    "Title": "[Node With Highest Edge Score](https://leetcode.com/problems/node-with-highest-edge-score/)",
    "Solution": [
      [
        "C++",
        "C++/node-with-highest-edge-score.cpp"
      ],
      [
        "Python",
        "Python/node-with-highest-edge-score.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2375,
    "Title": "[Construct Smallest Number From DI String](https://leetcode.com/problems/construct-smallest-number-from-di-string/)",
    "Solution": [
      [
        "C++",
        "C++/construct-smallest-number-from-di-string.cpp"
      ],
      [
        "Python",
        "Python/construct-smallest-number-from-di-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2376,
    "Title": "[Count Special Integers](https://leetcode.com/problems/count-special-integers/)",
    "Solution": [
      [
        "C++",
        "C++/count-special-integers.cpp"
      ],
      [
        "Python",
        "Python/count-special-integers.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(logn)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Numbers With Repeated Digits](https://leetcode.com/problems/numbers-with-repeated-digits/)"
  },
  {
    "Index": 2377,
    "Title": "[Sort the Olympic Table](https://leetcode.com/problems/sort-the-olympic-table/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/sort-the-olympic-table.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2378,
    "Title": "[Choose Edges to Maximize Score in a Tree](https://leetcode.com/problems/choose-edges-to-maximize-score-in-a-tree/)",
    "Solution": [
      [
        "C++",
        "C++/choose-edges-to-maximize-score-in-a-tree.cpp"
      ],
      [
        "Python",
        "Python/choose-edges-to-maximize-score-in-a-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "DFS, Stack, Tree DP"
  },
  {
    "Index": 2379,
    "Title": "[Minimum Recolors to Get K Consecutive Black Blocks](https://leetcode.com/problems/minimum-recolors-to-get-k-consecutive-black-blocks/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-recolors-to-get-k-consecutive-black-blocks.cpp"
      ],
      [
        "Python",
        "Python/minimum-recolors-to-get-k-consecutive-black-blocks.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2380,
    "Title": "[Time Needed to Rearrange a Binary String](https://leetcode.com/problems/time-needed-to-rearrange-a-binary-string/)",
    "Solution": [
      [
        "C++",
        "C++/time-needed-to-rearrange-a-binary-string.cpp"
      ],
      [
        "Python",
        "Python/time-needed-to-rearrange-a-binary-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2381,
    "Title": "[Shifting Letters II](https://leetcode.com/problems/shifting-letters-ii/)",
    "Solution": [
      [
        "C++",
        "C++/shifting-letters-ii.cpp"
      ],
      [
        "Python",
        "Python/shifting-letters-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2382,
    "Title": "[Maximum Segment Sum After Removals](https://leetcode.com/problems/maximum-segment-sum-after-removals/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-segment-sum-after-removals.cpp"
      ],
      [
        "Python",
        "Python/maximum-segment-sum-after-removals.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2383,
    "Title": "[Minimum Hours of Training to Win a Competition](https://leetcode.com/problems/minimum-hours-of-training-to-win-a-competition/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-hours-of-training-to-win-a-competition.cpp"
      ],
      [
        "Python",
        "Python/minimum-hours-of-training-to-win-a-competition.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2384,
    "Title": "[Largest Palindromic Number](https://leetcode.com/problems/largest-palindromic-number/)",
    "Solution": [
      [
        "C++",
        "C++/largest-palindromic-number.cpp"
      ],
      [
        "Python",
        "Python/largest-palindromic-number.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2385,
    "Title": "[Amount of Time for Binary Tree to Be Infected](https://leetcode.com/problems/amount-of-time-for-binary-tree-to-be-infected/)",
    "Solution": [
      [
        "C++",
        "C++/amount-of-time-for-binary-tree-to-be-infected.cpp"
      ],
      [
        "Python",
        "Python/amount-of-time-for-binary-tree-to-be-infected.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "BFS, DFS, Tree DP"
  },
  {
    "Index": 2386,
    "Title": "[Find the K-Sum of an Array](https://leetcode.com/problems/find-the-k-sum-of-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-k-sum-of-an-array.cpp"
      ],
      [
        "Python",
        "Python/find-the-k-sum-of-an-array.py"
      ]
    ],
    "Time": "_O(nlogn + klogk)_",
    "Space": "_O(n + k)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "BFS, Heap"
  },
  {
    "Index": 2387,
    "Title": "[Median of a Row Wise Sorted Matrix](https://leetcode.com/problems/median-of-a-row-wise-sorted-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/median-of-a-row-wise-sorted-matrix.cpp"
      ],
      [
        "Python",
        "Python/median-of-a-row-wise-sorted-matrix.py"
      ]
    ],
    "Time": "_O(logr * mlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Binary Search"
  },
  {
    "Index": 2388,
    "Title": "[Change Null Values in a Table to the Previous Value](https://leetcode.com/problems/change-null-values-in-a-table-to-the-previous-value/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/change-null-values-in-a-table-to-the-previous-value.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2389,
    "Title": "[Longest Subsequence With Limited Sum](https://leetcode.com/problems/longest-subsequence-with-limited-sum/)",
    "Solution": [
      [
        "C++",
        "C++/longest-subsequence-with-limited-sum.cpp"
      ],
      [
        "Python",
        "Python/longest-subsequence-with-limited-sum.py"
      ]
    ],
    "Time": "_O(nlogn + qlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Greedy, Sort, Binary Search"
  },
  {
    "Index": 2390,
    "Title": "[Removing Stars From a String](https://leetcode.com/problems/removing-stars-from-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/removing-stars-from-a-string.cpp"
      ],
      [
        "Python",
        "Python/removing-stars-from-a-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2391,
    "Title": "[Minimum Amount of Time to Collect Garbage](https://leetcode.com/problems/minimum-amount-of-time-to-collect-garbage/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-amount-of-time-to-collect-garbage.cpp"
      ],
      [
        "Python",
        "Python/minimum-amount-of-time-to-collect-garbage.py"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2392,
    "Title": "[Build a Matrix With Conditions](https://leetcode.com/problems/build-a-matrix-with-conditions/)",
    "Solution": [
      [
        "C++",
        "C++/build-a-matrix-with-conditions.cpp"
      ],
      [
        "Python",
        "Python/build-a-matrix-with-conditions.py"
      ]
    ],
    "Time": "_O(k^2 + r + c)_",
    "Space": "_O(k + r + c)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Graph, Topological Sort"
  },
  {
    "Index": 2393,
    "Title": "[Count Strictly Increasing Subarrays](https://leetcode.com/problems/count-strictly-increasing-subarrays/)",
    "Solution": [
      [
        "C++",
        "C++/count-strictly-increasing-subarrays.cpp"
      ],
      [
        "Python",
        "Python/count-strictly-increasing-subarrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Two Pointers"
  },
  {
    "Index": 2394,
    "Title": "[Employees With Deductions](https://leetcode.com/problems/employees-with-deductions/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/employees-with-deductions.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2395,
    "Title": "[Find Subarrays With Equal Sum](https://leetcode.com/problems/find-subarrays-with-equal-sum/)",
    "Solution": [
      [
        "C++",
        "C++/find-subarrays-with-equal-sum.cpp"
      ],
      [
        "Python",
        "Python/find-subarrays-with-equal-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2396,
    "Title": "[Strictly Palindromic Number](https://leetcode.com/problems/strictly-palindromic-number/)",
    "Solution": [
      [
        "C++",
        "C++/strictly-palindromic-number.cpp"
      ],
      [
        "Python",
        "Python/strictly-palindromic-number.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2397,
    "Title": "[Maximum Rows Covered by Columns](https://leetcode.com/problems/maximum-rows-covered-by-columns/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-rows-covered-by-columns.cpp"
      ],
      [
        "Python",
        "Python/maximum-rows-covered-by-columns.py"
      ]
    ],
    "Time": "_O(m * n + m * C(n, k))_",
    "Space": "_O(m)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2398,
    "Title": "[Maximum Number of Robots Within Budget](https://leetcode.com/problems/maximum-number-of-robots-within-budget/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-robots-within-budget.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-robots-within-budget.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Mono Deque, Sliding Window, Two Pointers"
  },
  {
    "Index": 2399,
    "Title": "[Check Distances Between Same Letters](https://leetcode.com/problems/check-distances-between-same-letters/)",
    "Solution": [
      [
        "C++",
        "C++/check-distances-between-same-letters.cpp"
      ],
      [
        "Python",
        "Python/check-distances-between-same-letters.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2400,
    "Title": "[Number of Ways to Reach a Position After Exactly k Steps](https://leetcode.com/problems/number-of-ways-to-reach-a-position-after-exactly-k-steps/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-ways-to-reach-a-position-after-exactly-k-steps.cpp"
      ],
      [
        "Python",
        "Python/number-of-ways-to-reach-a-position-after-exactly-k-steps.py"
      ]
    ],
    "Time": "_O(k)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2401,
    "Title": "[Longest Nice Subarray](https://leetcode.com/problems/longest-nice-subarray/)",
    "Solution": [
      [
        "C++",
        "C++/longest-nice-subarray.cpp"
      ],
      [
        "Python",
        "Python/longest-nice-subarray.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Sliding Window, Two Pointers"
  },
  {
    "Index": 2402,
    "Title": "[Meeting Rooms III](https://leetcode.com/problems/meeting-rooms-iii/)",
    "Solution": [
      [
        "C++",
        "C++/meeting-rooms-iii.cpp"
      ],
      [
        "Python",
        "Python/meeting-rooms-iii.py"
      ]
    ],
    "Time": "_O(mlogm + n + mlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Heap"
  },
  {
    "Index": 2403,
    "Title": "[Minimum Time to Kill All Monsters](https://leetcode.com/problems/minimum-time-to-kill-all-monsters/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-time-to-kill-all-monsters.cpp"
      ],
      [
        "Python",
        "Python/minimum-time-to-kill-all-monsters.py"
      ]
    ],
    "Time": "_O(n * 2^n)_",
    "Space": "_O(2^n)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 2404,
    "Title": "[Most Frequent Even Element](https://leetcode.com/problems/most-frequent-even-element/)",
    "Solution": [
      [
        "C++",
        "C++/most-frequent-even-element.cpp"
      ],
      [
        "Python",
        "Python/most-frequent-even-element.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2405,
    "Title": "[Optimal Partition of String](https://leetcode.com/problems/optimal-partition-of-string/)",
    "Solution": [
      [
        "C++",
        "C++/optimal-partition-of-string.cpp"
      ],
      [
        "Python",
        "Python/optimal-partition-of-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2406,
    "Title": "[Divide Intervals Into Minimum Number of Groups](https://leetcode.com/problems/divide-intervals-into-minimum-number-of-groups/)",
    "Solution": [
      [
        "C++",
        "C++/divide-intervals-into-minimum-number-of-groups.cpp"
      ],
      [
        "Python",
        "Python/divide-intervals-into-minimum-number-of-groups.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2407,
    "Title": "[Longest Increasing Subsequence II](https://leetcode.com/problems/longest-increasing-subsequence-ii/)",
    "Solution": [
      [
        "C++",
        "C++/longest-increasing-subsequence-ii.cpp"
      ],
      [
        "Python",
        "Python/longest-increasing-subsequence-ii.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Longest Increasing Subsequence](https://leetcode.com/problems/longest-increasing-subsequence/)"
  },
  {
    "Index": 2408,
    "Title": "[Design SQL](https://leetcode.com/problems/design-sql/)",
    "Solution": [
      [
        "C++",
        "C++/design-sql.cpp"
      ],
      [
        "Python",
        "Python/design-sql.py"
      ]
    ],
    "Time": "ctor: _O(t * max_m)_<br>insertRow: _O(m)_<br>deleteRow: _O(1)_<br>selectCell: _O(m)_",
    "Space": "_O(d)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2409,
    "Title": "[Count Days Spent Together](https://leetcode.com/problems/count-days-spent-together/)",
    "Solution": [
      [
        "C++",
        "C++/count-days-spent-together.cpp"
      ],
      [
        "Python",
        "Python/count-days-spent-together.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2410,
    "Title": "[Maximum Matching of Players With Trainers](https://leetcode.com/problems/maximum-matching-of-players-with-trainers/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-matching-of-players-with-trainers.cpp"
      ],
      [
        "Python",
        "Python/maximum-matching-of-players-with-trainers.py"
      ]
    ],
    "Time": "_O(nlogn + mlogm)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2411,
    "Title": "[Smallest Subarrays With Maximum Bitwise OR](https://leetcode.com/problems/smallest-subarrays-with-maximum-bitwise-or/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-subarrays-with-maximum-bitwise-or.cpp"
      ],
      [
        "Python",
        "Python/smallest-subarrays-with-maximum-bitwise-or.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2412,
    "Title": "[Minimum Money Required Before Transactions](https://leetcode.com/problems/minimum-money-required-before-transactions/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-money-required-before-transactions.cpp"
      ],
      [
        "Python",
        "Python/minimum-money-required-before-transactions.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2413,
    "Title": "[Smallest Even Multiple](https://leetcode.com/problems/smallest-even-multiple/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-even-multiple.cpp"
      ],
      [
        "Python",
        "Python/smallest-even-multiple.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2414,
    "Title": "[Length of the Longest Alphabetical Continuous Substring](https://leetcode.com/problems/length-of-the-longest-alphabetical-continuous-substring/)",
    "Solution": [
      [
        "C++",
        "C++/length-of-the-longest-alphabetical-continuous-substring.cpp"
      ],
      [
        "Python",
        "Python/length-of-the-longest-alphabetical-continuous-substring.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2415,
    "Title": "[Reverse Odd Levels of Binary Tree](https://leetcode.com/problems/reverse-odd-levels-of-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/reverse-odd-levels-of-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/reverse-odd-levels-of-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "BFS"
  },
  {
    "Index": 2416,
    "Title": "[Sum of Prefix Scores of Strings](https://leetcode.com/problems/sum-of-prefix-scores-of-strings/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-prefix-scores-of-strings.cpp"
      ],
      [
        "Python",
        "Python/sum-of-prefix-scores-of-strings.py"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(t)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2417,
    "Title": "[Closest Fair Integer](https://leetcode.com/problems/closest-fair-integer/)",
    "Solution": [
      [
        "C++",
        "C++/closest-fair-integer.cpp"
      ],
      [
        "Python",
        "Python/closest-fair-integer.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(logn)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2418,
    "Title": "[Sort the People](https://leetcode.com/problems/sort-the-people/)",
    "Solution": [
      [
        "C++",
        "C++/sort-the-people.cpp"
      ],
      [
        "Python",
        "Python/sort-the-people.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2419,
    "Title": "[Longest Subarray With Maximum Bitwise AND](https://leetcode.com/problems/longest-subarray-with-maximum-bitwise-and/)",
    "Solution": [
      [
        "C++",
        "C++/longest-subarray-with-maximum-bitwise-and.cpp"
      ],
      [
        "Python",
        "Python/longest-subarray-with-maximum-bitwise-and.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2420,
    "Title": "[Find All Good Indices](https://leetcode.com/problems/find-all-good-indices/)",
    "Solution": [
      [
        "C++",
        "C++/find-all-good-indices.cpp"
      ],
      [
        "Python",
        "Python/find-all-good-indices.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2421,
    "Title": "[Number of Good Paths](https://leetcode.com/problems/number-of-good-paths/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-good-paths.cpp"
      ],
      [
        "Python",
        "Python/number-of-good-paths.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Sort, Union Find"
  },
  {
    "Index": 2422,
    "Title": "[Merge Operations to Turn Array Into a Palindrome](https://leetcode.com/problems/merge-operations-to-turn-array-into-a-palindrome/)",
    "Solution": [
      [
        "C++",
        "C++/merge-operations-to-turn-array-into-a-palindrome.cpp"
      ],
      [
        "Python",
        "Python/merge-operations-to-turn-array-into-a-palindrome.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2423,
    "Title": "[Remove Letter To Equalize Frequency](https://leetcode.com/problems/remove-letter-to-equalize-frequency/)",
    "Solution": [
      [
        "C++",
        "C++/remove-letter-to-equalize-frequency.cpp"
      ],
      [
        "Python",
        "Python/remove-letter-to-equalize-frequency.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2424,
    "Title": "[Longest Uploaded Prefix](https://leetcode.com/problems/longest-uploaded-prefix/)",
    "Solution": [
      [
        "C++",
        "C++/longest-uploaded-prefix.cpp"
      ],
      [
        "Python",
        "Python/longest-uploaded-prefix.py"
      ]
    ],
    "Time": "ctor: _O(1)_<br>upload: _O(1)_, amortized <br>longest: _O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2425,
    "Title": "[Bitwise XOR of All Pairings](https://leetcode.com/problems/bitwise-xor-of-all-pairings/)",
    "Solution": [
      [
        "C++",
        "C++/bitwise-xor-of-all-pairings.cpp"
      ],
      [
        "Python",
        "Python/bitwise-xor-of-all-pairings.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2426,
    "Title": "[Number of Pairs Satisfying Inequality](https://leetcode.com/problems/number-of-pairs-satisfying-inequality/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-pairs-satisfying-inequality.cpp"
      ],
      [
        "Python",
        "Python/number-of-pairs-satisfying-inequality.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2427,
    "Title": "[Number of Common Factors](https://leetcode.com/problems/number-of-common-factors/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-common-factors.cpp"
      ],
      [
        "Python",
        "Python/number-of-common-factors.py"
      ]
    ],
    "Time": "_O(log(min(a, b)) + sqrt(gcd))_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2428,
    "Title": "[Maximum Sum of an Hourglass](https://leetcode.com/problems/maximum-sum-of-an-hourglass/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-sum-of-an-hourglass.cpp"
      ],
      [
        "Python",
        "Python/maximum-sum-of-an-hourglass.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2429,
    "Title": "[Minimize XOR](https://leetcode.com/problems/minimize-xor/)",
    "Solution": [
      [
        "C++",
        "C++/minimize-xor.cpp"
      ],
      [
        "Python",
        "Python/minimize-xor.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2430,
    "Title": "[Maximum Deletions on a String](https://leetcode.com/problems/maximum-deletions-on-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-deletions-on-a-string.cpp"
      ],
      [
        "Python",
        "Python/maximum-deletions-on-a-string.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2431,
    "Title": "[Maximize Total Tastiness of Purchased Fruits](https://leetcode.com/problems/maximize-total-tastiness-of-purchased-fruits/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-total-tastiness-of-purchased-fruits.cpp"
      ],
      [
        "Python",
        "Python/maximize-total-tastiness-of-purchased-fruits.py"
      ]
    ],
    "Time": "_O(n * a * c)_",
    "Space": "_O(a * c)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2432,
    "Title": "[The Employee That Worked on the Longest Task](https://leetcode.com/problems/the-employee-that-worked-on-the-longest-task/)",
    "Solution": [
      [
        "C++",
        "C++/the-employee-that-worked-on-the-longest-task.cpp"
      ],
      [
        "Python",
        "Python/the-employee-that-worked-on-the-longest-task.py"
      ]
    ],
    "Time": "_O(l)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2433,
    "Title": "[Find The Original Array of Prefix Xor](https://leetcode.com/problems/find-the-original-array-of-prefix-xor/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-original-array-of-prefix-xor.cpp"
      ],
      [
        "Python",
        "Python/find-the-original-array-of-prefix-xor.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2434,
    "Title": "[Using a Robot to Print the Lexicographically Smallest String](https://leetcode.com/problems/using-a-robot-to-print-the-lexicographically-smallest-string/)",
    "Solution": [
      [
        "C++",
        "C++/using-a-robot-to-print-the-lexicographically-smallest-string.cpp"
      ],
      [
        "Python",
        "Python/using-a-robot-to-print-the-lexicographically-smallest-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2435,
    "Title": "[Paths in Matrix Whose Sum Is Divisible by K](https://leetcode.com/problems/paths-in-matrix-whose-sum-is-divisible-by-k/)",
    "Solution": [
      [
        "C++",
        "C++/paths-in-matrix-whose-sum-is-divisible-by-k.cpp"
      ],
      [
        "Python",
        "Python/paths-in-matrix-whose-sum-is-divisible-by-k.py"
      ]
    ],
    "Time": "_O(m * n * k)_",
    "Space": "_O(n * k)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2436,
    "Title": "[Minimum Split Into Subarrays With GCD Greater Than One](https://leetcode.com/problems/minimum-split-into-subarrays-with-gcd-greater-than-one/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-split-into-subarrays-with-gcd-greater-than-one.cpp"
      ],
      [
        "Python",
        "Python/minimum-split-into-subarrays-with-gcd-greater-than-one.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2437,
    "Title": "[Number of Valid Clock Times](https://leetcode.com/problems/number-of-valid-clock-times/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-valid-clock-times.cpp"
      ],
      [
        "Python",
        "Python/number-of-valid-clock-times.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2438,
    "Title": "[Range Product Queries of Powers](https://leetcode.com/problems/range-product-queries-of-powers/)",
    "Solution": [
      [
        "C++",
        "C++/range-product-queries-of-powers.cpp"
      ],
      [
        "Python",
        "Python/range-product-queries-of-powers.py"
      ]
    ],
    "Time": "_O(logn + qlogr)_",
    "Space": "_O(logn)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2439,
    "Title": "[Minimize Maximum of Array](https://leetcode.com/problems/minimize-maximum-of-array/)",
    "Solution": [
      [
        "C++",
        "C++/minimize-maximum-of-array.cpp"
      ],
      [
        "Python",
        "Python/minimize-maximum-of-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2440,
    "Title": "[Create Components With Same Value](https://leetcode.com/problems/create-components-with-same-value/)",
    "Solution": [
      [
        "C++",
        "C++/create-components-with-same-value.cpp"
      ],
      [
        "Python",
        "Python/create-components-with-same-value.py"
      ]
    ],
    "Time": "_O(n * sqrt(n))_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2441,
    "Title": "[Largest Positive Integer That Exists With Its Negative](https://leetcode.com/problems/largest-positive-integer-that-exists-with-its-negative/)",
    "Solution": [
      [
        "C++",
        "C++/largest-positive-integer-that-exists-with-its-negative.cpp"
      ],
      [
        "Python",
        "Python/largest-positive-integer-that-exists-with-its-negative.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2442,
    "Title": "[Count Number of Distinct Integers After Reverse Operations](https://leetcode.com/problems/count-number-of-distinct-integers-after-reverse-operations/)",
    "Solution": [
      [
        "C++",
        "C++/count-number-of-distinct-integers-after-reverse-operations.cpp"
      ],
      [
        "Python",
        "Python/count-number-of-distinct-integers-after-reverse-operations.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2443,
    "Title": "[Sum of Number and Its Reverse](https://leetcode.com/problems/sum-of-number-and-its-reverse/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-number-and-its-reverse.cpp"
      ],
      [
        "Python",
        "Python/sum-of-number-and-its-reverse.py"
      ]
    ],
    "Time": "_O(n^(1/(2*log2(10))))_",
    "Space": "_O(log10(n)/2)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2444,
    "Title": "[Count Subarrays With Fixed Bounds](https://leetcode.com/problems/count-subarrays-with-fixed-bounds/)",
    "Solution": [
      [
        "C++",
        "C++/count-subarrays-with-fixed-bounds.cpp"
      ],
      [
        "Python",
        "Python/count-subarrays-with-fixed-bounds.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Number of Substrings Containing All Three Characters](https://leetcode.com/problems/number-of-substrings-containing-all-three-characters/)",
    "Note": "Two Pointers"
  },
  {
    "Index": 2445,
    "Title": "[Number of Nodes With Value One](https://leetcode.com/problems/number-of-nodes-with-value-one/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-nodes-with-value-one.cpp"
      ],
      [
        "Python",
        "Python/number-of-nodes-with-value-one.py"
      ]
    ],
    "Time": "_O(q + h)_",
    "Space": "_O(q + h)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Tree, DFS, BFS"
  },
  {
    "Index": 2446,
    "Title": "[Determine if Two Events Have Conflict](https://leetcode.com/problems/determine-if-two-events-have-conflict/)",
    "Solution": [
      [
        "C++",
        "C++/determine-if-two-events-have-conflict.cpp"
      ],
      [
        "Python",
        "Python/determine-if-two-events-have-conflict.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2447,
    "Title": "[Number of Subarrays With GCD Equal to K](https://leetcode.com/problems/number-of-subarrays-with-gcd-equal-to-k/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-subarrays-with-gcd-equal-to-k.cpp"
      ],
      [
        "Python",
        "Python/number-of-subarrays-with-gcd-equal-to-k.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(logr)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2448,
    "Title": "[Minimum Cost to Make Array Equal](https://leetcode.com/problems/minimum-cost-to-make-array-equal/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-to-make-array-equal.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-to-make-array-equal.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Math, Binary Search, Prefix Sum"
  },
  {
    "Index": 2449,
    "Title": "[Minimum Number of Operations to Make Arrays Similar](https://leetcode.com/problems/minimum-number-of-operations-to-make-arrays-similar/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-operations-to-make-arrays-similar.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-operations-to-make-arrays-similar.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2450,
    "Title": "[Number of Distinct Binary Strings After Applying Operations](https://leetcode.com/problems/number-of-distinct-binary-strings-after-applying-operations/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-distinct-binary-strings-after-applying-operations.cpp"
      ],
      [
        "Python",
        "Python/number-of-distinct-binary-strings-after-applying-operations.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2451,
    "Title": "[Odd String Difference](https://leetcode.com/problems/odd-string-difference/)",
    "Solution": [
      [
        "C++",
        "C++/odd-string-difference.cpp"
      ],
      [
        "Python",
        "Python/odd-string-difference.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2452,
    "Title": "[Words Within Two Edits of Dictionary](https://leetcode.com/problems/words-within-two-edits-of-dictionary/)",
    "Solution": [
      [
        "C++",
        "C++/words-within-two-edits-of-dictionary.cpp"
      ],
      [
        "Python",
        "Python/words-within-two-edits-of-dictionary.py"
      ]
    ],
    "Time": "_O(25 * l * (n + q))_",
    "Space": "_O(25 * l * n)_",
    "Difficulty": "Medium",
    "Tag": "variant of [MHC2022 - Round 3](https://www.facebook.com/codingcompetitions/hacker-cup/2022/round-3/problems/C)"
  },
  {
    "Index": 2453,
    "Title": "[Destroy Sequential Targets](https://leetcode.com/problems/destroy-sequential-targets/)",
    "Solution": [
      [
        "C++",
        "C++/destroy-sequential-targets.cpp"
      ],
      [
        "Python",
        "Python/destroy-sequential-targets.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(s)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2454,
    "Title": "[Next Greater Element IV](https://leetcode.com/problems/next-greater-element-iv/)",
    "Solution": [
      [
        "C++",
        "C++/next-greater-element-iv.cpp"
      ],
      [
        "Python",
        "Python/next-greater-element-iv.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2455,
    "Title": "[Average Value of Even Numbers That Are Divisible by Three](https://leetcode.com/problems/average-value-of-even-numbers-that-are-divisible-by-three/)",
    "Solution": [
      [
        "C++",
        "C++/average-value-of-even-numbers-that-are-divisible-by-three.cpp"
      ],
      [
        "Python",
        "Python/average-value-of-even-numbers-that-are-divisible-by-three.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2456,
    "Title": "[Most Popular Video Creator](https://leetcode.com/problems/most-popular-video-creator/)",
    "Solution": [
      [
        "C++",
        "C++/most-popular-video-creator.cpp"
      ],
      [
        "Python",
        "Python/most-popular-video-creator.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2457,
    "Title": "[Minimum Addition to Make Integer Beautiful](https://leetcode.com/problems/minimum-addition-to-make-integer-beautiful/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-addition-to-make-integer-beautiful.cpp"
      ],
      [
        "Python",
        "Python/minimum-addition-to-make-integer-beautiful.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2458,
    "Title": "[Height of Binary Tree After Subtree Removal Queries](https://leetcode.com/problems/height-of-binary-tree-after-subtree-removal-queries/)",
    "Solution": [
      [
        "C++",
        "C++/height-of-binary-tree-after-subtree-removal-queries.cpp"
      ],
      [
        "Python",
        "Python/height-of-binary-tree-after-subtree-removal-queries.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Tree, DFS"
  },
  {
    "Index": 2459,
    "Title": "[Sort Array by Moving Items to Empty Space](https://leetcode.com/problems/sort-array-by-moving-items-to-empty-space/)",
    "Solution": [
      [
        "C++",
        "C++/sort-array-by-moving-items-to-empty-space.cpp"
      ],
      [
        "Python",
        "Python/sort-array-by-moving-items-to-empty-space.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 2460,
    "Title": "[Apply Operations to an Array](https://leetcode.com/problems/apply-operations-to-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/apply-operations-to-an-array.cpp"
      ],
      [
        "Python",
        "Python/apply-operations-to-an-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2461,
    "Title": "[Maximum Sum of Distinct Subarrays With Length K](https://leetcode.com/problems/maximum-sum-of-distinct-subarrays-with-length-k/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-sum-of-distinct-subarrays-with-length-k.cpp"
      ],
      [
        "Python",
        "Python/maximum-sum-of-distinct-subarrays-with-length-k.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Two Pointers"
  },
  {
    "Index": 2462,
    "Title": "[Total Cost to Hire K Workers](https://leetcode.com/problems/total-cost-to-hire-k-workers/)",
    "Solution": [
      [
        "C++",
        "C++/total-cost-to-hire-k-workers.cpp"
      ],
      [
        "Python",
        "Python/total-cost-to-hire-k-workers.py"
      ]
    ],
    "Time": "_O(c + klogc)_",
    "Space": "_O(c)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Heap, Two Pointers"
  },
  {
    "Index": 2463,
    "Title": "[Minimum Total Distance Traveled](https://leetcode.com/problems/minimum-total-distance-traveled/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-total-distance-traveled.cpp"
      ],
      [
        "Python",
        "Python/minimum-total-distance-traveled.py"
      ]
    ],
    "Time": "_O(mlogm + nlogn + m * n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2464,
    "Title": "[Minimum Subarrays in a Valid Split](https://leetcode.com/problems/minimum-subarrays-in-a-valid-split/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-subarrays-in-a-valid-split.cpp"
      ],
      [
        "Python",
        "Python/minimum-subarrays-in-a-valid-split.py"
      ]
    ],
    "Time": "_O(n^2 * logr)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2465,
    "Title": "[Number of Distinct Averages](https://leetcode.com/problems/number-of-distinct-averages/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-distinct-averages.cpp"
      ],
      [
        "Python",
        "Python/number-of-distinct-averages.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Two Pointers, Hash Table"
  },
  {
    "Index": 2466,
    "Title": "[Count Ways To Build Good Strings](https://leetcode.com/problems/count-ways-to-build-good-strings/)",
    "Solution": [
      [
        "C++",
        "C++/count-ways-to-build-good-strings.cpp"
      ],
      [
        "Python",
        "Python/count-ways-to-build-good-strings.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2467,
    "Title": "[Most Profitable Path in a Tree](https://leetcode.com/problems/most-profitable-path-in-a-tree/)",
    "Solution": [
      [
        "C++",
        "C++/most-profitable-path-in-a-tree.cpp"
      ],
      [
        "Python",
        "Python/most-profitable-path-in-a-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Tree, DFS"
  },
  {
    "Index": 2468,
    "Title": "[Split Message Based on Limit](https://leetcode.com/problems/split-message-based-on-limit/)",
    "Solution": [
      [
        "C++",
        "C++/split-message-based-on-limit.cpp"
      ],
      [
        "Python",
        "Python/split-message-based-on-limit.py"
      ]
    ],
    "Time": "_O(n + rlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2469,
    "Title": "[Convert the Temperature](https://leetcode.com/problems/convert-the-temperature/)",
    "Solution": [
      [
        "C++",
        "C++/convert-the-temperature.cpp"
      ],
      [
        "Python",
        "Python/convert-the-temperature.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2470,
    "Title": "[Number of Subarrays With LCM Equal to K](https://leetcode.com/problems/number-of-subarrays-with-lcm-equal-to-k/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-subarrays-with-lcm-equal-to-k.cpp"
      ],
      [
        "Python",
        "Python/number-of-subarrays-with-lcm-equal-to-k.py"
      ]
    ],
    "Time": "_O(n * sqrt(k) * logk)_",
    "Space": "_O(sqrt(k))_",
    "Difficulty": "Medium",
    "Tag": "variant of [Number of Subarrays With GCD Equal to K](https://leetcode.com/problems/number-of-subarrays-with-gcd-equal-to-k/)"
  },
  {
    "Index": 2470,
    "Title": "[Number of Subarrays With LCM Equal to K](https://leetcode.com/problems/number-of-subarrays-with-lcm-equal-to-k/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-subarrays-with-lcm-equal-to-k.cpp"
      ],
      [
        "Python",
        "Python/number-of-subarrays-with-lcm-equal-to-k.py"
      ]
    ],
    "Time": "_O(n * sqrt(k) * logk)_",
    "Space": "_O(sqrt(k))_",
    "Difficulty": "Medium",
    "Tag": "variant of [Number of Subarrays With GCD Equal to K](https://leetcode.com/problems/number-of-subarrays-with-gcd-equal-to-k/)"
  },
  {
    "Index": 2471,
    "Title": "[Minimum Number of Operations to Sort a Binary Tree by Level](https://leetcode.com/problems/minimum-number-of-operations-to-sort-a-binary-tree-by-level/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-operations-to-sort-a-binary-tree-by-level.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-operations-to-sort-a-binary-tree-by-level.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(w)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Sort, BFS"
  },
  {
    "Index": 2472,
    "Title": "[Maximum Number of Non-overlapping Palindrome Substrings](https://leetcode.com/problems/maximum-number-of-non-overlapping-palindrome-substrings/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-non-overlapping-palindrome-substrings.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-non-overlapping-palindrome-substrings.py"
      ]
    ],
    "Time": "_O(n * k)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2473,
    "Title": "[Minimum Cost to Buy Apples](https://leetcode.com/problems/minimum-cost-to-buy-apples/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-to-buy-apples.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-to-buy-apples.py"
      ]
    ],
    "Time": "_O(n * rlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "`Dijkstra's Algorithm`"
  },
  {
    "Index": 2474,
    "Title": "[Customers With Strictly Increasing Purchases](https://leetcode.com/problems/customers-with-strictly-increasing-purchases/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/customers-with-strictly-increasing-purchases.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2475,
    "Title": "[Number of Unequal Triplets in Array](https://leetcode.com/problems/number-of-unequal-triplets-in-array/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-unequal-triplets-in-array.cpp"
      ],
      [
        "Python",
        "Python/number-of-unequal-triplets-in-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2476,
    "Title": "[Closest Nodes Queries in a Binary Search Tree](https://leetcode.com/problems/closest-nodes-queries-in-a-binary-search-tree/)",
    "Solution": [
      [
        "C++",
        "C++/closest-nodes-queries-in-a-binary-search-tree.cpp"
      ],
      [
        "Python",
        "Python/closest-nodes-queries-in-a-binary-search-tree.py"
      ]
    ],
    "Time": "_O(n + qlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "DFS, Binary Search"
  },
  {
    "Index": 2477,
    "Title": "[Minimum Fuel Cost to Report to the Capital](https://leetcode.com/problems/minimum-fuel-cost-to-report-to-the-capital/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-fuel-cost-to-report-to-the-capital.cpp"
      ],
      [
        "Python",
        "Python/minimum-fuel-cost-to-report-to-the-capital.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Tree, DFS"
  },
  {
    "Index": 2478,
    "Title": "[Number of Beautiful Partitions](https://leetcode.com/problems/number-of-beautiful-partitions/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-beautiful-partitions.cpp"
      ],
      [
        "Python",
        "Python/number-of-beautiful-partitions.py"
      ]
    ],
    "Time": "_O(n * k)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2479,
    "Title": "[Maximum XOR of Two Non-Overlapping Subtrees](https://leetcode.com/problems/maximum-xor-of-two-non-overlapping-subtrees/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-xor-of-two-non-overlapping-subtrees.cpp"
      ],
      [
        "Python",
        "Python/maximum-xor-of-two-non-overlapping-subtrees.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒, variant of [Maximum XOR of Two Numbers in an Array](https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/)"
  },
  {
    "Index": 2480,
    "Title": "[Form a Chemical Bond](https://leetcode.com/problems/form-a-chemical-bond/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/form-a-chemical-bond.sql"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2481,
    "Title": "[Minimum Cuts to Divide a Circle](https://leetcode.com/problems/minimum-cuts-to-divide-a-circle/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cuts-to-divide-a-circle.cpp"
      ],
      [
        "Python",
        "Python/minimum-cuts-to-divide-a-circle.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2482,
    "Title": "[Difference Between Ones and Zeros in Row and Column](https://leetcode.com/problems/difference-between-ones-and-zeros-in-row-and-column/)",
    "Solution": [
      [
        "C++",
        "C++/difference-between-ones-and-zeros-in-row-and-column.cpp"
      ],
      [
        "Python",
        "Python/difference-between-ones-and-zeros-in-row-and-column.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2483,
    "Title": "[Minimum Penalty for a Shop](https://leetcode.com/problems/minimum-penalty-for-a-shop/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-penalty-for-a-shop.cpp"
      ],
      [
        "Python",
        "Python/minimum-penalty-for-a-shop.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2484,
    "Title": "[Count Palindromic Subsequences](https://leetcode.com/problems/count-palindromic-subsequences/)",
    "Solution": [
      [
        "C++",
        "C++/count-palindromic-subsequences.cpp"
      ],
      [
        "Python",
        "Python/count-palindromic-subsequences.py"
      ]
    ],
    "Time": "_O(100 * n)_",
    "Space": "_O(100 * n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2485,
    "Title": "[Find the Pivot Integer](https://leetcode.com/problems/find-the-pivot-integer/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-pivot-integer.cpp"
      ],
      [
        "Python",
        "Python/find-the-pivot-integer.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2486,
    "Title": "[Append Characters to String to Make Subsequence](https://leetcode.com/problems/append-characters-to-string-to-make-subsequence/)",
    "Solution": [
      [
        "C++",
        "C++/append-characters-to-string-to-make-subsequence.cpp"
      ],
      [
        "Python",
        "Python/append-characters-to-string-to-make-subsequence.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2487,
    "Title": "[Remove Nodes From Linked List](https://leetcode.com/problems/remove-nodes-from-linked-list/)",
    "Solution": [
      [
        "C++",
        "C++/remove-nodes-from-linked-list.cpp"
      ],
      [
        "Python",
        "Python/remove-nodes-from-linked-list.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2488,
    "Title": "[Count Subarrays With Median K](https://leetcode.com/problems/count-subarrays-with-median-k/)",
    "Solution": [
      [
        "C++",
        "C++/count-subarrays-with-median-k.cpp"
      ],
      [
        "Python",
        "Python/count-subarrays-with-median-k.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2489,
    "Title": "[Number of Substrings With Fixed Ratio](https://leetcode.com/problems/number-of-substrings-with-fixed-ratio/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-substrings-with-fixed-ratio.cpp"
      ],
      [
        "Python",
        "Python/number-of-substrings-with-fixed-ratio.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2490,
    "Title": "[Circular Sentence](https://leetcode.com/problems/circular-sentence/)",
    "Solution": [
      [
        "C++",
        "C++/circular-sentence.cpp"
      ],
      [
        "Python",
        "Python/circular-sentence.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2491,
    "Title": "[Divide Players Into Teams of Equal Skill](https://leetcode.com/problems/divide-players-into-teams-of-equal-skill/)",
    "Solution": [
      [
        "C++",
        "C++/divide-players-into-teams-of-equal-skill.cpp"
      ],
      [
        "Python",
        "Python/divide-players-into-teams-of-equal-skill.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2492,
    "Title": "[Minimum Score of a Path Between Two Cities](https://leetcode.com/problems/minimum-score-of-a-path-between-two-cities/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-score-of-a-path-between-two-cities.cpp"
      ],
      [
        "Python",
        "Python/minimum-score-of-a-path-between-two-cities.py"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(n + m)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "BFS"
  },
  {
    "Index": 2493,
    "Title": "[Divide Nodes Into the Maximum Number of Groups](https://leetcode.com/problems/divide-nodes-into-the-maximum-number-of-groups/)",
    "Solution": [
      [
        "C++",
        "C++/divide-nodes-into-the-maximum-number-of-groups.cpp"
      ],
      [
        "Python",
        "Python/divide-nodes-into-the-maximum-number-of-groups.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Is Graph Bipartite?](https://leetcode.com/problems/is-graph-bipartite/)",
    "Note": "BFS, DFS"
  },
  {
    "Index": 2494,
    "Title": "[Merge Overlapping Events in the Same Hall](https://leetcode.com/problems/merge-overlapping-events-in-the-same-hall/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/merge-overlapping-events-in-the-same-hall.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2495,
    "Title": "[Number of Subarrays Having Even Product](https://leetcode.com/problems/number-of-subarrays-having-even-product/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-subarrays-having-even-product.cpp"
      ],
      [
        "Python",
        "Python/number-of-subarrays-having-even-product.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2496,
    "Title": "[Maximum Value of a String in an Array](https://leetcode.com/problems/maximum-value-of-a-string-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-value-of-a-string-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/maximum-value-of-a-string-in-an-array.py"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2497,
    "Title": "[Maximum Star Sum of a Graph](https://leetcode.com/problems/maximum-star-sum-of-a-graph/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-star-sum-of-a-graph.cpp"
      ],
      [
        "Python",
        "Python/maximum-star-sum-of-a-graph.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2498,
    "Title": "[Frog Jump II](https://leetcode.com/problems/frog-jump-ii/)",
    "Solution": [
      [
        "C++",
        "C++/frog-jump-ii.cpp"
      ],
      [
        "Python",
        "Python/frog-jump-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2499,
    "Title": "[Minimum Total Cost to Make Arrays Unequal](https://leetcode.com/problems/minimum-total-cost-to-make-arrays-unequal/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-total-cost-to-make-arrays-unequal.cpp"
      ],
      [
        "Python",
        "Python/minimum-total-cost-to-make-arrays-unequal.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2500,
    "Title": "[Delete Greatest Value in Each Row](https://leetcode.com/problems/delete-greatest-value-in-each-row/)",
    "Solution": [
      [
        "C++",
        "C++/delete-greatest-value-in-each-row.cpp"
      ],
      [
        "Python",
        "Python/delete-greatest-value-in-each-row.py"
      ]
    ],
    "Time": "_O(m * nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2501,
    "Title": "[Longest Square Streak in an Array](https://leetcode.com/problems/longest-square-streak-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/longest-square-streak-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/longest-square-streak-in-an-array.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2502,
    "Title": "[Design Memory Allocator](https://leetcode.com/problems/design-memory-allocator/)",
    "Solution": [
      [
        "C++",
        "C++/design-memory-allocator.cpp"
      ],
      [
        "Python",
        "Python/design-memory-allocator.py"
      ]
    ],
    "Time": "ctor: _O(1)_<br>allocate: _O(logn)_<br>free: _O(logn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2503,
    "Title": "[Maximum Number of Points From Grid Queries](https://leetcode.com/problems/maximum-number-of-points-from-grid-queries/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-points-from-grid-queries.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-points-from-grid-queries.py"
      ]
    ],
    "Time": "_O((m * n + q) * log(m * n))_",
    "Space": "_O(m * n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "BFS, Heap, Prefix Sum, Binary Search"
  },
  {
    "Index": 2504,
    "Title": "[Concatenate the Name and the Profession](https://leetcode.com/problems/concatenate-the-name-and-the-profession/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/concatenate-the-name-and-the-profession.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2505,
    "Title": "[Bitwise OR of All Subsequence Sums](https://leetcode.com/problems/bitwise-or-of-all-subsequence-sums/)",
    "Solution": [
      [
        "C++",
        "C++/bitwise-or-of-all-subsequence-sums.cpp"
      ],
      [
        "Python",
        "Python/bitwise-or-of-all-subsequence-sums.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2506,
    "Title": "[Count Pairs Of Similar Strings](https://leetcode.com/problems/count-pairs-of-similar-strings/)",
    "Solution": [
      [
        "C++",
        "C++/count-pairs-of-similar-strings.cpp"
      ],
      [
        "Python",
        "Python/count-pairs-of-similar-strings.py"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2507,
    "Title": "[Smallest Value After Replacing With Sum of Prime Factors](https://leetcode.com/problems/smallest-value-after-replacing-with-sum-of-prime-factors/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-value-after-replacing-with-sum-of-prime-factors.cpp"
      ],
      [
        "Python",
        "Python/smallest-value-after-replacing-with-sum-of-prime-factors.py"
      ]
    ],
    "Time": "_O(s * logn)_",
    "Space": "_O(max_n^0.5)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2508,
    "Title": "[Add Edges to Make Degrees of All Nodes Even](https://leetcode.com/problems/add-edges-to-make-degrees-of-all-nodes-even/)",
    "Solution": [
      [
        "C++",
        "C++/add-edges-to-make-degrees-of-all-nodes-even.cpp"
      ],
      [
        "Python",
        "Python/add-edges-to-make-degrees-of-all-nodes-even.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Graph"
  },
  {
    "Index": 2509,
    "Title": "[Cycle Length Queries in a Tree](https://leetcode.com/problems/cycle-length-queries-in-a-tree/)",
    "Solution": [
      [
        "C++",
        "C++/cycle-length-queries-in-a-tree.cpp"
      ],
      [
        "Python",
        "Python/cycle-length-queries-in-a-tree.py"
      ]
    ],
    "Time": "_O(q * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Tree, LCA"
  },
  {
    "Index": 2510,
    "Title": "[Check if There is a Path With Equal Number of 0's And 1's](https://leetcode.com/problems/check-if-there-is-a-path-with-equal-number-of-0s-and-1s/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-there-is-a-path-with-equal-number-of-0s-and-1s.cpp"
      ],
      [
        "Python",
        "Python/check-if-there-is-a-path-with-equal-number-of-0s-and-1s.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2511,
    "Title": "[Maximum Enemy Forts That Can Be Captured](https://leetcode.com/problems/maximum-enemy-forts-that-can-be-captured/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-enemy-forts-that-can-be-captured.cpp"
      ],
      [
        "Python",
        "Python/maximum-enemy-forts-that-can-be-captured.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Array, Two Pointers"
  },
  {
    "Index": 2512,
    "Title": "[Reward Top K Students](https://leetcode.com/problems/reward-top-k-students/)",
    "Solution": [
      [
        "C++",
        "C++/reward-top-k-students.cpp"
      ],
      [
        "Python",
        "Python/reward-top-k-students.py"
      ]
    ],
    "Time": "_O(pf * l + nf * l + n * l + klogk)_",
    "Space": "_O(pf * l + nf * l + n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2513,
    "Title": "[Minimize the Maximum of Two Arrays](https://leetcode.com/problems/minimize-the-maximum-of-two-arrays/)",
    "Solution": [
      [
        "C++",
        "C++/minimize-the-maximum-of-two-arrays.cpp"
      ],
      [
        "Python",
        "Python/minimize-the-maximum-of-two-arrays.py"
      ]
    ],
    "Time": "_O(log(min(d1, d2)))_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Number Theory, Binary Search"
  },
  {
    "Index": 2514,
    "Title": "[Count Anagrams](https://leetcode.com/problems/count-anagrams/)",
    "Solution": [
      [
        "C++",
        "C++/count-anagrams.cpp"
      ],
      [
        "Python",
        "Python/count-anagrams.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2515,
    "Title": "[Shortest Distance to Target String in a Circular Array](https://leetcode.com/problems/shortest-distance-to-target-string-in-a-circular-array/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-distance-to-target-string-in-a-circular-array.cpp"
      ],
      [
        "Python",
        "Python/shortest-distance-to-target-string-in-a-circular-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2516,
    "Title": "[Take K of Each Character From Left and Right](https://leetcode.com/problems/take-k-of-each-character-from-left-and-right/)",
    "Solution": [
      [
        "C++",
        "C++/take-k-of-each-character-from-left-and-right.cpp"
      ],
      [
        "Python",
        "Python/take-k-of-each-character-from-left-and-right.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Sliding Window, Two Pointers"
  },
  {
    "Index": 2517,
    "Title": "[Maximum Tastiness of Candy Basket](https://leetcode.com/problems/maximum-tastiness-of-candy-basket/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-tastiness-of-candy-basket.cpp"
      ],
      [
        "Python",
        "Python/maximum-tastiness-of-candy-basket.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Binary Search, Greedy"
  },
  {
    "Index": 2518,
    "Title": "[Number of Great Partitions](https://leetcode.com/problems/number-of-great-partitions/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-great-partitions.cpp"
      ],
      [
        "Python",
        "Python/number-of-great-partitions.py"
      ]
    ],
    "Time": "_O(n * k)_",
    "Space": "_O(k)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2519,
    "Title": "[Count the Number of K-Big Indices](https://leetcode.com/problems/count-the-number-of-k-big-indices/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-number-of-k-big-indices.cpp"
      ],
      [
        "Python",
        "Python/count-the-number-of-k-big-indices.py"
      ]
    ],
    "Time": "_O(nlogk)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Heap, Ordered Set, Sorted List"
  },
  {
    "Index": 2520,
    "Title": "[Count the Digits That Divide a Number](https://leetcode.com/problems/count-the-digits-that-divide-a-number/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-digits-that-divide-a-number.cpp"
      ],
      [
        "Python",
        "Python/count-the-digits-that-divide-a-number.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2521,
    "Title": "[Distinct Prime Factors of Product of Array](https://leetcode.com/problems/distinct-prime-factors-of-product-of-array/)",
    "Solution": [
      [
        "C++",
        "C++/distinct-prime-factors-of-product-of-array.cpp"
      ],
      [
        "Python",
        "Python/distinct-prime-factors-of-product-of-array.py"
      ]
    ],
    "Time": "precompute: _O(sqrt(MAX_N))_<br>runtime: _O(m + nlog(logn))_",
    "Space": "_O(sqrt(MAX_N))_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2522,
    "Title": "[Partition String Into Substrings With Values at Most K](https://leetcode.com/problems/minimum-total-cost-to-make-arrays-unequal/)",
    "Solution": [
      [
        "C++",
        "C++/partition-string-into-substrings-with-values-at-most-k.cpp"
      ],
      [
        "Python",
        "Python/partition-string-into-substrings-with-values-at-most-k.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2523,
    "Title": "[Closest Prime Numbers in Range](https://leetcode.com/problems/closest-prime-numbers-in-range/)",
    "Solution": [
      [
        "C++",
        "C++/closest-prime-numbers-in-range.cpp"
      ],
      [
        "Python",
        "Python/closest-prime-numbers-in-range.py"
      ]
    ],
    "Time": "precompute: _O(MAX_N * log(MAX_N))_<br>runtime: _O(log(MAX_N))_",
    "Space": "_O(MAX_N)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2524,
    "Title": "[Maximum Frequency Score of a Subarray](https://leetcode.com/problems/maximum-frequency-score-of-a-subarray/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-frequency-score-of-a-subarray.cpp"
      ],
      [
        "Python",
        "Python/maximum-frequency-score-of-a-subarray.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Sliding Window, Two Pointers, Freq Table, Hash Table"
  },
  {
    "Index": 2525,
    "Title": "[Categorize Box According to Criteria](https://leetcode.com/problems/categorize-box-according-to-criteria/)",
    "Solution": [
      [
        "C++",
        "C++/categorize-box-according-to-criteria.cpp"
      ],
      [
        "Python",
        "Python/categorize-box-according-to-criteria.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2526,
    "Title": "[Find Consecutive Integers from a Data Stream](https://leetcode.com/problems/find-consecutive-integers-from-a-data-stream/)",
    "Solution": [
      [
        "C++",
        "C++/find-consecutive-integers-from-a-data-stream.cpp"
      ],
      [
        "Python",
        "Python/find-consecutive-integers-from-a-data-stream.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2527,
    "Title": "[Find Xor-Beauty of Array](https://leetcode.com/problems/find-xor-beauty-of-array/)",
    "Solution": [
      [
        "C++",
        "C++/find-xor-beauty-of-array.cpp"
      ],
      [
        "Python",
        "Python/find-xor-beauty-of-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2528,
    "Title": "[Maximize the Minimum Powered City](https://leetcode.com/problems/maximize-the-minimum-powered-city/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-the-minimum-powered-city.cpp"
      ],
      [
        "Python",
        "Python/maximize-the-minimum-powered-city.py"
      ]
    ],
    "Time": "_O(nlogk)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Binary Search, Sliding Window, Greedy"
  },
  {
    "Index": 2529,
    "Title": "[Maximum Count of Positive Integer and Negative Integer](https://leetcode.com/problems/maximum-count-of-positive-integer-and-negative-integer/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-count-of-positive-integer-and-negative-integer.cpp"
      ],
      [
        "Python",
        "Python/maximum-count-of-positive-integer-and-negative-integer.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Binary Search"
  },
  {
    "Index": 2530,
    "Title": "[Maximal Score After Applying K Operations](https://leetcode.com/problems/maximal-score-after-applying-k-operations/)",
    "Solution": [
      [
        "C++",
        "C++/maximal-score-after-applying-k-operations.cpp"
      ],
      [
        "Python",
        "Python/maximal-score-after-applying-k-operations.py"
      ]
    ],
    "Time": "_O(n + klogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Heap, Simulation"
  },
  {
    "Index": 2531,
    "Title": "[Make Number of Distinct Characters Equal](https://leetcode.com/problems/make-number-of-distinct-characters-equal/)",
    "Solution": [
      [
        "C++",
        "C++/make-number-of-distinct-characters-equal.cpp"
      ],
      [
        "Python",
        "Python/make-number-of-distinct-characters-equal.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2532,
    "Title": "[Time to Cross a Bridge](https://leetcode.com/problems/time-to-cross-a-bridge/)",
    "Solution": [
      [
        "C++",
        "C++/time-to-cross-a-bridge.cpp"
      ],
      [
        "Python",
        "Python/time-to-cross-a-bridge.py"
      ]
    ],
    "Time": "_O(k + nlogk)_",
    "Space": "_O(k)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Heap, Simulation"
  },
  {
    "Index": 2533,
    "Title": "[Number of Good Binary Strings](https://leetcode.com/problems/number-of-good-binary-strings/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-good-binary-strings.cpp"
      ],
      [
        "Python",
        "Python/number-of-good-binary-strings.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(w)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2534,
    "Title": "[Time Taken to Cross the Door](https://leetcode.com/problems/time-taken-to-cross-the-door/)",
    "Solution": [
      [
        "C++",
        "C++/time-taken-to-cross-the-door.cpp"
      ],
      [
        "Python",
        "Python/time-taken-to-cross-the-door.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Queue, Simulation"
  },
  {
    "Index": 2535,
    "Title": "[Difference Between Element Sum and Digit Sum of an Array](https://leetcode.com/problems/difference-between-element-sum-and-digit-sum-of-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/difference-between-element-sum-and-digit-sum-of-an-array.cpp"
      ],
      [
        "Python",
        "Python/difference-between-element-sum-and-digit-sum-of-an-array.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2536,
    "Title": "[Increment Submatrices by One](https://leetcode.com/problems/increment-submatrices-by-one/)",
    "Solution": [
      [
        "C++",
        "C++/increment-submatrices-by-one.cpp"
      ],
      [
        "Python",
        "Python/increment-submatrices-by-one.py"
      ]
    ],
    "Time": "_O(q + n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2537,
    "Title": "[Count the Number of Good Subarrays](https://leetcode.com/problems/count-the-number-of-good-subarrays/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-number-of-good-subarrays.cpp"
      ],
      [
        "Python",
        "Python/count-the-number-of-good-subarrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Sliding Window, Two Pointers"
  },
  {
    "Index": 2538,
    "Title": "[Difference Between Maximum and Minimum Price Sum](https://leetcode.com/problems/difference-between-maximum-and-minimum-price-sum/)",
    "Solution": [
      [
        "C++",
        "C++/difference-between-maximum-and-minimum-price-sum.cpp"
      ],
      [
        "Python",
        "Python/difference-between-maximum-and-minimum-price-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2539,
    "Title": "[Count the Number of Good Subsequences](https://leetcode.com/problems/count-the-number-of-good-subsequences/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-number-of-good-subsequences.cpp"
      ],
      [
        "Python",
        "Python/count-the-number-of-good-subsequences.py"
      ]
    ],
    "Time": "_O(26 * n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2540,
    "Title": "[Minimum Common Value](https://leetcode.com/problems/minimum-common-value/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-common-value.cpp"
      ],
      [
        "Python",
        "Python/minimum-common-value.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Two Pointers"
  },
  {
    "Index": 2541,
    "Title": "[Minimum Operations to Make Array Equal II](https://leetcode.com/problems/minimum-operations-to-make-array-equal-ii/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-make-array-equal-ii.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-make-array-equal-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2542,
    "Title": "[Maximum Subsequence Score](https://leetcode.com/problems/maximum-subsequence-score/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-subsequence-score.cpp"
      ],
      [
        "Python",
        "Python/maximum-subsequence-score.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Maximum Performance of a Team](https://leetcode.com/problems/maximum-performance-of-a-team/)",
    "Note": "Greedy, Heap"
  },
  {
    "Index": 2543,
    "Title": "[Check if Point Is Reachable](https://leetcode.com/problems/check-if-point-is-reachable/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-point-is-reachable.cpp"
      ],
      [
        "Python",
        "Python/check-if-point-is-reachable.py"
      ]
    ],
    "Time": "_O(log(min(a, b)))_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2544,
    "Title": "[Alternating Digit Sum](https://leetcode.com/problems/alternating-digit-sum/)",
    "Solution": [
      [
        "C++",
        "C++/alternating-digit-sum.cpp"
      ],
      [
        "Python",
        "Python/alternating-digit-sum.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2545,
    "Title": "[Sort the Students by Their Kth Score](https://leetcode.com/problems/sort-the-students-by-their-kth-score/)",
    "Solution": [
      [
        "C++",
        "C++/sort-the-students-by-their-kth-score.cpp"
      ],
      [
        "Python",
        "Python/sort-the-students-by-their-kth-score.py"
      ]
    ],
    "Time": "_O(mlogm)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2546,
    "Title": "[Apply Bitwise Operations to Make Strings Equal](https://leetcode.com/problems/apply-bitwise-operations-to-make-strings-equal/)",
    "Solution": [
      [
        "C++",
        "C++/apply-bitwise-operations-to-make-strings-equal.cpp"
      ],
      [
        "Python",
        "Python/apply-bitwise-operations-to-make-strings-equal.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2547,
    "Title": "[Minimum Cost to Split an Array](https://leetcode.com/problems/minimum-cost-to-split-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-to-split-an-array.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-to-split-an-array.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2548,
    "Title": "[Maximum Price to Fill a Bag](https://leetcode.com/problems/maximum-price-to-fill-a-bag/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-price-to-fill-a-bag.cpp"
      ],
      [
        "Python",
        "Python/maximum-price-to-fill-a-bag.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Greedy, Sort"
  },
  {
    "Index": 2549,
    "Title": "[Count Distinct Numbers on Board](https://leetcode.com/problems/count-distinct-numbers-on-board/)",
    "Solution": [
      [
        "C++",
        "C++/count-distinct-numbers-on-board.cpp"
      ],
      [
        "Python",
        "Python/count-distinct-numbers-on-board.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2550,
    "Title": "[Count Collisions of Monkeys on a Polygon](https://leetcode.com/problems/count-collisions-of-monkeys-on-a-polygon/)",
    "Solution": [
      [
        "C++",
        "C++/count-collisions-of-monkeys-on-a-polygon.cpp"
      ],
      [
        "Python",
        "Python/count-collisions-of-monkeys-on-a-polygon.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2551,
    "Title": "[Put Marbles in Bags](https://leetcode.com/problems/put-marbles-in-bags/)",
    "Solution": [
      [
        "C++",
        "C++/put-marbles-in-bags.cpp"
      ],
      [
        "Python",
        "Python/put-marbles-in-bags.py"
      ]
    ],
    "Time": "_O(n)_ on average",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Greedy, Quick Select"
  },
  {
    "Index": 2552,
    "Title": "[Count Increasing Quadruplets](https://leetcode.com/problems/count-increasing-quadruplets/)",
    "Solution": [
      [
        "C++",
        "C++/count-increasing-quadruplets.cpp"
      ],
      [
        "Python",
        "Python/count-increasing-quadruplets.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "variant of [132 Pattern](https://leetcode.com/problems/132-pattern/)"
  },
  {
    "Index": 2553,
    "Title": "[Separate the Digits in an Array](https://leetcode.com/problems/separate-the-digits-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/separate-the-digits-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/separate-the-digits-in-an-array.py"
      ]
    ],
    "Time": "_O(n * logr)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2554,
    "Title": "[Maximum Number of Integers to Choose From a Range I](https://leetcode.com/problems/maximum-number-of-integers-to-choose-from-a-range-i/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-integers-to-choose-from-a-range-i.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-integers-to-choose-from-a-range-i.py"
      ]
    ],
    "Time": "_O(b)_",
    "Space": "_O(b)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Math, Binary Search, Prefix Sum, Greedy"
  },
  {
    "Index": 2555,
    "Title": "[Maximize Win From Two Segments](https://leetcode.com/problems/maximize-win-from-two-segments/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-win-from-two-segments.cpp"
      ],
      [
        "Python",
        "Python/maximize-win-from-two-segments.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Two Pointers, Sliding Window, DP"
  },
  {
    "Index": 2556,
    "Title": "[Disconnect Path in a Binary Matrix by at Most One Flip](https://leetcode.com/problems/disconnect-path-in-a-binary-matrix-by-at-most-one-flip/)",
    "Solution": [
      [
        "C++",
        "C++/disconnect-path-in-a-binary-matrix-by-at-most-one-flip.cpp"
      ],
      [
        "Python",
        "Python/disconnect-path-in-a-binary-matrix-by-at-most-one-flip.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2557,
    "Title": "[Maximum Number of Integers to Choose From a Range II](https://leetcode.com/problems/maximum-number-of-integers-to-choose-from-a-range-ii/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-integers-to-choose-from-a-range-ii.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-integers-to-choose-from-a-range-ii.py"
      ]
    ],
    "Time": "_O(b)_",
    "Space": "_O(b)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Math, Binary Search, Prefix Sum"
  },
  {
    "Index": 2558,
    "Title": "[Take Gifts From the Richest Pile](https://leetcode.com/problems/take-gifts-from-the-richest-pile/)",
    "Solution": [
      [
        "C++",
        "C++/take-gifts-from-the-richest-pile.cpp"
      ],
      [
        "Python",
        "Python/take-gifts-from-the-richest-pile.py"
      ]
    ],
    "Time": "_O(n + klogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Heap, Simulation"
  },
  {
    "Index": 2559,
    "Title": "[Count Vowel Strings in Ranges](https://leetcode.com/problems/count-vowel-strings-in-ranges/)",
    "Solution": [
      [
        "C++",
        "C++/count-vowel-strings-in-ranges.cpp"
      ],
      [
        "Python",
        "Python/count-vowel-strings-in-ranges.py"
      ]
    ],
    "Time": "_O(n + q)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2560,
    "Title": "[House Robber IV](https://leetcode.com/problems/house-robber-iv/)",
    "Solution": [
      [
        "C++",
        "C++/house-robber-iv.cpp"
      ],
      [
        "Python",
        "Python/house-robber-iv.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Binary Search, Greedy"
  },
  {
    "Index": 2561,
    "Title": "[Rearranging Fruits](https://leetcode.com/problems/rearranging-fruits/)",
    "Solution": [
      [
        "C++",
        "C++/rearranging-fruits.cpp"
      ],
      [
        "Python",
        "Python/rearranging-fruits.py"
      ]
    ],
    "Time": "_O(n)_ on average",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Freq Table, Greedy, Quick Select"
  },
  {
    "Index": 2562,
    "Title": "[Find the Array Concatenation Value](https://leetcode.com/problems/find-the-array-concatenation-value/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-array-concatenation-value.cpp"
      ],
      [
        "Python",
        "Python/find-the-array-concatenation-value.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2563,
    "Title": "[Count the Number of Fair Pairs](https://leetcode.com/problems/count-the-number-of-fair-pairs/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-number-of-fair-pairs.cpp"
      ],
      [
        "Python",
        "Python/count-the-number-of-fair-pairs.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2564,
    "Title": "[Substring XOR Queries](https://leetcode.com/problems/substring-xor-queries/)",
    "Solution": [
      [
        "C++",
        "C++/substring-xor-queries.cpp"
      ],
      [
        "Python",
        "Python/substring-xor-queries.py"
      ]
    ],
    "Time": "_O(n * logr + q)_",
    "Space": "_O(min(n * logr, r))_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2565,
    "Title": "[Subsequence With the Minimum Score](https://leetcode.com/problems/subsequence-with-the-minimum-score/)",
    "Solution": [
      [
        "C++",
        "C++/subsequence-with-the-minimum-score.cpp"
      ],
      [
        "Python",
        "Python/subsequence-with-the-minimum-score.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2566,
    "Title": "[Maximum Difference by Remapping a Digit](https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-difference-by-remapping-a-digit.cpp"
      ],
      [
        "Python",
        "Python/maximum-difference-by-remapping-a-digit.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Greedy"
  },
  {
    "Index": 2567,
    "Title": "[Minimum Score by Changing Two Elements](https://leetcode.com/problems/minimum-score-by-changing-two-elements/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-score-by-changing-two-elements.cpp"
      ],
      [
        "Python",
        "Python/minimum-score-by-changing-two-elements.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Sort, Greedy"
  },
  {
    "Index": 2568,
    "Title": "[Minimum Impossible OR](https://leetcode.com/problems/minimum-impossible-or/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-impossible-or.cpp"
      ],
      [
        "Python",
        "Python/minimum-impossible-or.py"
      ]
    ],
    "Time": "_O(logr)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2569,
    "Title": "[Handling Sum Queries After Update](https://leetcode.com/problems/handling-sum-queries-after-update/)",
    "Solution": [
      [
        "C++",
        "C++/handling-sum-queries-after-update.cpp"
      ],
      [
        "Python",
        "Python/handling-sum-queries-after-update.py"
      ]
    ],
    "Time": "_O(nlogn + m + qlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Segment Tree"
  },
  {
    "Index": 2570,
    "Title": "[Merge Two 2D Arrays by Summing Values](https://leetcode.com/problems/merge-two-2d-arrays-by-summing-values/)",
    "Solution": [
      [
        "C++",
        "C++/merge-two-2d-arrays-by-summing-values.cpp"
      ],
      [
        "Python",
        "Python/merge-two-2d-arrays-by-summing-values.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2571,
    "Title": "[Minimum Operations to Reduce an Integer to 0](https://leetcode.com/problems/minimum-operations-to-reduce-an-integer-to-0/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-reduce-an-integer-to-0.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-reduce-an-integer-to-0.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Greedy, Trick"
  },
  {
    "Index": 2572,
    "Title": "[Count the Number of Square-Free Subsets](https://leetcode.com/problems/count-the-number-of-square-free-subsets/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-number-of-square-free-subsets.cpp"
      ],
      [
        "Python",
        "Python/count-the-number-of-square-free-subsets.py"
      ]
    ],
    "Time": "_O(n + m * 2^p)_",
    "Space": "_O(m * 2^p)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2573,
    "Title": "[Find the String with LCP](https://leetcode.com/problems/find-the-string-with-lcp/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-string-with-lcp.cpp"
      ],
      [
        "Python",
        "Python/find-the-string-with-lcp.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Constructive Algorithms, Greedy, DP"
  },
  {
    "Index": 2574,
    "Title": "[Left and Right Sum Differences](https://leetcode.com/problems/left-and-right-sum-differences/)",
    "Solution": [
      [
        "C++",
        "C++/left-and-right-sum-differences.cpp"
      ],
      [
        "Python",
        "Python/left-and-right-sum-differences.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Prefix Sum"
  },
  {
    "Index": 2575,
    "Title": "[Find the Divisibility Array of a String](https://leetcode.com/problems/find-the-divisibility-array-of-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-divisibility-array-of-a-string.cpp"
      ],
      [
        "Python",
        "Python/find-the-divisibility-array-of-a-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Prefix Sum"
  },
  {
    "Index": 2576,
    "Title": "[Find the Maximum Number of Marked Indices](https://leetcode.com/problems/find-the-maximum-number-of-marked-indices/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-maximum-number-of-marked-indices.cpp"
      ],
      [
        "Python",
        "Python/find-the-maximum-number-of-marked-indices.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Sort, Greedy, Two Pointers"
  },
  {
    "Index": 2577,
    "Title": "[Minimum Time to Visit a Cell In a Grid](https://leetcode.com/problems/minimum-time-to-visit-a-cell-in-a-grid/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-time-to-visit-a-cell-in-a-grid.cpp"
      ],
      [
        "Python",
        "Python/minimum-time-to-visit-a-cell-in-a-grid.py"
      ]
    ],
    "Time": "_O(m * n * log\\(m * n\\))_",
    "Space": "_O(m * n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "`Dijkstra's Algorithm`"
  },
  {
    "Index": 2578,
    "Title": "[Split With Minimum Sum](https://leetcode.com/problems/split-with-minimum-sum/)",
    "Solution": [
      [
        "C++",
        "C++/split-with-minimum-sum.cpp"
      ],
      [
        "Python",
        "Python/split-with-minimum-sum.py"
      ]
    ],
    "Time": "_O(mlogm)_",
    "Space": "_O(m)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Sort, Greedy"
  },
  {
    "Index": 2579,
    "Title": "[Count Total Number of Colored Cells](https://leetcode.com/problems/count-total-number-of-colored-cells/)",
    "Solution": [
      [
        "C++",
        "C++/count-total-number-of-colored-cells.cpp"
      ],
      [
        "Python",
        "Python/count-total-number-of-colored-cells.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2580,
    "Title": "[Count Ways to Group Overlapping Ranges](https://leetcode.com/problems/count-ways-to-group-overlapping-ranges/)",
    "Solution": [
      [
        "C++",
        "C++/count-ways-to-group-overlapping-ranges.cpp"
      ],
      [
        "Python",
        "Python/count-ways-to-group-overlapping-ranges.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Sort, Array"
  },
  {
    "Index": 2581,
    "Title": "[Count Number of Possible Root Nodes](https://leetcode.com/problems/count-number-of-possible-root-nodes/)",
    "Solution": [
      [
        "C++",
        "C++/count-number-of-possible-root-nodes.cpp"
      ],
      [
        "Python",
        "Python/count-number-of-possible-root-nodes.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Tree, DFS"
  },
  {
    "Index": 2582,
    "Title": "[Pass the Pillow](https://leetcode.com/problems/pass-the-pillow/)",
    "Solution": [
      [
        "C++",
        "C++/pass-the-pillow.cpp"
      ],
      [
        "Python",
        "Python/pass-the-pillow.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2583,
    "Title": "[Kth Largest Sum in a Binary Tree](https://leetcode.com/problems/kth-largest-sum-in-a-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/kth-largest-sum-in-a-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/kth-largest-sum-in-a-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "BFS, Quick Select"
  },
  {
    "Index": 2584,
    "Title": "[Split the Array to Make Coprime Products](https://leetcode.com/problems/split-the-array-to-make-coprime-products/)",
    "Solution": [
      [
        "C++",
        "C++/split-the-array-to-make-coprime-products.cpp"
      ],
      [
        "Python",
        "Python/split-the-array-to-make-coprime-products.py"
      ]
    ],
    "Time": "_O(n * sqrt(r))_",
    "Space": "_O(sqrt(r))_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2585,
    "Title": "[Number of Ways to Earn Points](https://leetcode.com/problems/number-of-ways-to-earn-points/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-ways-to-earn-points.cpp"
      ],
      [
        "Python",
        "Python/number-of-ways-to-earn-points.py"
      ]
    ],
    "Time": "_O(n * t * c)_",
    "Space": "_O(t)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2586,
    "Title": "[Count the Number of Vowel Strings in Range](https://leetcode.com/problems/count-the-number-of-vowel-strings-in-range/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-number-of-vowel-strings-in-range.cpp"
      ],
      [
        "Python",
        "Python/count-the-number-of-vowel-strings-in-range.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "String"
  },
  {
    "Index": 2587,
    "Title": "[Rearrange Array to Maximize Prefix Score](https://leetcode.com/problems/rearrange-array-to-maximize-prefix-score/)",
    "Solution": [
      [
        "C++",
        "C++/rearrange-array-to-maximize-prefix-score.cpp"
      ],
      [
        "Python",
        "Python/rearrange-array-to-maximize-prefix-score.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Sort, Greedy"
  },
  {
    "Index": 2588,
    "Title": "[Count the Number of Beautiful Subarrays](https://leetcode.com/problems/count-the-number-of-beautiful-subarrays/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-number-of-beautiful-subarrays.cpp"
      ],
      [
        "Python",
        "Python/count-the-number-of-beautiful-subarrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2589,
    "Title": "[Minimum Time to Complete All Tasks](https://leetcode.com/problems/minimum-time-to-complete-all-tasks/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-time-to-complete-all-tasks.cpp"
      ],
      [
        "Python",
        "Python/minimum-time-to-complete-all-tasks.py"
      ]
    ],
    "Time": "_O(nlogn + n * r)_",
    "Space": "_O(r)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Sort, Greedy"
  },
  {
    "Index": 2590,
    "Title": "[Design a Todo List](https://leetcode.com/problems/design-a-todo-list/)",
    "Solution": [
      [
        "C++",
        "C++/design-a-todo-list.cpp"
      ],
      [
        "Python",
        "Python/design-a-todo-list.py"
      ]
    ],
    "Time": "ctor: _O(1)_<br>addTask: _O(l + logn)_<br>getAllTasks: _O(r)_<br>getTasksForTag: _O(r * c)_<br>completeTask: _O(l + logn)_",
    "Space": "_O(n * l)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2591,
    "Title": "[Distribute Money to Maximum Children](https://leetcode.com/problems/distribute-money-to-maximum-children/)",
    "Solution": [
      [
        "C++",
        "C++/distribute-money-to-maximum-children.cpp"
      ],
      [
        "Python",
        "Python/distribute-money-to-maximum-children.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Greedy, Math"
  },
  {
    "Index": 2592,
    "Title": "[Maximize Greatness of an Array](https://leetcode.com/problems/maximize-greatness-of-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-greatness-of-an-array.cpp"
      ],
      [
        "Python",
        "Python/maximize-greatness-of-an-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2593,
    "Title": "[Find Score of an Array After Marking All Elements](https://leetcode.com/problems/find-score-of-an-array-after-marking-all-elements/)",
    "Solution": [
      [
        "C++",
        "C++/find-score-of-an-array-after-marking-all-elements.cpp"
      ],
      [
        "Python",
        "Python/find-score-of-an-array-after-marking-all-elements.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Simulation, Sort, Hash Table"
  },
  {
    "Index": 2594,
    "Title": "[Minimum Time to Repair Cars](https://leetcode.com/problems/minimum-time-to-repair-cars/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-time-to-repair-cars.cpp"
      ],
      [
        "Python",
        "Python/minimum-time-to-repair-cars.py"
      ]
    ],
    "Time": "_O(mx * (logc + log(mn)))_",
    "Space": "_O(mx)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Freq Table, Binary Search, Heap, Simulation"
  },
  {
    "Index": 2595,
    "Title": "[Number of Even and Odd Bits](https://leetcode.com/problems/number-of-even-and-odd-bits/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-even-and-odd-bits.cpp"
      ],
      [
        "Python",
        "Python/number-of-even-and-odd-bits.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2596,
    "Title": "[Check Knight Tour Configuration](https://leetcode.com/problems/check-knight-tour-configuration/)",
    "Solution": [
      [
        "C++",
        "C++/check-knight-tour-configuration.cpp"
      ],
      [
        "Python",
        "Python/check-knight-tour-configuration.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Simulation, Hash Table"
  },
  {
    "Index": 2597,
    "Title": "[The Number of Beautiful Subsets](https://leetcode.com/problems/the-number-of-beautiful-subsets/)",
    "Solution": [
      [
        "C++",
        "C++/the-number-of-beautiful-subsets.cpp"
      ],
      [
        "Python",
        "Python/the-number-of-beautiful-subsets.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2598,
    "Title": "[Smallest Missing Non-negative Integer After Operations](https://leetcode.com/problems/smallest-missing-non-negative-integer-after-operations/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-missing-non-negative-integer-after-operations.cpp"
      ],
      [
        "Python",
        "Python/smallest-missing-non-negative-integer-after-operations.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2599,
    "Title": "[Make the Prefix Sum Non-negative](https://leetcode.com/problems/make-the-prefix-sum-non-negative/)",
    "Solution": [
      [
        "C++",
        "C++/make-the-prefix-sum-non-negative.cpp"
      ],
      [
        "Python",
        "Python/make-the-prefix-sum-non-negative.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Prefix Sum, Greedy, Heap"
  },
  {
    "Index": 2600,
    "Title": "[K Items With the Maximum Sum](https://leetcode.com/problems/k-items-with-the-maximum-sum/)",
    "Solution": [
      [
        "C++",
        "C++/k-items-with-the-maximum-sum.cpp"
      ],
      [
        "Python",
        "Python/k-items-with-the-maximum-sum.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Greedy, Math"
  },
  {
    "Index": 2601,
    "Title": "[Prime Subtraction Operation](https://leetcode.com/problems/prime-subtraction-operation/)",
    "Solution": [
      [
        "C++",
        "C++/prime-subtraction-operation.cpp"
      ],
      [
        "Python",
        "Python/prime-subtraction-operation.py"
      ]
    ],
    "Time": "_O(p + nlogp)_",
    "Space": "_O(p)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Number Theory, Greedy, Binary Search"
  },
  {
    "Index": 2602,
    "Title": "[Minimum Operations to Make All Array Elements Equal](https://leetcode.com/problems/minimum-operations-to-make-all-array-elements-equal/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-make-all-array-elements-equal.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-make-all-array-elements-equal.py"
      ]
    ],
    "Time": "_O(nlogn + qlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Sort, Binary Search, Prefix Sum"
  },
  {
    "Index": 2603,
    "Title": "[Collect Coins in a Tree](https://leetcode.com/problems/collect-coins-in-a-tree/)",
    "Solution": [
      [
        "C++",
        "C++/collect-coins-in-a-tree.cpp"
      ],
      [
        "Python",
        "Python/collect-coins-in-a-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Tree, BFS"
  },
  {
    "Index": 2604,
    "Title": "[Minimum Time to Eat All Grains](https://leetcode.com/problems/minimum-time-to-eat-all-grains/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-time-to-eat-all-grains.cpp"
      ],
      [
        "Python",
        "Python/minimum-time-to-eat-all-grains.py"
      ]
    ],
    "Time": "_O(mlogm + nlogn + (m + n) * logr)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Binary Search, Greedy"
  },
  {
    "Index": 2605,
    "Title": "[Form Smallest Number From Two Digit Arrays](https://leetcode.com/problems/form-smallest-number-from-two-digit-arrays/)",
    "Solution": [
      [
        "C++",
        "C++/form-smallest-number-from-two-digit-arrays.cpp"
      ],
      [
        "Python",
        "Python/form-smallest-number-from-two-digit-arrays.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2606,
    "Title": "[Find the Substring With Maximum Cost](https://leetcode.com/problems/find-the-substring-with-maximum-cost/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-substring-with-maximum-cost.cpp"
      ],
      [
        "Python",
        "Python/find-the-substring-with-maximum-cost.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2607,
    "Title": "[Make K-Subarray Sums Equal](https://leetcode.com/problems/make-k-subarray-sums-equal/)",
    "Solution": [
      [
        "C++",
        "C++/make-k-subarray-sums-equal.cpp"
      ],
      [
        "Python",
        "Python/make-k-subarray-sums-equal.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2608,
    "Title": "[Shortest Cycle in a Graph](https://leetcode.com/problems/shortest-cycle-in-a-graph/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-cycle-in-a-graph.cpp"
      ],
      [
        "Python",
        "Python/shortest-cycle-in-a-graph.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n + e)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Graph, BFS"
  },
  {
    "Index": 2609,
    "Title": "[Find the Longest Balanced Substring of a Binary String](https://leetcode.com/problems/find-the-longest-balanced-substring-of-a-binary-string/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-longest-balanced-substring-of-a-binary-string.cpp"
      ],
      [
        "Python",
        "Python/find-the-longest-balanced-substring-of-a-binary-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2610,
    "Title": "[Convert an Array Into a 2D Array With Conditions](https://leetcode.com/problems/convert-an-array-into-a-2d-array-with-conditions/)",
    "Solution": [
      [
        "C++",
        "C++/convert-an-array-into-a-2d-array-with-conditions.cpp"
      ],
      [
        "Python",
        "Python/convert-an-array-into-a-2d-array-with-conditions.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2611,
    "Title": "[Mice and Cheese](https://leetcode.com/problems/mice-and-cheese/)",
    "Solution": [
      [
        "C++",
        "C++/mice-and-cheese.cpp"
      ],
      [
        "Python",
        "Python/mice-and-cheese.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2612,
    "Title": "[Minimum Reverse Operations](https://leetcode.com/problems/minimum-reverse-operations/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-reverse-operations.cpp"
      ],
      [
        "Python",
        "Python/minimum-reverse-operations.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "BFS, Union Find, BST, Sorted List"
  },
  {
    "Index": 2613,
    "Title": "[Beautiful Pairs](https://leetcode.com/problems/beautiful-pairs/)",
    "Solution": [
      [
        "C++",
        "C++/beautiful-pairs.cpp"
      ],
      [
        "Python",
        "Python/beautiful-pairs.py"
      ]
    ],
    "Time": "_O(n)_ on average",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒, variant of [SPOJ - Closest Point Pair](https://www.spoj.com/problems/CLOPPAIR/)",
    "Note": "Random Algorithms, Divide and Conquer, Merge Sort, Segment Tree"
  },
  {
    "Index": 2614,
    "Title": "[Prime In Diagonal](https://leetcode.com/problems/prime-in-diagonal/)",
    "Solution": [
      [
        "C++",
        "C++/prime-in-diagonal.cpp"
      ],
      [
        "Python",
        "Python/prime-in-diagonal.py"
      ]
    ],
    "Time": "precompute: _O(MAX_N)_<br>runtime: _O(n)_",
    "Space": "_O(MAX_N)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Number Theory, `Linear Sieve of Eratosthenes`"
  },
  {
    "Index": 2615,
    "Title": "[Sum of Distances](https://leetcode.com/problems/sum-of-distances/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-distances.cpp"
      ],
      [
        "Python",
        "Python/sum-of-distances.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2616,
    "Title": "[Minimize the Maximum Difference of Pairs](https://leetcode.com/problems/minimize-the-maximum-difference-of-pairs/)",
    "Solution": [
      [
        "C++",
        "C++/minimize-the-maximum-difference-of-pairs.cpp"
      ],
      [
        "Python",
        "Python/minimize-the-maximum-difference-of-pairs.py"
      ]
    ],
    "Time": "_O(nlogn + nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Sort, Binary Search, Greedy"
  },
  {
    "Index": 2617,
    "Title": "[Minimum Number of Visited Cells in a Grid](https://leetcode.com/problems/minimum-number-of-visited-cells-in-a-grid/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-visited-cells-in-a-grid.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-visited-cells-in-a-grid.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Minimum Reverse Operations](https://leetcode.com/problems/minimum-reverse-operations/)",
    "Note": "BFS, Union Find, BST, Sorted List"
  },
  {
    "Index": 2618,
    "Title": "[Check if Object Instance of Class](https://leetcode.com/problems/check-if-object-instance-of-class/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/check-if-object-instance-of-class.ts"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2619,
    "Title": "[Array Prototype Last](https://leetcode.com/problems/array-prototype-last/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/array-prototype-last.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2620,
    "Title": "[Counter](https://leetcode.com/problems/counter/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/counter.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2621,
    "Title": "[Sleep](https://leetcode.com/problems/sleep/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/sleep.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Promise"
  },
  {
    "Index": 2622,
    "Title": "[Cache With Time Limit](https://leetcode.com/problems/cache-with-time-limit/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/cache-with-time-limit.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Hash Table"
  },
  {
    "Index": 2623,
    "Title": "[Memoize](https://leetcode.com/problems/memoize/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/memoize.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Hash Table"
  },
  {
    "Index": 2624,
    "Title": "[Snail traversal](https://leetcode.com/problems/snail-traversal/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/snail-traversal.ts"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2625,
    "Title": "[Flatten Deeply Nested Array](https://leetcode.com/problems/flatten-deeply-nested-array/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/flatten-deeply-nested-array.ts"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 2626,
    "Title": "[Array Reduce Transformation](https://leetcode.com/problems/array-reduce-transformation/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/array-reduce-transformation.ts"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2627,
    "Title": "[Debounce](https://leetcode.com/problems/debounce/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/debounce.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2628,
    "Title": "[JSON Deep Equal](https://leetcode.com/problems/json-deep-equal/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/json-deep-equal.ts"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 2629,
    "Title": "[Function Composition](https://leetcode.com/problems/function-composition/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/function-composition.ts"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2630,
    "Title": "[Memoize II](https://leetcode.com/problems/memoize-ii/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/memoize-ii.ts"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(t)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Trie"
  },
  {
    "Index": 2631,
    "Title": "[Group By](https://leetcode.com/problems/group-by/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/group-by.ts"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2632,
    "Title": "[Curry](https://leetcode.com/problems/curry/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/curry.ts"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2633,
    "Title": "[Convert Object to JSON String](https://leetcode.com/problems/convert-object-to-json-string/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/convert-object-to-json-string.ts"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 2634,
    "Title": "[Filter Elements from Array](https://leetcode.com/problems/filter-elements-from-array/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/filter-elements-from-array.ts"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2635,
    "Title": "[Apply Transform Over Each Element in Array](https://leetcode.com/problems/apply-transform-over-each-element-in-array/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/apply-transform-over-each-element-in-array.ts"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2636,
    "Title": "[Promise Pool](https://leetcode.com/problems/promise-pool/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/promise-pool.ts"
      ]
    ],
    "Time": "_O(c + n / c)_",
    "Space": "_O(c)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Promise"
  },
  {
    "Index": 2637,
    "Title": "[Promise Time Limit](https://leetcode.com/problems/promise-time-limit/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/promise-time-limit.ts"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Promise"
  },
  {
    "Index": 2638,
    "Title": "[Count the Number of K-Free Subsets](https://leetcode.com/problems/count-the-number-of-k-free-subsets/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-number-of-k-free-subsets.cpp"
      ],
      [
        "Python",
        "Python/count-the-number-of-k-free-subsets.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒, variant of [The Number of Beautiful Subsets](https://leetcode.com/problems/the-number-of-beautiful-subsets/)"
  },
  {
    "Index": 2639,
    "Title": "[Find the Width of Columns of a Grid](https://leetcode.com/problems/find-the-width-of-columns-of-a-grid/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-width-of-columns-of-a-grid.cpp"
      ],
      [
        "Python",
        "Python/find-the-width-of-columns-of-a-grid.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Array"
  },
  {
    "Index": 2640,
    "Title": "[Find the Score of All Prefixes of an Array](https://leetcode.com/problems/find-the-score-of-all-prefixes-of-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-score-of-all-prefixes-of-an-array.cpp"
      ],
      [
        "Python",
        "Python/find-the-score-of-all-prefixes-of-an-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Prefix Sum"
  },
  {
    "Index": 2641,
    "Title": "[Cousins in Binary Tree II](https://leetcode.com/problems/cousins-in-binary-tree-ii/)",
    "Solution": [
      [
        "C++",
        "C++/cousins-in-binary-tree-ii.cpp"
      ],
      [
        "Python",
        "Python/cousins-in-binary-tree-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(w)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "BFS"
  },
  {
    "Index": 2642,
    "Title": "[Design Graph With Shortest Path Calculator](https://leetcode.com/problems/design-graph-with-shortest-path-calculator/)",
    "Solution": [
      [
        "C++",
        "C++/design-graph-with-shortest-path-calculator.cpp"
      ],
      [
        "Python",
        "Python/design-graph-with-shortest-path-calculator.py"
      ]
    ],
    "Time": "ctor: _O(\\",
    "Space": "V\\",
    "Difficulty": "+ \\",
    "Tag": "E\\",
    "Note": ")_<br>addEdge: _O(1)_<br>shortestPath: _O(\\"
  },
  {
    "Index": 2643,
    "Title": "[Row With Maximum Ones](https://leetcode.com/problems/row-with-maximum-ones/)",
    "Solution": [
      [
        "C++",
        "C++/row-with-maximum-ones.cpp"
      ],
      [
        "Python",
        "Python/row-with-maximum-ones.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Array"
  },
  {
    "Index": 2644,
    "Title": "[Find the Maximum Divisibility Score](https://leetcode.com/problems/find-the-maximum-divisibility-score/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-maximum-divisibility-score.cpp"
      ],
      [
        "Python",
        "Python/find-the-maximum-divisibility-score.py"
      ]
    ],
    "Time": "_O(n * d)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Brute force"
  },
  {
    "Index": 2645,
    "Title": "[Minimum Additions to Make Valid String](https://leetcode.com/problems/minimum-additions-to-make-valid-string/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-additions-to-make-valid-string.cpp"
      ],
      [
        "Python",
        "Python/minimum-additions-to-make-valid-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2646,
    "Title": "[Minimize the Total Price of the Trips](https://leetcode.com/problems/minimize-the-total-price-of-the-trips/)",
    "Solution": [
      [
        "C++",
        "C++/minimize-the-total-price-of-the-trips.cpp"
      ],
      [
        "Python",
        "Python/minimize-the-total-price-of-the-trips.py"
      ]
    ],
    "Time": "_O(t * n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2647,
    "Title": "[Color the Triangle Red](https://leetcode.com/problems/color-the-triangle-red/)",
    "Solution": [
      [
        "C++",
        "C++/color-the-triangle-red.cpp"
      ],
      [
        "Python",
        "Python/color-the-triangle-red.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 2648,
    "Title": "[Generate Fibonacci Sequence](https://leetcode.com/problems/generate-fibonacci-sequence/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/generate-fibonacci-sequence.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "DP"
  },
  {
    "Index": 2649,
    "Title": "[Nested Array Generator](https://leetcode.com/problems/nested-array-generator/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/nested-array-generator.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(d)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 2650,
    "Title": "[Design Cancellable Function](https://leetcode.com/problems/design-cancellable-function/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/design-cancellable-function.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Promise"
  },
  {
    "Index": 2651,
    "Title": "[Calculate Delayed Arrival Time](https://leetcode.com/problems/calculate-delayed-arrival-time/)",
    "Solution": [
      [
        "C++",
        "C++/calculate-delayed-arrival-time.cpp"
      ],
      [
        "Python",
        "Python/calculate-delayed-arrival-time.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2652,
    "Title": "[Sum Multiples](https://leetcode.com/problems/sum-multiples/)",
    "Solution": [
      [
        "C++",
        "C++/sum-multiples.cpp"
      ],
      [
        "Python",
        "Python/sum-multiples.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2653,
    "Title": "[Sliding Subarray Beauty](https://leetcode.com/problems/sliding-subarray-beauty/)",
    "Solution": [
      [
        "C++",
        "C++/sliding-subarray-beauty.cpp"
      ],
      [
        "Python",
        "Python/sliding-subarray-beauty.py"
      ]
    ],
    "Time": "_O(nlogk)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2654,
    "Title": "[Minimum Number of Operations to Make All Array Elements Equal to 1](https://leetcode.com/problems/minimum-number-of-operations-to-make-all-array-elements-equal-to-1/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-operations-to-make-all-array-elements-equal-to-1.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-operations-to-make-all-array-elements-equal-to-1.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2655,
    "Title": "[Find Maximal Uncovered Ranges](https://leetcode.com/problems/find-maximal-uncovered-ranges/)",
    "Solution": [
      [
        "C++",
        "C++/find-maximal-uncovered-ranges.cpp"
      ],
      [
        "Python",
        "Python/find-maximal-uncovered-ranges.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒, variant of [Merge Intervals](https://leetcode.com/problems/merge-intervals/)"
  },
  {
    "Index": 2656,
    "Title": "[Maximum Sum With Exactly K Elements](https://leetcode.com/problems/maximum-sum-with-exactly-k-elements/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-sum-with-exactly-k-elements.cpp"
      ],
      [
        "Python",
        "Python/maximum-sum-with-exactly-k-elements.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2657,
    "Title": "[Find the Prefix Common Array of Two Arrays](https://leetcode.com/problems/find-the-prefix-common-array-of-two-arrays/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-prefix-common-array-of-two-arrays.cpp"
      ],
      [
        "Python",
        "Python/find-the-prefix-common-array-of-two-arrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2658,
    "Title": "[Maximum Number of Fish in a Grid](https://leetcode.com/problems/maximum-number-of-fish-in-a-grid/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-fish-in-a-grid.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-fish-in-a-grid.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "BFS, DFS"
  },
  {
    "Index": 2659,
    "Title": "[Make Array Empty](https://leetcode.com/problems/make-array-empty/)",
    "Solution": [
      [
        "C++",
        "C++/make-array-empty.cpp"
      ],
      [
        "Python",
        "Python/make-array-empty.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2660,
    "Title": "[Determine the Winner of a Bowling Game](https://leetcode.com/problems/determine-the-winner-of-a-bowling-game/)",
    "Solution": [
      [
        "C++",
        "C++/determine-the-winner-of-a-bowling-game.cpp"
      ],
      [
        "Python",
        "Python/determine-the-winner-of-a-bowling-game.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2661,
    "Title": "[First Completely Painted Row or Column](https://leetcode.com/problems/first-completely-painted-row-or-column/)",
    "Solution": [
      [
        "C++",
        "C++/first-completely-painted-row-or-column.cpp"
      ],
      [
        "Python",
        "Python/first-completely-painted-row-or-column.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2662,
    "Title": "[Minimum Cost of a Path With Special Roads](https://leetcode.com/problems/minimum-cost-of-a-path-with-special-roads/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-of-a-path-with-special-roads.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-of-a-path-with-special-roads.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Graph, `Dijkstra's Algorithm`"
  },
  {
    "Index": 2663,
    "Title": "[Lexicographically Smallest Beautiful String](https://leetcode.com/problems/lexicographically-smallest-beautiful-string/)",
    "Solution": [
      [
        "C++",
        "C++/lexicographically-smallest-beautiful-string.cpp"
      ],
      [
        "Python",
        "Python/lexicographically-smallest-beautiful-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2664,
    "Title": "[The Knight’s Tour](https://leetcode.com/problems/the-knights-tour/)",
    "Solution": [
      [
        "C++",
        "C++/the-knights-tour.cpp"
      ],
      [
        "Python",
        "Python/the-knights-tour.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2665,
    "Title": "[Counter II](https://leetcode.com/problems/counter-ii/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/counter-ii.ts"
      ]
    ],
    "Time": "ctor: _O(1)_<br>increment: _O(1)_<br>decrement: _O(1)_<br>reset: _O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2666,
    "Title": "[Allow One Function Call](https://leetcode.com/problems/allow-one-function-call/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/allow-one-function-call.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2667,
    "Title": "[Create Hello World Function](https://leetcode.com/problems/create-hello-world-function/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/create-hello-world-function.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2668,
    "Title": "[Find Latest Salaries](https://leetcode.com/problems/find-latest-salaries/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-latest-salaries.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2669,
    "Title": "[Count Artist Occurrences On Spotify Ranking List](https://leetcode.com/problems/count-artist-occurrences-on-spotify-ranking-list/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/count-artist-occurrences-on-spotify-ranking-list.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2670,
    "Title": "[Find the Distinct Difference Array](https://leetcode.com/problems/find-the-distinct-difference-array/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-distinct-difference-array.cpp"
      ],
      [
        "Python",
        "Python/find-the-distinct-difference-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2671,
    "Title": "[Frequency Tracker](https://leetcode.com/problems/frequency-tracker/)",
    "Solution": [
      [
        "C++",
        "C++/frequency-tracker.cpp"
      ],
      [
        "Python",
        "Python/frequency-tracker.py"
      ]
    ],
    "Time": "ctor: _O(1)_<br>add: _O(1)_<br>deleteOne: _O(1)_<br>hasFrequency: _O(1)_",
    "Space": "_O(min(n, r))_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2672,
    "Title": "[Number of Adjacent Elements With the Same Color](https://leetcode.com/problems/number-of-adjacent-elements-with-the-same-color/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-adjacent-elements-with-the-same-color.cpp"
      ],
      [
        "Python",
        "Python/number-of-adjacent-elements-with-the-same-color.py"
      ]
    ],
    "Time": "_O(n + q)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2673,
    "Title": "[Make Costs of Paths Equal in a Binary Tree](https://leetcode.com/problems/make-costs-of-paths-equal-in-a-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/make-costs-of-paths-equal-in-a-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/make-costs-of-paths-equal-in-a-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2674,
    "Title": "[Split a Circular Linked List](https://leetcode.com/problems/split-a-circular-linked-list/)",
    "Solution": [
      [
        "C++",
        "C++/split-a-circular-linked-list.cpp"
      ],
      [
        "Python",
        "Python/split-a-circular-linked-list.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2675,
    "Title": "[Array of Objects to Matrix](https://leetcode.com/problems/array-of-objects-to-matrix/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/array-of-objects-to-matrix.ts"
      ]
    ],
    "Time": "_O(l * mlogm + m * n)_",
    "Space": "_O(l * m + m * n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 2676,
    "Title": "[Throttle](https://leetcode.com/problems/throttle/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/throttle.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2677,
    "Title": "[Chunk Array](https://leetcode.com/problems/chunk-array/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/chunk-array.ts"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2678,
    "Title": "[Number of Senior Citizens](https://leetcode.com/problems/number-of-senior-citizens/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-senior-citizens.cpp"
      ],
      [
        "Python",
        "Python/number-of-senior-citizens.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "String"
  },
  {
    "Index": 2679,
    "Title": "[Sum in a Matrix](https://leetcode.com/problems/sum-in-a-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/sum-in-a-matrix.cpp"
      ],
      [
        "Python",
        "Python/sum-in-a-matrix.py"
      ]
    ],
    "Time": "_O(m * nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2680,
    "Title": "[Maximum OR](https://leetcode.com/problems/maximum-or/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-or.cpp"
      ],
      [
        "Python",
        "Python/maximum-or.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2681,
    "Title": "[Power of Heroes](https://leetcode.com/problems/power-of-heroes/)",
    "Solution": [
      [
        "C++",
        "C++/power-of-heroes.cpp"
      ],
      [
        "Python",
        "Python/power-of-heroes.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2682,
    "Title": "[Find the Losers of the Circular Game](https://leetcode.com/problems/find-the-losers-of-the-circular-game/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-losers-of-the-circular-game.cpp"
      ],
      [
        "Python",
        "Python/find-the-losers-of-the-circular-game.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2683,
    "Title": "[Neighboring Bitwise XOR](https://leetcode.com/problems/neighboring-bitwise-xor/)",
    "Solution": [
      [
        "C++",
        "C++/neighboring-bitwise-xor.cpp"
      ],
      [
        "Python",
        "Python/neighboring-bitwise-xor.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2684,
    "Title": "[Maximum Number of Moves in a Grid](https://leetcode.com/problems/maximum-number-of-moves-in-a-grid/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-moves-in-a-grid.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-moves-in-a-grid.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2685,
    "Title": "[Count the Number of Complete Components](https://leetcode.com/problems/count-the-number-of-complete-components/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-number-of-complete-components.cpp"
      ],
      [
        "Python",
        "Python/count-the-number-of-complete-components.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "BFS"
  },
  {
    "Index": 2686,
    "Title": "[Immediate Food Delivery III](https://leetcode.com/problems/immediate-food-delivery-iii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/immediate-food-delivery-iii.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2687,
    "Title": "[Bikes Last Time Used](https://leetcode.com/problems/bikes-last-time-used/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/bikes-last-time-used.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2688,
    "Title": "[Find Active Users](https://leetcode.com/problems/find-active-users/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-active-users.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2689,
    "Title": "[Extract Kth Character From The Rope Tree](https://leetcode.com/problems/extract-kth-character-from-the-rope-tree/)",
    "Solution": [
      [
        "C++",
        "C++/extract-kth-character-from-the-rope-tree.cpp"
      ],
      [
        "Python",
        "Python/extract-kth-character-from-the-rope-tree.py"
      ]
    ],
    "Time": "_O(h)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2690,
    "Title": "[Infinite Method Object](https://leetcode.com/problems/infinite-method-object/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/infinite-method-object.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Proxy"
  },
  {
    "Index": 2691,
    "Title": "[Immutability Helper](https://leetcode.com/problems/immutability-helper/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/immutability-helper.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Proxy"
  },
  {
    "Index": 2692,
    "Title": "[Make Object Immutable](https://leetcode.com/problems/make-object-immutable/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/make-object-immutable.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Proxy"
  },
  {
    "Index": 2693,
    "Title": "[Call Function with Custom Context](https://leetcode.com/problems/call-function-with-custom-context/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/call-function-with-custom-context.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Symbol"
  },
  {
    "Index": 2694,
    "Title": "[Event Emitter](https://leetcode.com/problems/event-emitter/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/event-emitter.ts"
      ]
    ],
    "Time": "subscribe: _O(1)_<br>unsubscribe: _O(1)_<br>emit: _O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Ordered Set"
  },
  {
    "Index": 2695,
    "Title": "[Array Wrapper](https://leetcode.com/problems/array-wrapper/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/array-wrapper.ts"
      ]
    ],
    "Time": "valueOf: _O(n)_<br>toString: _O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2696,
    "Title": "[Minimum String Length After Removing Substrings](https://leetcode.com/problems/minimum-string-length-after-removing-substrings/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-string-length-after-removing-substrings.cpp"
      ],
      [
        "Python",
        "Python/minimum-string-length-after-removing-substrings.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2697,
    "Title": "[Lexicographically Smallest Palindrome](https://leetcode.com/problems/lexicographically-smallest-palindrome/)",
    "Solution": [
      [
        "C++",
        "C++/lexicographically-smallest-palindrome.cpp"
      ],
      [
        "Python",
        "Python/lexicographically-smallest-palindrome.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2698,
    "Title": "[Find the Punishment Number of an Integer](https://leetcode.com/problems/find-the-punishment-number-of-an-integer/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-punishment-number-of-an-integer.cpp"
      ],
      [
        "Python",
        "Python/find-the-punishment-number-of-an-integer.py"
      ]
    ],
    "Time": "_O(n * (logn)^(2*logn))_",
    "Space": "_O(logn)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2699,
    "Title": "[Modify Graph Edge Weights](https://leetcode.com/problems/modify-graph-edge-weights/)",
    "Solution": [
      [
        "C++",
        "C++/modify-graph-edge-weights.cpp"
      ],
      [
        "Python",
        "Python/modify-graph-edge-weights.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "E\\",
    "Difficulty": "* log\\",
    "Tag": "V\\",
    "Note": ")_"
  },
  {
    "Index": 2700,
    "Title": "[Differences Between Two Objects](https://leetcode.com/problems/differences-between-two-objects/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/differences-between-two-objects.ts"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 2701,
    "Title": "[Consecutive Transactions with Increasing Amounts](https://leetcode.com/problems/consecutive-transactions-with-increasing-amounts/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/consecutive-transactions-with-increasing-amounts.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2702,
    "Title": "[Minimum Operations to Make Numbers Non-positive](https://leetcode.com/problems/minimum-operations-to-make-numbers-non-positive/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-make-numbers-non-positive.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-make-numbers-non-positive.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Binary Search, Greedy"
  },
  {
    "Index": 2703,
    "Title": "[Return Length of Arguments Passed](https://leetcode.com/problems/return-length-of-arguments-passed/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/return-length-of-arguments-passed.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2704,
    "Title": "[To Be Or Not To Be](https://leetcode.com/problems/to-be-or-not-to-be/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/to-be-or-not-to-be.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2705,
    "Title": "[Compact Object](https://leetcode.com/problems/compact-object/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/compact-object.ts"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 2706,
    "Title": "[Buy Two Chocolates](https://leetcode.com/problems/buy-two-chocolates/)",
    "Solution": [
      [
        "C++",
        "C++/buy-two-chocolates.cpp"
      ],
      [
        "Python",
        "Python/buy-two-chocolates.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2707,
    "Title": "[Extra Characters in a String](https://leetcode.com/problems/extra-characters-in-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/extra-characters-in-a-string.cpp"
      ],
      [
        "Python",
        "Python/extra-characters-in-a-string.py"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(n + t)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2708,
    "Title": "[Maximum Strength of a Group](https://leetcode.com/problems/maximum-strength-of-a-group/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-strength-of-a-group.cpp"
      ],
      [
        "Python",
        "Python/maximum-strength-of-a-group.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2709,
    "Title": "[Greatest Common Divisor Traversal](https://leetcode.com/problems/greatest-common-divisor-traversal/)",
    "Solution": [
      [
        "C++",
        "C++/greatest-common-divisor-traversal.cpp"
      ],
      [
        "Python",
        "Python/greatest-common-divisor-traversal.py"
      ]
    ],
    "Time": "precompute: _O(sqrt(r))_<br>runtime: _O(n * (logr + sqrt(r)/log(sqrt(r))))_",
    "Space": "_O(sqrt(r) + nlogr)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "`Linear Sieve of Eratosthenes`, Factorization, BFS"
  },
  {
    "Index": 2710,
    "Title": "[Remove Trailing Zeros From a String](https://leetcode.com/problems/remove-trailing-zeros-from-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/remove-trailing-zeros-from-a-string.cpp"
      ],
      [
        "Python",
        "Python/remove-trailing-zeros-from-a-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "String"
  },
  {
    "Index": 2711,
    "Title": "[Difference of Number of Distinct Values on Diagonals](https://leetcode.com/problems/difference-of-number-of-distinct-values-on-diagonals/)",
    "Solution": [
      [
        "C++",
        "C++/difference-of-number-of-distinct-values-on-diagonals.cpp"
      ],
      [
        "Python",
        "Python/difference-of-number-of-distinct-values-on-diagonals.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(min(m, n))_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2712,
    "Title": "[Minimum Cost to Make All Characters Equal](https://leetcode.com/problems/minimum-cost-to-make-all-characters-equal/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-to-make-all-characters-equal.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-to-make-all-characters-equal.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2713,
    "Title": "[Maximum Strictly Increasing Cells in a Matrix](https://leetcode.com/problems/maximum-strictly-increasing-cells-in-a-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-strictly-increasing-cells-in-a-matrix.cpp"
      ],
      [
        "Python",
        "Python/maximum-strictly-increasing-cells-in-a-matrix.py"
      ]
    ],
    "Time": "_O(m * n * log(m * n))_",
    "Space": "_O(m * n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2714,
    "Title": "[Find Shortest Path with K Hops](https://leetcode.com/problems/find-shortest-path-with-k-hops/)",
    "Solution": [
      [
        "C++",
        "C++/find-shortest-path-with-k-hops.cpp"
      ],
      [
        "Python",
        "Python/find-shortest-path-with-k-hops.py"
      ]
    ],
    "Time": "_O(n * k + (k * e) * log(n * k))_",
    "Space": "_O(n * k + e)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Graph, `Dijkstra's Algorithm`"
  },
  {
    "Index": 2715,
    "Title": "[Execute Cancellable Function With Delay](https://leetcode.com/problems/execute-cancellable-function-with-delay/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/execute-cancellable-function-with-delay.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2716,
    "Title": "[Minimize String Length](https://leetcode.com/problems/minimize-string-length/)",
    "Solution": [
      [
        "C++",
        "C++/minimize-string-length.cpp"
      ],
      [
        "Python",
        "Python/minimize-string-length.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2717,
    "Title": "[Semi-Ordered Permutation](https://leetcode.com/problems/semi-ordered-permutation/)",
    "Solution": [
      [
        "C++",
        "C++/semi-ordered-permutation.cpp"
      ],
      [
        "Python",
        "Python/semi-ordered-permutation.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2718,
    "Title": "[Sum of Matrix After Queries](https://leetcode.com/problems/sum-of-matrix-after-queries/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-matrix-after-queries.cpp"
      ],
      [
        "Python",
        "Python/sum-of-matrix-after-queries.py"
      ]
    ],
    "Time": "_O(n + q)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2719,
    "Title": "[Count of Integers](https://leetcode.com/problems/count-of-integers/)",
    "Solution": [
      [
        "C++",
        "C++/count-of-integers.cpp"
      ],
      [
        "Python",
        "Python/count-of-integers.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2720,
    "Title": "[Popularity Percentage](https://leetcode.com/problems/popularity-percentage/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/popularity-percentage.sql"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2721,
    "Title": "[Execute Asynchronous Functions in Parallel](https://leetcode.com/problems/execute-asynchronous-functions-in-parallel/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/execute-asynchronous-functions-in-parallel.ts"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Promise"
  },
  {
    "Index": 2722,
    "Title": "[Join Two Arrays by ID](https://leetcode.com/problems/join-two-arrays-by-id/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/join-two-arrays-by-id.ts"
      ]
    ],
    "Time": "_O(mlogm + nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Sort, Two Pointers"
  },
  {
    "Index": 2723,
    "Title": "[Add Two Promises](https://leetcode.com/problems/add-two-promises/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/add-two-promises.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Promise"
  },
  {
    "Index": 2724,
    "Title": "[Sort By](https://leetcode.com/problems/sort-by/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/sort-by.ts"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Sort"
  },
  {
    "Index": 2725,
    "Title": "[Interval Cancellation](https://leetcode.com/problems/interval-cancellation/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/interval-cancellation.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2726,
    "Title": "[Calculator with Method Chaining](https://leetcode.com/problems/calculator-with-method-chaining/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/calculator-with-method-chaining.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2727,
    "Title": "[Is Object Empty](https://leetcode.com/problems/is-object-empty/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/is-object-empty.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2728,
    "Title": "[Count Houses in a Circular Street](https://leetcode.com/problems/count-houses-in-a-circular-street/)",
    "Solution": [
      [
        "C++",
        "C++/count-houses-in-a-circular-street.cpp"
      ],
      [
        "Python",
        "Python/count-houses-in-a-circular-street.py"
      ]
    ],
    "Time": "_O(k)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒"
  },
  {
    "Index": 2729,
    "Title": "[Check if The Number is Fascinating](https://leetcode.com/problems/check-if-the-number-is-fascinating/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-the-number-is-fascinating.cpp"
      ],
      [
        "Python",
        "Python/check-if-the-number-is-fascinating.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "String, Bitmasks"
  },
  {
    "Index": 2730,
    "Title": "[Find the Longest Semi-Repetitive Substring](https://leetcode.com/problems/find-the-longest-semi-repetitive-substring/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-longest-semi-repetitive-substring.cpp"
      ],
      [
        "Python",
        "Python/find-the-longest-semi-repetitive-substring.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2731,
    "Title": "[Movement of Robots](https://leetcode.com/problems/movement-of-robots/)",
    "Solution": [
      [
        "C++",
        "C++/movement-of-robots.cpp"
      ],
      [
        "Python",
        "Python/movement-of-robots.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2732,
    "Title": "[Find a Good Subset of the Matrix](https://leetcode.com/problems/find-a-good-subset-of-the-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/find-a-good-subset-of-the-matrix.cpp"
      ],
      [
        "Python",
        "Python/find-a-good-subset-of-the-matrix.py"
      ]
    ],
    "Time": "_O(m * 2^n)_",
    "Space": "_O(2^n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2733,
    "Title": "[Neither Minimum nor Maximum](https://leetcode.com/problems/neither-minimum-nor-maximum/)",
    "Solution": [
      [
        "C++",
        "C++/neither-minimum-nor-maximum.cpp"
      ],
      [
        "Python",
        "Python/neither-minimum-nor-maximum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2734,
    "Title": "[Lexicographically Smallest String After Substring Operation](https://leetcode.com/problems/lexicographically-smallest-string-after-substring-operation/)",
    "Solution": [
      [
        "C++",
        "C++/lexicographically-smallest-string-after-substring-operation.cpp"
      ],
      [
        "Python",
        "Python/lexicographically-smallest-string-after-substring-operation.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2735,
    "Title": "[Collecting Chocolates](https://leetcode.com/problems/collecting-chocolates/)",
    "Solution": [
      [
        "C++",
        "C++/collecting-chocolates.cpp"
      ],
      [
        "Python",
        "Python/collecting-chocolates.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2736,
    "Title": "[Maximum Sum Queries](https://leetcode.com/problems/maximum-sum-queries/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-sum-queries.cpp"
      ],
      [
        "Python",
        "Python/maximum-sum-queries.py"
      ]
    ],
    "Time": "_O(nlogn + mlogm + mlogn)_",
    "Space": "_O(n + m)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2737,
    "Title": "[Find the Closest Marked Node](https://leetcode.com/problems/find-the-closest-marked-node/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-closest-marked-node.cpp"
      ],
      [
        "Python",
        "Python/find-the-closest-marked-node.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "E\\",
    "Difficulty": "* log\\",
    "Tag": "V\\",
    "Note": ")_"
  },
  {
    "Index": 2738,
    "Title": "[Count Occurrences in Text](https://leetcode.com/problems/count-occurrences-in-text/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/count-occurrences-in-text.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2739,
    "Title": "[Total Distance Traveled](https://leetcode.com/problems/total-distance-traveled/)",
    "Solution": [
      [
        "C++",
        "C++/total-distance-traveled.cpp"
      ],
      [
        "Python",
        "Python/total-distance-traveled.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2740,
    "Title": "[Find the Value of the Partition](https://leetcode.com/problems/find-the-value-of-the-partition/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-value-of-the-partition.cpp"
      ],
      [
        "Python",
        "Python/find-the-value-of-the-partition.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2741,
    "Title": "[Special Permutations](https://leetcode.com/problems/special-permutations/)",
    "Solution": [
      [
        "C++",
        "C++/special-permutations.cpp"
      ],
      [
        "Python",
        "Python/special-permutations.py"
      ]
    ],
    "Time": "_O(n^2 * 2^n)_",
    "Space": "_O(n * 2^n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2742,
    "Title": "[Painting the Walls](https://leetcode.com/problems/painting-the-walls/)",
    "Solution": [
      [
        "C++",
        "C++/painting-the-walls.cpp"
      ],
      [
        "Python",
        "Python/painting-the-walls.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2743,
    "Title": "[Count Substrings Without Repeating Character](https://leetcode.com/problems/count-substrings-without-repeating-character/)",
    "Solution": [
      [
        "C++",
        "C++/count-substrings-without-repeating-character.cpp"
      ],
      [
        "Python",
        "Python/count-substrings-without-repeating-character.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒, variant of [Longest Substring Without Repeating Characters](https://leetcode.com/problems/longest-substring-without-repeating-characters/)"
  },
  {
    "Index": 2744,
    "Title": "[Find Maximum Number of String Pairs](https://leetcode.com/problems/find-maximum-number-of-string-pairs/)",
    "Solution": [
      [
        "C++",
        "C++/find-maximum-number-of-string-pairs.cpp"
      ],
      [
        "Python",
        "Python/find-maximum-number-of-string-pairs.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2745,
    "Title": "[Construct the Longest New String](https://leetcode.com/problems/construct-the-longest-new-string/)",
    "Solution": [
      [
        "C++",
        "C++/construct-the-longest-new-string.cpp"
      ],
      [
        "Python",
        "Python/construct-the-longest-new-string.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2746,
    "Title": "[Decremental String Concatenation](https://leetcode.com/problems/decremental-string-concatenation/)",
    "Solution": [
      [
        "C++",
        "C++/decremental-string-concatenation.cpp"
      ],
      [
        "Python",
        "Python/decremental-string-concatenation.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2747,
    "Title": "[Count Zero Request Servers](https://leetcode.com/problems/count-zero-request-servers/)",
    "Solution": [
      [
        "C++",
        "C++/count-zero-request-servers.cpp"
      ],
      [
        "Python",
        "Python/count-zero-request-servers.py"
      ]
    ],
    "Time": "_O(nlogn + mlogm)_",
    "Space": "_O(n + m)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2748,
    "Title": "[Number of Beautiful Pairs](https://leetcode.com/problems/number-of-beautiful-pairs/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-beautiful-pairs.cpp"
      ],
      [
        "Python",
        "Python/number-of-beautiful-pairs.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2749,
    "Title": "[Minimum Operations to Make the Integer Zero](https://leetcode.com/problems/minimum-operations-to-make-the-integer-zero/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-make-the-integer-zero.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-make-the-integer-zero.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2750,
    "Title": "[Ways to Split Array Into Good Subarrays](https://leetcode.com/problems/ways-to-split-array-into-good-subarrays/)",
    "Solution": [
      [
        "C++",
        "C++/ways-to-split-array-into-good-subarrays.cpp"
      ],
      [
        "Python",
        "Python/ways-to-split-array-into-good-subarrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2751,
    "Title": "[Robot Collisions](https://leetcode.com/problems/robot-collisions/)",
    "Solution": [
      [
        "C++",
        "C++/robot-collisions.cpp"
      ],
      [
        "Python",
        "Python/robot-collisions.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2752,
    "Title": "[Customers with Maximum Number of Transactions on Consecutive Days](https://leetcode.com/problems/customers-with-maximum-number-of-transactions-on-consecutive-days/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/customers-with-maximum-number-of-transactions-on-consecutive-days.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2753,
    "Title": "[Count Houses in a Circular Street II](https://leetcode.com/problems/count-houses-in-a-circular-street-ii/)",
    "Solution": [
      [
        "C++",
        "C++/count-houses-in-a-circular-street-ii.cpp"
      ],
      [
        "Python",
        "Python/count-houses-in-a-circular-street-ii.py"
      ]
    ],
    "Time": "_O(k)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 2754,
    "Title": "[Bind Function to Context](https://leetcode.com/problems/bind-function-to-context/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/bind-function-to-context.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Symbol"
  },
  {
    "Index": 2755,
    "Title": "[Deep Merge of Two Objects](https://leetcode.com/problems/deep-merge-of-two-objects/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/deep-merge-of-two-objects.ts"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "DFS"
  },
  {
    "Index": 2756,
    "Title": "[Query Batching](https://leetcode.com/problems/query-batching/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/query-batching.ts"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2757,
    "Title": "[Generate Circular Array Values](https://leetcode.com/problems/generate-circular-array-values/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/generate-circular-array-values.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Generator"
  },
  {
    "Index": 2758,
    "Title": "[Next Day](https://leetcode.com/problems/next-day/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/next-day.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2759,
    "Title": "[Convert JSON String to Object](https://leetcode.com/problems/convert-json-string-to-object/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/convert-json-string-to-object.ts"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Stack"
  },
  {
    "Index": 2760,
    "Title": "[Longest Even Odd Subarray With Threshold](https://leetcode.com/problems/longest-even-odd-subarray-with-threshold/)",
    "Solution": [
      [
        "C++",
        "C++/longest-even-odd-subarray-with-threshold.cpp"
      ],
      [
        "Python",
        "Python/longest-even-odd-subarray-with-threshold.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2761,
    "Title": "[Prime Pairs With Target Sum](https://leetcode.com/problems/prime-pairs-with-target-sum/)",
    "Solution": [
      [
        "C++",
        "C++/prime-pairs-with-target-sum.cpp"
      ],
      [
        "Python",
        "Python/prime-pairs-with-target-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Number Theory, `Linear Sieve of Eratosthenes`"
  },
  {
    "Index": 2762,
    "Title": "[Continuous Subarrays](https://leetcode.com/problems/continuous-subarrays/)",
    "Solution": [
      [
        "C++",
        "C++/continuous-subarrays.cpp"
      ],
      [
        "Python",
        "Python/continuous-subarrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2763,
    "Title": "[Sum of Imbalance Numbers of All Subarrays](https://leetcode.com/problems/sum-of-imbalance-numbers-of-all-subarrays/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-imbalance-numbers-of-all-subarrays.cpp"
      ],
      [
        "Python",
        "Python/sum-of-imbalance-numbers-of-all-subarrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2764,
    "Title": "[is Array a Preorder of Some ‌Binary Tree](https://leetcode.com/problems/is-array-a-preorder-of-some-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/is-array-a-preorder-of-some-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/is-array-a-preorder-of-some-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2765,
    "Title": "[Longest Alternating Subarray](https://leetcode.com/problems/longest-alternating-subarray/)",
    "Solution": [
      [
        "C++",
        "C++/longest-alternating-subarray.cpp"
      ],
      [
        "Python",
        "Python/longest-alternating-subarray.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2766,
    "Title": "[Relocate Marbles](https://leetcode.com/problems/relocate-marbles/)",
    "Solution": [
      [
        "C++",
        "C++/relocate-marbles.cpp"
      ],
      [
        "Python",
        "Python/relocate-marbles.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2767,
    "Title": "[Partition String Into Minimum Beautiful Substrings](https://leetcode.com/problems/partition-string-into-minimum-beautiful-substrings/)",
    "Solution": [
      [
        "C++",
        "C++/partition-string-into-minimum-beautiful-substrings.cpp"
      ],
      [
        "Python",
        "Python/partition-string-into-minimum-beautiful-substrings.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2768,
    "Title": "[Number of Black Blocks](https://leetcode.com/problems/number-of-black-blocks/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-black-blocks.cpp"
      ],
      [
        "Python",
        "Python/number-of-black-blocks.py"
      ]
    ],
    "Time": "_O(c)_",
    "Space": "_O(c)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2769,
    "Title": "[Find the Maximum Achievable Number](https://leetcode.com/problems/find-the-maximum-achievable-number/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-maximum-achievable-number.cpp"
      ],
      [
        "Python",
        "Python/find-the-maximum-achievable-number.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2770,
    "Title": "[Maximum Number of Jumps to Reach the Last Index](https://leetcode.com/problems/maximum-number-of-jumps-to-reach-the-last-index/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-jumps-to-reach-the-last-index.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-jumps-to-reach-the-last-index.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2771,
    "Title": "[Longest Non-decreasing Subarray From Two Arrays](https://leetcode.com/problems/longest-non-decreasing-subarray-from-two-arrays/)",
    "Solution": [
      [
        "C++",
        "C++/longest-non-decreasing-subarray-from-two-arrays.cpp"
      ],
      [
        "Python",
        "Python/longest-non-decreasing-subarray-from-two-arrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2772,
    "Title": "[Apply Operations to Make All Array Elements Equal to Zero](https://leetcode.com/problems/apply-operations-to-make-all-array-elements-equal-to-zero/)",
    "Solution": [
      [
        "C++",
        "C++/apply-operations-to-make-all-array-elements-equal-to-zero.cpp"
      ],
      [
        "Python",
        "Python/apply-operations-to-make-all-array-elements-equal-to-zero.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2773,
    "Title": "[Height of Special Binary Tree](https://leetcode.com/problems/height-of-special-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/height-of-special-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/height-of-special-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Tree, DFS, BFS"
  },
  {
    "Index": 2774,
    "Title": "[Array Upper Bound](https://leetcode.com/problems/array-upper-bound/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/array-upper-bound.ts"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": "Binary Search"
  },
  {
    "Index": 2775,
    "Title": "[Undefined to Null](https://leetcode.com/problems/undefined-to-null/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/undefined-to-null.ts"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "DFS"
  },
  {
    "Index": 2776,
    "Title": "[Convert Callback Based Function to Promise Based Function](https://leetcode.com/problems/convert-callback-based-function-to-promise-based-function/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/convert-callback-based-function-to-promise-based-function.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Promise"
  },
  {
    "Index": 2777,
    "Title": "[Date Range Generator](https://leetcode.com/problems/date-range-generator/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/date-range-generator.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Generator"
  },
  {
    "Index": 2778,
    "Title": "[Sum of Squares of Special Elements](https://leetcode.com/problems/sum-of-squares-of-special-elements/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-squares-of-special-elements.cpp"
      ],
      [
        "Python",
        "Python/sum-of-squares-of-special-elements.py"
      ]
    ],
    "Time": "_O(sqrt(n))_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Number Theory"
  },
  {
    "Index": 2779,
    "Title": "[Maximum Beauty of an Array After Applying Operation](https://leetcode.com/problems/maximum-beauty-of-an-array-after-applying-operation/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-beauty-of-an-array-after-applying-operation.cpp"
      ],
      [
        "Python",
        "Python/maximum-beauty-of-an-array-after-applying-operation.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2780,
    "Title": "[Minimum Index of a Valid Split](https://leetcode.com/problems/minimum-index-of-a-valid-split/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-index-of-a-valid-split.cpp"
      ],
      [
        "Python",
        "Python/minimum-index-of-a-valid-split.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "`Boyer–Moore Majority Vote Algorithm`, Linear Search"
  },
  {
    "Index": 2781,
    "Title": "[Length of the Longest Valid Substring](https://leetcode.com/problems/length-of-the-longest-valid-substring/)",
    "Solution": [
      [
        "C++",
        "C++/length-of-the-longest-valid-substring.cpp"
      ],
      [
        "Python",
        "Python/length-of-the-longest-valid-substring.py"
      ]
    ],
    "Time": "_O((m + n) * l)_",
    "Space": "_O(t)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2782,
    "Title": "[Number of Unique Categories](https://leetcode.com/problems/number-of-unique-categories/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-unique-categories.cpp"
      ],
      [
        "Python",
        "Python/number-of-unique-categories.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2783,
    "Title": "[Flight Occupancy and Waitlist Analysis](https://leetcode.com/problems/flight-occupancy-and-waitlist-analysis/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/flight-occupancy-and-waitlist-analysis.sql"
      ]
    ],
    "Time": "_O(n * m + nlogn)_",
    "Space": "_O(n * m)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2784,
    "Title": "[Check if Array is Good](https://leetcode.com/problems/check-if-array-is-good/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-array-is-good.cpp"
      ],
      [
        "Python",
        "Python/check-if-array-is-good.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2785,
    "Title": "[Sort Vowels in a String](https://leetcode.com/problems/sort-vowels-in-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/sort-vowels-in-a-string.cpp"
      ],
      [
        "Python",
        "Python/sort-vowels-in-a-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2786,
    "Title": "[Visit Array Positions to Maximize Score](https://leetcode.com/problems/visit-array-positions-to-maximize-score/)",
    "Solution": [
      [
        "C++",
        "C++/visit-array-positions-to-maximize-score.cpp"
      ],
      [
        "Python",
        "Python/visit-array-positions-to-maximize-score.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2787,
    "Title": "[Ways to Express an Integer as Sum of Powers](https://leetcode.com/problems/ways-to-express-an-integer-as-sum-of-powers/)",
    "Solution": [
      [
        "C++",
        "C++/ways-to-express-an-integer-as-sum-of-powers.cpp"
      ],
      [
        "Python",
        "Python/ways-to-express-an-integer-as-sum-of-powers.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2788,
    "Title": "[Split Strings by Separator](https://leetcode.com/problems/split-strings-by-separator/)",
    "Solution": [
      [
        "C++",
        "C++/split-strings-by-separator.cpp"
      ],
      [
        "Python",
        "Python/split-strings-by-separator.py"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(l)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "String"
  },
  {
    "Index": 2789,
    "Title": "[Largest Element in an Array after Merge Operations](https://leetcode.com/problems/largest-element-in-an-array-after-merge-operations/)",
    "Solution": [
      [
        "C++",
        "C++/largest-element-in-an-array-after-merge-operations.cpp"
      ],
      [
        "Python",
        "Python/largest-element-in-an-array-after-merge-operations.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2790,
    "Title": "[Maximum Number of Groups With Increasing Length](https://leetcode.com/problems/maximum-number-of-groups-with-increasing-length/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-groups-with-increasing-length.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-groups-with-increasing-length.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2791,
    "Title": "[Count Paths That Can Form a Palindrome in a Tree](https://leetcode.com/problems/count-paths-that-can-form-a-palindrome-in-a-tree/)",
    "Solution": [
      [
        "C++",
        "C++/count-paths-that-can-form-a-palindrome-in-a-tree.cpp"
      ],
      [
        "Python",
        "Python/count-paths-that-can-form-a-palindrome-in-a-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Tree, DFS, Freq Table"
  },
  {
    "Index": 2792,
    "Title": "[Count Nodes That Are Great Enough](https://leetcode.com/problems/count-nodes-that-are-great-enough/)",
    "Solution": [
      [
        "C++",
        "C++/count-nodes-that-are-great-enough.cpp"
      ],
      [
        "Python",
        "Python/count-nodes-that-are-great-enough.py"
      ]
    ],
    "Time": "_O(k * h)_",
    "Space": "_O(k + h)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 2793,
    "Title": "[Status of Flight Tickets](https://leetcode.com/problems/status-of-flight-tickets/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/status-of-flight-tickets.sql"
      ]
    ],
    "Time": "_O(nlogn + m)_",
    "Space": "_O(n + m)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2794,
    "Title": "[Create Object from Two Arrays](https://leetcode.com/problems/create-object-from-two-arrays/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/create-object-from-two-arrays.ts"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2795,
    "Title": "[Parallel Execution of Promises for Individual Results Retrieval](https://leetcode.com/problems/parallel-execution-of-promises-for-individual-results-retrieval/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/parallel-execution-of-promises-for-individual-results-retrieval.ts"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Promise"
  },
  {
    "Index": 2796,
    "Title": "[Repeat String](https://leetcode.com/problems/repeat-string/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/repeat-string.ts"
      ]
    ],
    "Time": "_O(n * t)_",
    "Space": "_O(n * t)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": "String"
  },
  {
    "Index": 2797,
    "Title": "[Partial Function with Placeholders](https://leetcode.com/problems/partial-function-with-placeholders/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/partial-function-with-placeholders.ts"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2798,
    "Title": "[Number of Employees Who Met the Target](https://leetcode.com/problems/number-of-employees-who-met-the-target/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-employees-who-met-the-target.cpp"
      ],
      [
        "Python",
        "Python/number-of-employees-who-met-the-target.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2799,
    "Title": "[Count Complete Subarrays in an Array](https://leetcode.com/problems/count-complete-subarrays-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/count-complete-subarrays-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/count-complete-subarrays-in-an-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2800,
    "Title": "[Shortest String That Contains Three Strings](https://leetcode.com/problems/shortest-string-that-contains-three-strings/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-string-that-contains-three-strings.cpp"
      ],
      [
        "Python",
        "Python/shortest-string-that-contains-three-strings.py"
      ]
    ],
    "Time": "_O(l)_",
    "Space": "_O(l)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "String, Brute Force, Longest Prefix Suffix, `KMP Algorithm`"
  },
  {
    "Index": 2801,
    "Title": "[Count Stepping Numbers in Range](https://leetcode.com/problems/count-stepping-numbers-in-range/)",
    "Solution": [
      [
        "C++",
        "C++/count-stepping-numbers-in-range.cpp"
      ],
      [
        "Python",
        "Python/count-stepping-numbers-in-range.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2802,
    "Title": "[Find The K-th Lucky Number](https://leetcode.com/problems/find-the-k-th-lucky-number/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-k-th-lucky-number.cpp"
      ],
      [
        "Python",
        "Python/find-the-k-th-lucky-number.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Math, Bitmasks"
  },
  {
    "Index": 2803,
    "Title": "[Factorial Generator](https://leetcode.com/problems/factorial-generator/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/factorial-generator.ts"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": "Generator"
  },
  {
    "Index": 2804,
    "Title": "[Array Prototype ForEach](https://leetcode.com/problems/array-prototype-foreach/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/array-prototype-foreach.ts"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": "Symbol"
  },
  {
    "Index": 2805,
    "Title": "[Custom Interval](https://leetcode.com/problems/custom-interval/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/custom-interval.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2806,
    "Title": "[Account Balance After Rounded Purchase](https://leetcode.com/problems/account-balance-after-rounded-purchase/)",
    "Solution": [
      [
        "C++",
        "C++/account-balance-after-rounded-purchase.cpp"
      ],
      [
        "Python",
        "Python/account-balance-after-rounded-purchase.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Math"
  },
  {
    "Index": 2807,
    "Title": "[Insert Greatest Common Divisors in Linked List](https://leetcode.com/problems/insert-greatest-common-divisors-in-linked-list/)",
    "Solution": [
      [
        "C++",
        "C++/insert-greatest-common-divisors-in-linked-list.cpp"
      ],
      [
        "Python",
        "Python/insert-greatest-common-divisors-in-linked-list.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2808,
    "Title": "[Minimum Seconds to Equalize a Circular Array](https://leetcode.com/problems/minimum-seconds-to-equalize-a-circular-array/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-seconds-to-equalize-a-circular-array.cpp"
      ],
      [
        "Python",
        "Python/minimum-seconds-to-equalize-a-circular-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2809,
    "Title": "[Minimum Time to Make Array Sum At Most x](https://leetcode.com/problems/minimum-time-to-make-array-sum-at-most-x/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-time-to-make-array-sum-at-most-x.cpp"
      ],
      [
        "Python",
        "Python/minimum-time-to-make-array-sum-at-most-x.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2810,
    "Title": "[Faulty Keyboard](https://leetcode.com/problems/faulty-keyboard/)",
    "Solution": [
      [
        "C++",
        "C++/faulty-keyboard.cpp"
      ],
      [
        "Python",
        "Python/faulty-keyboard.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "String, Deque"
  },
  {
    "Index": 2811,
    "Title": "[Check if it is Possible to Split Array](https://leetcode.com/problems/check-if-it-is-possible-to-split-array/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-it-is-possible-to-split-array.cpp"
      ],
      [
        "Python",
        "Python/check-if-it-is-possible-to-split-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2812,
    "Title": "[Find the Safest Path in a Grid](https://leetcode.com/problems/find-the-safest-path-in-a-grid/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-safest-path-in-a-grid.cpp"
      ],
      [
        "Python",
        "Python/find-the-safest-path-in-a-grid.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "BFS, Bucket Sort, Union Find, `Dijkstra's Algorithm`, Binary Search"
  },
  {
    "Index": 2813,
    "Title": "[Maximum Elegance of a K-Length Subsequence](https://leetcode.com/problems/maximum-elegance-of-a-k-length-subsequence/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-elegance-of-a-k-length-subsequence.cpp"
      ],
      [
        "Python",
        "Python/maximum-elegance-of-a-k-length-subsequence.py"
      ]
    ],
    "Time": "_O(nlogk)_",
    "Space": "_O(k)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2814,
    "Title": "[Minimum Time Takes to Reach Destination Without Drowning](https://leetcode.com/problems/minimum-time-takes-to-reach-destination-without-drowning/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-time-takes-to-reach-destination-without-drowning.cpp"
      ],
      [
        "Python",
        "Python/minimum-time-takes-to-reach-destination-without-drowning.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Simulation, BFS"
  },
  {
    "Index": 2815,
    "Title": "[Max Pair Sum in an Array](https://leetcode.com/problems/max-pair-sum-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/max-pair-sum-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/max-pair-sum-in-an-array.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2816,
    "Title": "[Double a Number Represented as a Linked List](https://leetcode.com/problems/double-a-number-represented-as-a-linked-list/)",
    "Solution": [
      [
        "C++",
        "C++/double-a-number-represented-as-a-linked-list.cpp"
      ],
      [
        "Python",
        "Python/double-a-number-represented-as-a-linked-list.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2817,
    "Title": "[Minimum Absolute Difference Between Elements With Constraint](https://leetcode.com/problems/minimum-absolute-difference-between-elements-with-constraint/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-absolute-difference-between-elements-with-constraint.cpp"
      ],
      [
        "Python",
        "Python/minimum-absolute-difference-between-elements-with-constraint.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Sorted List, BST, Binary Search"
  },
  {
    "Index": 2818,
    "Title": "[Apply Operations to Maximize Score](https://leetcode.com/problems/apply-operations-to-maximize-score/)",
    "Solution": [
      [
        "C++",
        "C++/apply-operations-to-maximize-score.cpp"
      ],
      [
        "Python",
        "Python/apply-operations-to-maximize-score.py"
      ]
    ],
    "Time": "_O(sqrt(r) + n * (logr + sqrt(r)/log(sqrt(r))) + klogn)_",
    "Space": "_O(sqrt(r) + n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Number Theory, `Linear Sieve of Eratosthenes`, Mono Stack, Greedy, Sort, Heap"
  },
  {
    "Index": 2819,
    "Title": "[Minimum Relative Loss After Buying Chocolates](https://leetcode.com/problems/minimum-relative-loss-after-buying-chocolates/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-relative-loss-after-buying-chocolates.cpp"
      ],
      [
        "Python",
        "Python/minimum-relative-loss-after-buying-chocolates.py"
      ]
    ],
    "Time": "_O((n + q) * logn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 2820,
    "Title": "[Election Results](https://leetcode.com/problems/election-results/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/election-results.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2821,
    "Title": "[Delay the Resolution of Each Promise](https://leetcode.com/problems/delay-the-resolution-of-each-promise/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/delay-the-resolution-of-each-promise.ts"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": "Promise"
  },
  {
    "Index": 2822,
    "Title": "[Inversion of Object](https://leetcode.com/problems/inversion-of-object/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/inversion-of-object.ts"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2823,
    "Title": "[Deep Object Filter](https://leetcode.com/problems/deep-object-filter/)",
    "Solution": [
      [
        "TypeScript",
        "TypeScript/deep-object-filter.ts"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "DFS"
  },
  {
    "Index": 2824,
    "Title": "[Count Pairs Whose Sum is Less than Target](https://leetcode.com/problems/count-pairs-whose-sum-is-less-than-target/)",
    "Solution": [
      [
        "C++",
        "C++/count-pairs-whose-sum-is-less-than-target.cpp"
      ],
      [
        "Python",
        "Python/count-pairs-whose-sum-is-less-than-target.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2825,
    "Title": "[Make String a Subsequence Using Cyclic Increments](https://leetcode.com/problems/make-string-a-subsequence-using-cyclic-increments/)",
    "Solution": [
      [
        "C++",
        "C++/make-string-a-subsequence-using-cyclic-increments.cpp"
      ],
      [
        "Python",
        "Python/make-string-a-subsequence-using-cyclic-increments.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2826,
    "Title": "[Sorting Three Groups](https://leetcode.com/problems/sorting-three-groups/)",
    "Solution": [
      [
        "C++",
        "C++/sorting-three-groups.cpp"
      ],
      [
        "Python",
        "Python/sorting-three-groups.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2827,
    "Title": "[Number of Beautiful Integers in the Range](https://leetcode.com/problems/number-of-beautiful-integers-in-the-range/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-beautiful-integers-in-the-range.cpp"
      ],
      [
        "Python",
        "Python/number-of-beautiful-integers-in-the-range.py"
      ]
    ],
    "Time": "_O(n^2 * k)_",
    "Space": "_O(n * k)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2828,
    "Title": "[Check if a String Is an Acronym of Words](https://leetcode.com/problems/check-if-a-string-is-an-acronym-of-words/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-a-string-is-an-acronym-of-words.cpp"
      ],
      [
        "Python",
        "Python/check-if-a-string-is-an-acronym-of-words.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "String"
  },
  {
    "Index": 2829,
    "Title": "[Determine the Minimum Sum of a k-avoiding Array](https://leetcode.com/problems/determine-the-minimum-sum-of-a-k-avoiding-array/)",
    "Solution": [
      [
        "C++",
        "C++/determine-the-minimum-sum-of-a-k-avoiding-array.cpp"
      ],
      [
        "Python",
        "Python/determine-the-minimum-sum-of-a-k-avoiding-array.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2830,
    "Title": "[Maximize the Profit as the Salesman](https://leetcode.com/problems/maximize-the-profit-as-the-salesman/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-the-profit-as-the-salesman.cpp"
      ],
      [
        "Python",
        "Python/maximize-the-profit-as-the-salesman.py"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(n + m)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2831,
    "Title": "[Find the Longest Equal Subarray](https://leetcode.com/problems/find-the-longest-equal-subarray/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-longest-equal-subarray.cpp"
      ],
      [
        "Python",
        "Python/find-the-longest-equal-subarray.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2832,
    "Title": "[Maximal Range That Each Element Is Maximum in It](https://leetcode.com/problems/maximal-range-that-each-element-is-maximum-in-it/)",
    "Solution": [
      [
        "C++",
        "C++/maximal-range-that-each-element-is-maximum-in-it.cpp"
      ],
      [
        "Python",
        "Python/maximal-range-that-each-element-is-maximum-in-it.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2833,
    "Title": "[Furthest Point From Origin](https://leetcode.com/problems/furthest-point-from-origin/)",
    "Solution": [
      [
        "C++",
        "C++/furthest-point-from-origin.cpp"
      ],
      [
        "Python",
        "Python/furthest-point-from-origin.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Math"
  },
  {
    "Index": 2834,
    "Title": "[Find the Minimum Possible Sum of a Beautiful Array](https://leetcode.com/problems/find-the-minimum-possible-sum-of-a-beautiful-array/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-minimum-possible-sum-of-a-beautiful-array.cpp"
      ],
      [
        "Python",
        "Python/find-the-minimum-possible-sum-of-a-beautiful-array.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "[Determine the Minimum Sum of a k-avoiding Array](https://leetcode.com/problems/determine-the-minimum-sum-of-a-k-avoiding-array/)"
  },
  {
    "Index": 2835,
    "Title": "[Minimum Operations to Form Subsequence With Target Sum](https://leetcode.com/problems/minimum-operations-to-form-subsequence-with-target-sum/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-form-subsequence-with-target-sum.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-form-subsequence-with-target-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(logn)_",
    "Difficulty": "Hard",
    "Tag": "[Educational Codeforces Round #82 D](https://codeforces.com/problemset/problem/1303/D)"
  },
  {
    "Index": 2836,
    "Title": "[Maximize Value of Function in a Ball Passing Game](https://leetcode.com/problems/maximize-value-of-function-in-a-ball-passing-game/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-value-of-function-in-a-ball-passing-game.cpp"
      ],
      [
        "Python",
        "Python/maximize-value-of-function-in-a-ball-passing-game.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Graph, Prefix Sum, Two Pointers, Sliding Window, Binary Lifting"
  },
  {
    "Index": 2837,
    "Title": "[Total Traveled Distance](https://leetcode.com/problems/election-results/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/total-traveled-distance.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2838,
    "Title": "[Maximum Coins Heroes Can Collect](https://leetcode.com/problems/maximum-coins-heroes-can-collect/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-coins-heroes-can-collect.cpp"
      ],
      [
        "Python",
        "Python/maximum-coins-heroes-can-collect.py"
      ]
    ],
    "Time": "_O(nlogn + mlogm)_",
    "Space": "_O(n + m)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2839,
    "Title": "[Check if Strings Can be Made Equal With Operations I](https://leetcode.com/problems/check-if-strings-can-be-made-equal-with-operations-i/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-strings-can-be-made-equal-with-operations-i.cpp"
      ],
      [
        "Python",
        "Python/check-if-strings-can-be-made-equal-with-operations-i.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2840,
    "Title": "[Check if Strings Can be Made Equal With Operations II](https://leetcode.com/problems/check-if-strings-can-be-made-equal-with-operations-ii/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-strings-can-be-made-equal-with-operations-ii.cpp"
      ],
      [
        "Python",
        "Python/check-if-strings-can-be-made-equal-with-operations-ii.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2841,
    "Title": "[Maximum Sum of Almost Unique Subarray](https://leetcode.com/problems/maximum-sum-of-almost-unique-subarray/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-sum-of-almost-unique-subarray.cpp"
      ],
      [
        "Python",
        "Python/maximum-sum-of-almost-unique-subarray.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2842,
    "Title": "[Count K-Subsequences of a String With Maximum Beauty](https://leetcode.com/problems/count-k-subsequences-of-a-string-with-maximum-beauty/)",
    "Solution": [
      [
        "C++",
        "C++/count-k-subsequences-of-a-string-with-maximum-beauty.cpp"
      ],
      [
        "Python",
        "Python/count-k-subsequences-of-a-string-with-maximum-beauty.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2843,
    "Title": "[Count Symmetric Integers](https://leetcode.com/problems/count-symmetric-integers/)",
    "Solution": [
      [
        "C++",
        "C++/count-symmetric-integers.cpp"
      ],
      [
        "Python",
        "Python/count-symmetric-integers.py"
      ]
    ],
    "Time": "_O(rlogr)_",
    "Space": "_O(r)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "String, Brute Force, Memoization"
  },
  {
    "Index": 2844,
    "Title": "[Minimum Operations to Make a Special Number](https://leetcode.com/problems/minimum-operations-to-make-a-special-number/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-make-a-special-number.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-make-a-special-number.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2845,
    "Title": "[Count of Interesting Subarrays](https://leetcode.com/problems/count-of-interesting-subarrays/)",
    "Solution": [
      [
        "C++",
        "C++/count-of-interesting-subarrays.cpp"
      ],
      [
        "Python",
        "Python/count-of-interesting-subarrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(m)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2846,
    "Title": "[Minimum Edge Weight Equilibrium Queries in a Tree](https://leetcode.com/problems/minimum-edge-weight-equilibrium-queries-in-a-tree/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-edge-weight-equilibrium-queries-in-a-tree.cpp"
      ],
      [
        "Python",
        "Python/minimum-edge-weight-equilibrium-queries-in-a-tree.py"
      ]
    ],
    "Time": "_O(r * (n + q))_",
    "Space": "_O(r * n + q)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Tree, Binary Lifting, `Tarjan's Offline LCA Algorithm`"
  },
  {
    "Index": 2847,
    "Title": "[Smallest Number With Given Digit Product](https://leetcode.com/problems/smallest-number-with-given-digit-product/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-number-with-given-digit-product.cpp"
      ],
      [
        "Python",
        "Python/smallest-number-with-given-digit-product.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(logn)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2848,
    "Title": "[Points That Intersect With Cars](https://leetcode.com/problems/points-that-intersect-with-cars/)",
    "Solution": [
      [
        "C++",
        "C++/points-that-intersect-with-cars.cpp"
      ],
      [
        "Python",
        "Python/points-that-intersect-with-cars.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2849,
    "Title": "[Determine if a Cell Is Reachable at a Given Time](https://leetcode.com/problems/determine-if-a-cell-is-reachable-at-a-given-time/)",
    "Solution": [
      [
        "C++",
        "C++/determine-if-a-cell-is-reachable-at-a-given-time.cpp"
      ],
      [
        "Python",
        "Python/determine-if-a-cell-is-reachable-at-a-given-time.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2850,
    "Title": "[Minimum Moves to Spread Stones Over Grid](https://leetcode.com/problems/minimum-moves-to-spread-stones-over-grid/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-moves-to-spread-stones-over-grid.cpp"
      ],
      [
        "Python",
        "Python/minimum-moves-to-spread-stones-over-grid.py"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Backtracking, `Hungarian Weighted Bipartite Matching`"
  },
  {
    "Index": 2851,
    "Title": "[String Transformation](https://leetcode.com/problems/string-transformation/)",
    "Solution": [
      [
        "C++",
        "C++/string-transformation.cpp"
      ],
      [
        "Python",
        "Python/string-transformation.py"
      ]
    ],
    "Time": "_O(n + logk)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2852,
    "Title": "[Sum of Remoteness of All Cells](https://leetcode.com/problems/sum-of-remoteness-of-all-cells/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-remoteness-of-all-cells.cpp"
      ],
      [
        "Python",
        "Python/sum-of-remoteness-of-all-cells.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Flood Fill, BFS, Math"
  },
  {
    "Index": 2853,
    "Title": "[Highest Salaries Difference](https://leetcode.com/problems/highest-salaries-difference/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/highest-salaries-difference.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2854,
    "Title": "[Rolling Average Steps](https://leetcode.com/problems/rolling-average-steps/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/rolling-average-steps.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2855,
    "Title": "[Minimum Right Shifts to Sort the Array](https://leetcode.com/problems/minimum-right-shifts-to-sort-the-array/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-right-shifts-to-sort-the-array.cpp"
      ],
      [
        "Python",
        "Python/minimum-right-shifts-to-sort-the-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2856,
    "Title": "[Minimum Array Length After Pair Removals](https://leetcode.com/problems/minimum-array-length-after-pair-removals/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-array-length-after-pair-removals.cpp"
      ],
      [
        "Python",
        "Python/minimum-array-length-after-pair-removals.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2857,
    "Title": "[Count Pairs of Points With Distance k](https://leetcode.com/problems/count-pairs-of-points-with-distance-k/)",
    "Solution": [
      [
        "C++",
        "C++/count-pairs-of-points-with-distance-k.cpp"
      ],
      [
        "Python",
        "Python/count-pairs-of-points-with-distance-k.py"
      ]
    ],
    "Time": "_O(n * k)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2858,
    "Title": "[Minimum Edge Reversals So Every Node Is Reachable](https://leetcode.com/problems/minimum-edge-reversals-so-every-node-is-reachable/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-edge-reversals-so-every-node-is-reachable.cpp"
      ],
      [
        "Python",
        "Python/minimum-edge-reversals-so-every-node-is-reachable.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2859,
    "Title": "[Sum of Values at Indices With K Set Bits](https://leetcode.com/problems/sum-of-values-at-indices-with-k-set-bits/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-values-at-indices-with-k-set-bits.cpp"
      ],
      [
        "Python",
        "Python/sum-of-values-at-indices-with-k-set-bits.py"
      ]
    ],
    "Time": "_O(C(ceil(log2(n)), k))_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2860,
    "Title": "[Happy Students](https://leetcode.com/problems/happy-students/)",
    "Solution": [
      [
        "C++",
        "C++/happy-students.cpp"
      ],
      [
        "Python",
        "Python/happy-students.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "[Codeforces Round #844 B](https://codeforces.com/contest/1782/problem/B)"
  },
  {
    "Index": 2861,
    "Title": "[Maximum Number of Alloys](https://leetcode.com/problems/maximum-number-of-alloys/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-alloys.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-alloys.py"
      ]
    ],
    "Time": "_O(k * nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Binary Search, Sort, Math"
  },
  {
    "Index": 2862,
    "Title": "[Maximum Element-Sum of a Complete Subset of Indices](https://leetcode.com/problems/maximum-element-sum-of-a-complete-subset-of-indices/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-element-sum-of-a-complete-subset-of-indices.cpp"
      ],
      [
        "Python",
        "Python/maximum-element-sum-of-a-complete-subset-of-indices.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Number Theory, `Basel Problem`"
  },
  {
    "Index": 2863,
    "Title": "[Maximum Length of Semi-Decreasing Subarrays](https://leetcode.com/problems/maximum-length-of-semi-decreasing-subarrays/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-length-of-semi-decreasing-subarrays.cpp"
      ],
      [
        "Python",
        "Python/maximum-length-of-semi-decreasing-subarrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2864,
    "Title": "[Maximum Odd Binary Number](https://leetcode.com/problems/maximum-odd-binary-number/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-odd-binary-number.cpp"
      ],
      [
        "Python",
        "Python/maximum-odd-binary-number.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2865,
    "Title": "[Beautiful Towers I](https://leetcode.com/problems/beautiful-towers-i/)",
    "Solution": [
      [
        "C++",
        "C++/beautiful-towers-i.cpp"
      ],
      [
        "Python",
        "Python/beautiful-towers-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2866,
    "Title": "[Beautiful Towers II](https://leetcode.com/problems/beautiful-towers-ii/)",
    "Solution": [
      [
        "C++",
        "C++/beautiful-towers-ii.cpp"
      ],
      [
        "Python",
        "Python/beautiful-towers-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2867,
    "Title": "[Count Valid Paths in a Tree](https://leetcode.com/problems/count-valid-paths-in-a-tree/)",
    "Solution": [
      [
        "C++",
        "C++/count-valid-paths-in-a-tree.cpp"
      ],
      [
        "Python",
        "Python/count-valid-paths-in-a-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2868,
    "Title": "[The Wording Game](https://leetcode.com/problems/the-wording-game/)",
    "Solution": [
      [
        "C++",
        "C++/the-wording-game.cpp"
      ],
      [
        "Python",
        "Python/the-wording-game.py"
      ]
    ],
    "Time": "_O(m + n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 2869,
    "Title": "[Minimum Operations to Collect Elements](https://leetcode.com/problems/minimum-operations-to-collect-elements/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-collect-elements.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-collect-elements.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(k)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2870,
    "Title": "[Minimum Number of Operations to Make Array Empty](https://leetcode.com/problems/minimum-number-of-operations-to-make-array-empty/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-operations-to-make-array-empty.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-operations-to-make-array-empty.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2871,
    "Title": "[Split Array Into Maximum Number of Subarrays](https://leetcode.com/problems/split-array-into-maximum-number-of-subarrays/)",
    "Solution": [
      [
        "C++",
        "C++/split-array-into-maximum-number-of-subarrays.cpp"
      ],
      [
        "Python",
        "Python/split-array-into-maximum-number-of-subarrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2872,
    "Title": "[Maximum Number of K-Divisible Components](https://leetcode.com/problems/maximum-number-of-k-divisible-components/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-k-divisible-components.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-k-divisible-components.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Create Components With Same Value](https://leetcode.com/problems/create-components-with-same-value/)"
  },
  {
    "Index": 2873,
    "Title": "[Maximum Value of an Ordered Triplet I](https://leetcode.com/problems/maximum-value-of-an-ordered-triplet-i/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-value-of-an-ordered-triplet-i.cpp"
      ],
      [
        "Python",
        "Python/maximum-value-of-an-ordered-triplet-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2874,
    "Title": "[Maximum Value of an Ordered Triplet II](https://leetcode.com/problems/maximum-value-of-an-ordered-triplet-ii/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-value-of-an-ordered-triplet-ii.cpp"
      ],
      [
        "Python",
        "Python/maximum-value-of-an-ordered-triplet-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2875,
    "Title": "[Minimum Size Subarray in Infinite Array](https://leetcode.com/problems/minimum-size-subarray-in-infinite-array/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-size-subarray-in-infinite-array.cpp"
      ],
      [
        "Python",
        "Python/minimum-size-subarray-in-infinite-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2876,
    "Title": "[Count Visited Nodes in a Directed Graph](https://leetcode.com/problems/count-visited-nodes-in-a-directed-graph/)",
    "Solution": [
      [
        "C++",
        "C++/count-visited-nodes-in-a-directed-graph.cpp"
      ],
      [
        "Python",
        "Python/count-visited-nodes-in-a-directed-graph.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Graph, Hash Table, Stack"
  },
  {
    "Index": 2877,
    "Title": "[Create a DataFrame from List](https://leetcode.com/problems/create-a-dataframe-from-list/)",
    "Solution": [
      [
        "Python3",
        "Python3/create-a-dataframe-from-list.py3"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2878,
    "Title": "[Get the Size of a DataFrame](https://leetcode.com/problems/get-the-size-of-a-dataframe/)",
    "Solution": [
      [
        "Python3",
        "Python3/get-the-size-of-a-dataframe.py3"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2879,
    "Title": "[Display the First Three Rows](https://leetcode.com/problems/display-the-first-three-rows/)",
    "Solution": [
      [
        "Python3",
        "Python3/display-the-first-three-rows.py3"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2880,
    "Title": "[Select Data](https://leetcode.com/problems/select-data/)",
    "Solution": [
      [
        "Python3",
        "Python3/select-data.py3"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2881,
    "Title": "[Create a New Column](https://leetcode.com/problems/create-a-new-column/)",
    "Solution": [
      [
        "Python3",
        "Python3/create-a-new-column.py3"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2882,
    "Title": "[Drop Duplicate Rows](https://leetcode.com/problems/drop-duplicate-rows/)",
    "Solution": [
      [
        "Python3",
        "Python3/drop-duplicate-rows.py3"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2883,
    "Title": "[Drop Missing Data](https://leetcode.com/problems/drop-missing-data/)",
    "Solution": [
      [
        "Python3",
        "Python3/drop-missing-data.py3"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2884,
    "Title": "[Modify Columns](https://leetcode.com/problems/modify-columns/)",
    "Solution": [
      [
        "Python3",
        "Python3/modify-columns.py3"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2885,
    "Title": "[Rename Columns](https://leetcode.com/problems/rename-columns/)",
    "Solution": [
      [
        "Python3",
        "Python3/rename-columns.py3"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2886,
    "Title": "[Change Data Type](https://leetcode.com/problems/change-data-type/)",
    "Solution": [
      [
        "Python3",
        "Python3/change-data-type.py3"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2887,
    "Title": "[Fill Missing Data](https://leetcode.com/problems/fill-missing-data/)",
    "Solution": [
      [
        "Python3",
        "Python3/fill-missing-data.py3"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2888,
    "Title": "[Reshape Data: Concatenate](https://leetcode.com/problems/reshape-data-concatenate/)",
    "Solution": [
      [
        "Python3",
        "Python3/reshape-data-concatenate.py3"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2889,
    "Title": "[Reshape Data: Pivot](https://leetcode.com/problems/reshape-data-pivot/)",
    "Solution": [
      [
        "Python3",
        "Python3/reshape-data-pivot.py3"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2890,
    "Title": "[Reshape Data: Melt](https://leetcode.com/problems/reshape-data-melt/)",
    "Solution": [
      [
        "Python3",
        "Python3/reshape-data-melt.py3"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2891,
    "Title": "[Method Chaining](https://leetcode.com/problems/method-chaining/)",
    "Solution": [
      [
        "Python3",
        "Python3/method-chaining.py3"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 2892,
    "Title": "[Minimizing Array After Replacing Pairs With Their Product](https://leetcode.com/problems/minimizing-array-after-replacing-pairs-with-their-product/)",
    "Solution": [
      [
        "C++",
        "C++/minimizing-array-after-replacing-pairs-with-their-product.cpp"
      ],
      [
        "Python",
        "Python/minimizing-array-after-replacing-pairs-with-their-product.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2893,
    "Title": "[Calculate Orders Within Each Interval](https://leetcode.com/problems/calculate-orders-within-each-interval/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/calculate-orders-within-each-interval.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2894,
    "Title": "[Divisible and Non-divisible Sums Difference](https://leetcode.com/problems/divisible-and-non-divisible-sums-difference/)",
    "Solution": [
      [
        "C++",
        "C++/divisible-and-non-divisible-sums-difference.cpp"
      ],
      [
        "Python",
        "Python/divisible-and-non-divisible-sums-difference.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Math"
  },
  {
    "Index": 2895,
    "Title": "[Minimum Processing Time](https://leetcode.com/problems/minimum-processing-time/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-processing-time.cpp"
      ],
      [
        "Python",
        "Python/minimum-processing-time.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2896,
    "Title": "[Apply Operations to Make Two Strings Equal](https://leetcode.com/problems/apply-operations-to-make-two-strings-equal/)",
    "Solution": [
      [
        "C++",
        "C++/apply-operations-to-make-two-strings-equal.cpp"
      ],
      [
        "Python",
        "Python/apply-operations-to-make-two-strings-equal.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2897,
    "Title": "[Apply Operations on Array to Maximize Sum of Squares](https://leetcode.com/problems/apply-operations-on-array-to-maximize-sum-of-squares/)",
    "Solution": [
      [
        "C++",
        "C++/apply-operations-on-array-to-maximize-sum-of-squares.cpp"
      ],
      [
        "Python",
        "Python/apply-operations-on-array-to-maximize-sum-of-squares.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(logr)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2898,
    "Title": "[Maximum Linear Stock Score](https://leetcode.com/problems/maximum-linear-stock-score/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-linear-stock-score.cpp"
      ],
      [
        "Python",
        "Python/maximum-linear-stock-score.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Math, Freq Table"
  },
  {
    "Index": 2899,
    "Title": "[Last Visited Integers](https://leetcode.com/problems/last-visited-integers/)",
    "Solution": [
      [
        "C++",
        "C++/last-visited-integers.cpp"
      ],
      [
        "Python",
        "Python/last-visited-integers.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2900,
    "Title": "[Longest Unequal Adjacent Groups Subsequence I](https://leetcode.com/problems/longest-unequal-adjacent-groups-subsequence-i/)",
    "Solution": [
      [
        "C++",
        "C++/longest-unequal-adjacent-groups-subsequence-i.cpp"
      ],
      [
        "Python",
        "Python/longest-unequal-adjacent-groups-subsequence-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2901,
    "Title": "[Longest Unequal Adjacent Groups Subsequence II](https://leetcode.com/problems/longest-unequal-adjacent-groups-subsequence-ii/)",
    "Solution": [
      [
        "C++",
        "C++/longest-unequal-adjacent-groups-subsequence-ii.cpp"
      ],
      [
        "Python",
        "Python/longest-unequal-adjacent-groups-subsequence-ii.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2902,
    "Title": "[Count of Sub-Multisets With Bounded Sum](https://leetcode.com/problems/count-of-sub-multisets-with-bounded-sum/)",
    "Solution": [
      [
        "C++",
        "C++/count-of-sub-multisets-with-bounded-sum.cpp"
      ],
      [
        "Python",
        "Python/count-of-sub-multisets-with-bounded-sum.py"
      ]
    ],
    "Time": "_O(n + d * r)_",
    "Space": "_O(d + r)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2903,
    "Title": "[Find Indices With Index and Value Difference I](https://leetcode.com/problems/find-indices-with-index-and-value-difference-i/)",
    "Solution": [
      [
        "C++",
        "C++/find-indices-with-index-and-value-difference-i.cpp"
      ],
      [
        "Python",
        "Python/find-indices-with-index-and-value-difference-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2904,
    "Title": "[Shortest and Lexicographically Smallest Beautiful String](https://leetcode.com/problems/shortest-and-lexicographically-smallest-beautiful-string/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-and-lexicographically-smallest-beautiful-string.cpp"
      ],
      [
        "Python",
        "Python/shortest-and-lexicographically-smallest-beautiful-string.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2905,
    "Title": "[Find Indices With Index and Value Difference II](https://leetcode.com/problems/find-indices-with-index-and-value-difference-ii/)",
    "Solution": [
      [
        "C++",
        "C++/find-indices-with-index-and-value-difference-ii.cpp"
      ],
      [
        "Python",
        "Python/find-indices-with-index-and-value-difference-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2906,
    "Title": "[Construct Product Matrix](https://leetcode.com/problems/construct-product-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/construct-product-matrix.cpp"
      ],
      [
        "Python",
        "Python/construct-product-matrix.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2907,
    "Title": "[Maximum Profitable Triplets With Increasing Prices I](https://leetcode.com/problems/maximum-profitable-triplets-with-increasing-prices-i/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-profitable-triplets-with-increasing-prices-i.cpp"
      ],
      [
        "Python",
        "Python/maximum-profitable-triplets-with-increasing-prices-i.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Prefix Sum, Sorted List, BST, Binary Search, Mono Stack, BIT, Fenwick Tree, Segment Tree"
  },
  {
    "Index": 2908,
    "Title": "[Minimum Sum of Mountain Triplets I](https://leetcode.com/problems/minimum-sum-of-mountain-triplets-i/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-sum-of-mountain-triplets-i.cpp"
      ],
      [
        "Python",
        "Python/minimum-sum-of-mountain-triplets-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2909,
    "Title": "[Minimum Sum of Mountain Triplets II](https://leetcode.com/problems/minimum-sum-of-mountain-triplets-ii/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-sum-of-mountain-triplets-ii.cpp"
      ],
      [
        "Python",
        "Python/minimum-sum-of-mountain-triplets-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2910,
    "Title": "[Minimum Number of Groups to Create a Valid Assignment](https://leetcode.com/problems/minimum-number-of-groups-to-create-a-valid-assignment/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-groups-to-create-a-valid-assignment.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-groups-to-create-a-valid-assignment.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2911,
    "Title": "[Minimum Changes to Make K Semi-palindromes](https://leetcode.com/problems/minimum-changes-to-make-k-semi-palindromes/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-changes-to-make-k-semi-palindromes.cpp"
      ],
      [
        "Python",
        "Python/minimum-changes-to-make-k-semi-palindromes.py"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(n^2 * logn)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2912,
    "Title": "[Number of Ways to Reach Destination in the Grid](https://leetcode.com/problems/number-of-ways-to-reach-destination-in-the-grid/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-ways-to-reach-destination-in-the-grid.cpp"
      ],
      [
        "Python",
        "Python/number-of-ways-to-reach-destination-in-the-grid.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 2913,
    "Title": "[Subarrays Distinct Element Sum of Squares I](https://leetcode.com/problems/subarrays-distinct-element-sum-of-squares-i/)",
    "Solution": [
      [
        "C++",
        "C++/subarrays-distinct-element-sum-of-squares-i.cpp"
      ],
      [
        "Python",
        "Python/subarrays-distinct-element-sum-of-squares-i.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2914,
    "Title": "[Minimum Number of Changes to Make Binary String Beautiful](https://leetcode.com/problems/minimum-number-of-changes-to-make-binary-string-beautiful/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-changes-to-make-binary-string-beautiful.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-changes-to-make-binary-string-beautiful.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2915,
    "Title": "[Length of the Longest Subsequence That Sums to Target](https://leetcode.com/problems/length-of-the-longest-subsequence-that-sums-to-target/)",
    "Solution": [
      [
        "C++",
        "C++/length-of-the-longest-subsequence-that-sums-to-target.cpp"
      ],
      [
        "Python",
        "Python/length-of-the-longest-subsequence-that-sums-to-target.py"
      ]
    ],
    "Time": "_O(n * t)_",
    "Space": "_O(t)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2916,
    "Title": "[Subarrays Distinct Element Sum of Squares II](https://leetcode.com/problems/subarrays-distinct-element-sum-of-squares-ii/)",
    "Solution": [
      [
        "C++",
        "C++/subarrays-distinct-element-sum-of-squares-ii.cpp"
      ],
      [
        "Python",
        "Python/subarrays-distinct-element-sum-of-squares-ii.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2917,
    "Title": "[Find the K-or of an Array](https://leetcode.com/problems/find-the-k-or-of-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-k-or-of-an-array.cpp"
      ],
      [
        "Python",
        "Python/find-the-k-or-of-an-array.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2918,
    "Title": "[Minimum Equal Sum of Two Arrays After Replacing Zeros](https://leetcode.com/problems/minimum-equal-sum-of-two-arrays-after-replacing-zeros/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-equal-sum-of-two-arrays-after-replacing-zeros.cpp"
      ],
      [
        "Python",
        "Python/minimum-equal-sum-of-two-arrays-after-replacing-zeros.py"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2919,
    "Title": "[Minimum Increment Operations to Make Array Beautiful](https://leetcode.com/problems/minimum-increment-operations-to-make-array-beautiful/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-increment-operations-to-make-array-beautiful.cpp"
      ],
      [
        "Python",
        "Python/minimum-increment-operations-to-make-array-beautiful.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2920,
    "Title": "[Maximum Points After Collecting Coins From All Nodes](https://leetcode.com/problems/maximum-points-after-collecting-coins-from-all-nodes/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-points-after-collecting-coins-from-all-nodes.cpp"
      ],
      [
        "Python",
        "Python/maximum-points-after-collecting-coins-from-all-nodes.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2921,
    "Title": "[Maximum Profitable Triplets With Increasing Prices II](https://leetcode.com/problems/maximum-profitable-triplets-with-increasing-prices-ii/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-profitable-triplets-with-increasing-prices-ii.cpp"
      ],
      [
        "Python",
        "Python/maximum-profitable-triplets-with-increasing-prices-ii.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Prefix Sum, Sorted List, BST, Binary Search, Mono Stack, BIT, Fenwick Tree, Segment Tree"
  },
  {
    "Index": 2922,
    "Title": "[Market Analysis III](https://leetcode.com/problems/market-analysis-iii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/market-analysis-iii.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2923,
    "Title": "[Find Champion I](https://leetcode.com/problems/find-champion-i/)",
    "Solution": [
      [
        "C++",
        "C++/find-champion-i.cpp"
      ],
      [
        "Python",
        "Python/find-champion-i.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2924,
    "Title": "[Find Champion II](https://leetcode.com/problems/find-champion-ii/)",
    "Solution": [
      [
        "C++",
        "C++/find-champion-ii.cpp"
      ],
      [
        "Python",
        "Python/find-champion-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2925,
    "Title": "[Maximum Score After Applying Operations on a Tree](https://leetcode.com/problems/maximum-score-after-applying-operations-on-a-tree/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-score-after-applying-operations-on-a-tree.cpp"
      ],
      [
        "Python",
        "Python/maximum-score-after-applying-operations-on-a-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2926,
    "Title": "[Maximum Balanced Subsequence Sum](https://leetcode.com/problems/maximum-balanced-subsequence-sum/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-balanced-subsequence-sum.cpp"
      ],
      [
        "Python",
        "Python/maximum-balanced-subsequence-sum.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Sorted List, BST, Binary Search, Mono Stack, BIT, Fenwick Tree, Segment Tree"
  },
  {
    "Index": 2927,
    "Title": "[Distribute Candies Among Children III](https://leetcode.com/problems/distribute-candies-among-children-iii/)",
    "Solution": [
      [
        "C++",
        "C++/distribute-candies-among-children-iii.cpp"
      ],
      [
        "Python",
        "Python/distribute-candies-among-children-iii.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Stars and Bars, Combinatorics, Principle of Inclusion and Exclusion"
  },
  {
    "Index": 2928,
    "Title": "[Distribute Candies Among Children I](https://leetcode.com/problems/distribute-candies-among-children-i/)",
    "Solution": [
      [
        "C++",
        "C++/distribute-candies-among-children-i.cpp"
      ],
      [
        "Python",
        "Python/distribute-candies-among-children-i.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Stars and Bars, Combinatorics, Principle of Inclusion and Exclusion, Brute Force"
  },
  {
    "Index": 2929,
    "Title": "[Distribute Candies Among Children II](https://leetcode.com/problems/distribute-candies-among-children-ii/)",
    "Solution": [
      [
        "C++",
        "C++/distribute-candies-among-children-ii.cpp"
      ],
      [
        "Python",
        "Python/distribute-candies-among-children-ii.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Stars and Bars, Combinatorics, Principle of Inclusion and Exclusion, Brute Force"
  },
  {
    "Index": 2930,
    "Title": "[Number of Strings Which Can Be Rearranged to Contain Substring](https://leetcode.com/problems/number-of-strings-which-can-be-rearranged-to-contain-substring/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-strings-which-can-be-rearranged-to-contain-substring.cpp"
      ],
      [
        "Python",
        "Python/number-of-strings-which-can-be-rearranged-to-contain-substring.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Combinatorics, Principle of Inclusion and Exclusion, Bitmasks, DP"
  },
  {
    "Index": 2931,
    "Title": "[Minimum Equal Sum of Two Arrays After Replacing Zeros](https://leetcode.com/problems/maximum-spending-after-buying-items/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-spending-after-buying-items.cpp"
      ],
      [
        "Python",
        "Python/maximum-spending-after-buying-items.py"
      ]
    ],
    "Time": "_O(m * n * logm)_",
    "Space": "_O(m)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2932,
    "Title": "[Maximum Strong Pair XOR I](https://leetcode.com/problems/maximum-strong-pair-xor-i/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-strong-pair-xor-i.cpp"
      ],
      [
        "Python",
        "Python/maximum-strong-pair-xor-i.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(t)_",
    "Difficulty": "Easy",
    "Tag": "variant of [Maximum XOR of Two Numbers in an Array](https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/)"
  },
  {
    "Index": 2933,
    "Title": "[High-Access Employees](https://leetcode.com/problems/high-access-employees/)",
    "Solution": [
      [
        "C++",
        "C++/high-access-employees.cpp"
      ],
      [
        "Python",
        "Python/high-access-employees.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2934,
    "Title": "[Minimum Operations to Maximize Last Elements in Arrays](https://leetcode.com/problems/minimum-operations-to-maximize-last-elements-in-arrays/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-maximize-last-elements-in-arrays.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-maximize-last-elements-in-arrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2935,
    "Title": "[Maximum Strong Pair XOR II](https://leetcode.com/problems/maximum-strong-pair-xor-ii/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-strong-pair-xor-ii.cpp"
      ],
      [
        "Python",
        "Python/maximum-strong-pair-xor-ii.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(t)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Maximum XOR of Two Numbers in an Array](https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/)"
  },
  {
    "Index": 2936,
    "Title": "[Number of Equal Numbers Blocks](https://leetcode.com/problems/number-of-equal-numbers-blocks/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-equal-numbers-blocks.cpp"
      ],
      [
        "Python",
        "Python/number-of-equal-numbers-blocks.py"
      ]
    ],
    "Time": "_O(klogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Binary Search"
  },
  {
    "Index": 2937,
    "Title": "[Make Three Strings Equal](https://leetcode.com/problems/make-three-strings-equal/)",
    "Solution": [
      [
        "C++",
        "C++/make-three-strings-equal.cpp"
      ],
      [
        "Python",
        "Python/make-three-strings-equal.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "String"
  },
  {
    "Index": 2938,
    "Title": "[Separate Black and White Balls](https://leetcode.com/problems/separate-black-and-white-balls/)",
    "Solution": [
      [
        "C++",
        "C++/separate-black-and-white-balls.cpp"
      ],
      [
        "Python",
        "Python/separate-black-and-white-balls.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2939,
    "Title": "[Maximum Xor Product](https://leetcode.com/problems/maximum-xor-product/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-xor-product.cpp"
      ],
      [
        "Python",
        "Python/maximum-xor-product.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2940,
    "Title": "[Find Building Where Alice and Bob Can Meet](https://leetcode.com/problems/find-building-where-alice-and-bob-can-meet/)",
    "Solution": [
      [
        "C++",
        "C++/find-building-where-alice-and-bob-can-meet.cpp"
      ],
      [
        "Python",
        "Python/find-building-where-alice-and-bob-can-meet.py"
      ]
    ],
    "Time": "_O(n + qlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Heap,  Mono Stack, Binary Search, Online Solution, Segment Tree"
  },
  {
    "Index": 2941,
    "Title": "[Maximum GCD-Sum of a Subarray](https://leetcode.com/problems/maximum-gcd-sum-of-a-subarray/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-gcd-sum-of-a-subarray.cpp"
      ],
      [
        "Python",
        "Python/maximum-gcd-sum-of-a-subarray.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(logr)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 2942,
    "Title": "[Find Words Containing Character](https://leetcode.com/problems/find-words-containing-character/)",
    "Solution": [
      [
        "C++",
        "C++/find-words-containing-character.cpp"
      ],
      [
        "Python",
        "Python/find-words-containing-character.py"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "String"
  },
  {
    "Index": 2943,
    "Title": "[Maximize Area of Square Hole in Grid](https://leetcode.com/problems/maximize-area-of-square-hole-in-grid/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-area-of-square-hole-in-grid.cpp"
      ],
      [
        "Python",
        "Python/maximize-area-of-square-hole-in-grid.py"
      ]
    ],
    "Time": "_O(h + v)_",
    "Space": "_O(h + v)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2944,
    "Title": "[Minimum Number of Coins for Fruits](https://leetcode.com/problems/minimum-number-of-coins-for-fruits/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-coins-for-fruits.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-coins-for-fruits.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2945,
    "Title": "[Find Maximum Non-decreasing Array Length](https://leetcode.com/problems/find-maximum-non-decreasing-array-length/)",
    "Solution": [
      [
        "C++",
        "C++/find-maximum-non-decreasing-array-length.cpp"
      ],
      [
        "Python",
        "Python/find-maximum-non-decreasing-array-length.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2946,
    "Title": "[Matrix Similarity After Cyclic Shifts](https://leetcode.com/problems/matrix-similarity-after-cyclic-shifts/)",
    "Solution": [
      [
        "C++",
        "C++/matrix-similarity-after-cyclic-shifts.cpp"
      ],
      [
        "Python",
        "Python/matrix-similarity-after-cyclic-shifts.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2947,
    "Title": "[Count Beautiful Substrings I](https://leetcode.com/problems/count-beautiful-substrings-i/)",
    "Solution": [
      [
        "C++",
        "C++/count-beautiful-substrings-i.cpp"
      ],
      [
        "Python",
        "Python/count-beautiful-substrings-i.py"
      ]
    ],
    "Time": "_O(n + sqrt(k))_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2948,
    "Title": "[Make Lexicographically Smallest Array by Swapping Elements](https://leetcode.com/problems/make-lexicographically-smallest-array-by-swapping-elements/)",
    "Solution": [
      [
        "C++",
        "C++/make-lexicographically-smallest-array-by-swapping-elements.cpp"
      ],
      [
        "Python",
        "Python/make-lexicographically-smallest-array-by-swapping-elements.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2949,
    "Title": "[Count Beautiful Substrings II](https://leetcode.com/problems/count-beautiful-substrings-ii/)",
    "Solution": [
      [
        "C++",
        "C++/count-beautiful-substrings-ii.cpp"
      ],
      [
        "Python",
        "Python/count-beautiful-substrings-ii.py"
      ]
    ],
    "Time": "_O(n + sqrt(k))_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2950,
    "Title": "[Number of Divisible Substrings](https://leetcode.com/problems/number-of-divisible-substrings/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-divisible-substrings.cpp"
      ],
      [
        "Python",
        "Python/number-of-divisible-substrings.py"
      ]
    ],
    "Time": "_O(d * n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2951,
    "Title": "[Find the Peaks](https://leetcode.com/problems/find-the-peaks/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-peaks.cpp"
      ],
      [
        "Python",
        "Python/find-the-peaks.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2952,
    "Title": "[Minimum Number of Coins to be Added](https://leetcode.com/problems/minimum-number-of-coins-to-be-added/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-coins-to-be-added.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-coins-to-be-added.py"
      ]
    ],
    "Time": "_O(nlogn + logt)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Patching Array](https://leetcode.com/problems/patching-array/)"
  },
  {
    "Index": 2953,
    "Title": "[Count Complete Substrings](https://leetcode.com/problems/count-complete-substrings/)",
    "Solution": [
      [
        "C++",
        "C++/count-complete-substrings.cpp"
      ],
      [
        "Python",
        "Python/count-complete-substrings.py"
      ]
    ],
    "Time": "_O(26 + d * n)_",
    "Space": "_O(26)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2954,
    "Title": "[Count the Number of Infection Sequences](https://leetcode.com/problems/count-the-number-of-infection-sequences/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-number-of-infection-sequences.cpp"
      ],
      [
        "Python",
        "Python/count-the-number-of-infection-sequences.py"
      ]
    ],
    "Time": "precompute: _O(max_n)_<br>runtime: _O(s + logn)_",
    "Space": "_O(max_n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Combinatorics"
  },
  {
    "Index": 2955,
    "Title": "[Number of Same-End Substrings](https://leetcode.com/problems/number-of-same-end-substrings/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-same-end-substrings.cpp"
      ],
      [
        "Python",
        "Python/number-of-same-end-substrings.py"
      ]
    ],
    "Time": "_O(26 * (n + q))_",
    "Space": "_O(26 * n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2956,
    "Title": "[Find Common Elements Between Two Arrays](https://leetcode.com/problems/find-common-elements-between-two-arrays/)",
    "Solution": [
      [
        "C++",
        "C++/find-common-elements-between-two-arrays.cpp"
      ],
      [
        "Python",
        "Python/find-common-elements-between-two-arrays.py"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(n + m)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2957,
    "Title": "[Remove Adjacent Almost-Equal Characters](https://leetcode.com/problems/remove-adjacent-almost-equal-characters/)",
    "Solution": [
      [
        "C++",
        "C++/remove-adjacent-almost-equal-characters.cpp"
      ],
      [
        "Python",
        "Python/remove-adjacent-almost-equal-characters.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2958,
    "Title": "[Length of Longest Subarray With at Most K Frequency](https://leetcode.com/problems/length-of-longest-subarray-with-at-most-k-frequency/)",
    "Solution": [
      [
        "C++",
        "C++/length-of-longest-subarray-with-at-most-k-frequency.cpp"
      ],
      [
        "Python",
        "Python/length-of-longest-subarray-with-at-most-k-frequency.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2959,
    "Title": "[Number of Possible Sets of Closing Branches](https://leetcode.com/problems/number-of-possible-sets-of-closing-branches/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-possible-sets-of-closing-branches.cpp"
      ],
      [
        "Python",
        "Python/number-of-possible-sets-of-closing-branches.py"
      ]
    ],
    "Time": "_O(r + 2^n * n^2)_",
    "Space": "_O(n^3)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2960,
    "Title": "[Count Tested Devices After Test Operations](https://leetcode.com/problems/count-tested-devices-after-test-operations/)",
    "Solution": [
      [
        "C++",
        "C++/count-tested-devices-after-test-operations.cpp"
      ],
      [
        "Python",
        "Python/count-tested-devices-after-test-operations.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2961,
    "Title": "[Double Modular Exponentiation](https://leetcode.com/problems/double-modular-exponentiation/)",
    "Solution": [
      [
        "C++",
        "C++/double-modular-exponentiation.cpp"
      ],
      [
        "Python",
        "Python/double-modular-exponentiation.py"
      ]
    ],
    "Time": "_O(n * (logb + logc))_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Fast Exponentiation"
  },
  {
    "Index": 2962,
    "Title": "[Count Subarrays Where Max Element Appears at Least K Times](https://leetcode.com/problems/count-subarrays-where-max-element-appears-at-least-k-times/)",
    "Solution": [
      [
        "C++",
        "C++/count-subarrays-where-max-element-appears-at-least-k-times.cpp"
      ],
      [
        "Python",
        "Python/count-subarrays-where-max-element-appears-at-least-k-times.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2963,
    "Title": "[Count the Number of Good Partitions](https://leetcode.com/problems/count-the-number-of-good-partitions/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-number-of-good-partitions.cpp"
      ],
      [
        "Python",
        "Python/count-the-number-of-good-partitions.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Hash Table, Combinatorics"
  },
  {
    "Index": 2964,
    "Title": "[Number of Divisible Triplet Sums](https://leetcode.com/problems/number-of-divisible-triplet-sums/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-divisible-triplet-sums.cpp"
      ],
      [
        "Python",
        "Python/number-of-divisible-triplet-sums.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2965,
    "Title": "[Find Missing and Repeated Values](https://leetcode.com/problems/find-missing-and-repeated-values/)",
    "Solution": [
      [
        "C++",
        "C++/find-missing-and-repeated-values.cpp"
      ],
      [
        "Python",
        "Python/find-missing-and-repeated-values.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2966,
    "Title": "[Divide Array Into Arrays With Max Difference](https://leetcode.com/problems/divide-array-into-arrays-with-max-difference/)",
    "Solution": [
      [
        "C++",
        "C++/divide-array-into-arrays-with-max-difference.cpp"
      ],
      [
        "Python",
        "Python/divide-array-into-arrays-with-max-difference.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2967,
    "Title": "[Minimum Cost to Make Array Equalindromic](https://leetcode.com/problems/minimum-cost-to-make-array-equalindromic/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-to-make-array-equalindromic.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-to-make-array-equalindromic.py"
      ]
    ],
    "Time": "_O(n + logr)_",
    "Space": "_O(logr)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Find the Closest Palindrome](https://leetcode.com/problems/find-the-closest-palindrome/)",
    "Note": "Sort, Quick Select, Math, String"
  },
  {
    "Index": 2968,
    "Title": "[Apply Operations to Maximize Frequency Score](https://leetcode.com/problems/apply-operations-to-maximize-frequency-score/)",
    "Solution": [
      [
        "C++",
        "C++/apply-operations-to-maximize-frequency-score.cpp"
      ],
      [
        "Python",
        "Python/apply-operations-to-maximize-frequency-score.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2969,
    "Title": "[Minimum Number of Coins for Fruits II](https://leetcode.com/problems/minimum-number-of-coins-for-fruits-ii/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-coins-for-fruits-ii.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-coins-for-fruits-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 2970,
    "Title": "[Count the Number of Incremovable Subarrays I](https://leetcode.com/problems/count-the-number-of-incremovable-subarrays-i/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-number-of-incremovable-subarrays-i.cpp"
      ],
      [
        "Python",
        "Python/count-the-number-of-incremovable-subarrays-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2971,
    "Title": "[Find Polygon With the Largest Perimeter](https://leetcode.com/problems/find-polygon-with-the-largest-perimeter/)",
    "Solution": [
      [
        "C++",
        "C++/find-polygon-with-the-largest-perimeter.cpp"
      ],
      [
        "Python",
        "Python/find-polygon-with-the-largest-perimeter.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2972,
    "Title": "[Count the Number of Incremovable Subarrays II](https://leetcode.com/problems/count-the-number-of-incremovable-subarrays-ii/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-number-of-incremovable-subarrays-ii.cpp"
      ],
      [
        "Python",
        "Python/count-the-number-of-incremovable-subarrays-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2973,
    "Title": "[Find Number of Coins to Place in Tree Nodes](https://leetcode.com/problems/find-number-of-coins-to-place-in-tree-nodes/)",
    "Solution": [
      [
        "C++",
        "C++/find-number-of-coins-to-place-in-tree-nodes.cpp"
      ],
      [
        "Python",
        "Python/find-number-of-coins-to-place-in-tree-nodes.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 2974,
    "Title": "[Minimum Number Game](https://leetcode.com/problems/minimum-number-game/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-game.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-game.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2975,
    "Title": "[Maximum Square Area by Removing Fences From a Field](https://leetcode.com/problems/maximum-square-area-by-removing-fences-from-a-field/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-square-area-by-removing-fences-from-a-field.cpp"
      ],
      [
        "Python",
        "Python/maximum-square-area-by-removing-fences-from-a-field.py"
      ]
    ],
    "Time": "_O(h^2 + v^2)_",
    "Space": "_O(min(h, v)^2)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2976,
    "Title": "[Minimum Cost to Convert String I](https://leetcode.com/problems/minimum-cost-to-convert-string-i/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-to-convert-string-i.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-to-convert-string-i.py"
      ]
    ],
    "Time": "_O(o + k * eloge + n)_",
    "Space": "_O(o + k * v)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2977,
    "Title": "[Minimum Cost to Convert String II](https://leetcode.com/problems/minimum-cost-to-convert-string-ii/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-to-convert-string-ii.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-to-convert-string-ii.py"
      ]
    ],
    "Time": "_O(o * l + k * eloge + n * l)_",
    "Space": "_O(t + k * v + l)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2978,
    "Title": "[Symmetric Coordinates](https://leetcode.com/problems/symmetric-coordinates/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/symmetric-coordinates.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2979,
    "Title": "[Most Expensive Item That Can Not Be Bought](https://leetcode.com/problems/most-expensive-item-that-can-not-be-bought/)",
    "Solution": [
      [
        "C++",
        "C++/most-expensive-item-that-can-not-be-bought.cpp"
      ],
      [
        "Python",
        "Python/most-expensive-item-that-can-not-be-bought.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "`Frobenius Coin Problem`, `Chicken McNugget Theorem`, DP"
  },
  {
    "Index": 2980,
    "Title": "[Check if Bitwise OR Has Trailing Zeros](https://leetcode.com/problems/check-if-bitwise-or-has-trailing-zeros/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-bitwise-or-has-trailing-zeros.cpp"
      ],
      [
        "Python",
        "Python/check-if-bitwise-or-has-trailing-zeros.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2981,
    "Title": "[Find Longest Special Substring That Occurs Thrice I](https://leetcode.com/problems/find-longest-special-substring-that-occurs-thrice-i/)",
    "Solution": [
      [
        "C++",
        "C++/find-longest-special-substring-that-occurs-thrice-i.cpp"
      ],
      [
        "Python",
        "Python/find-longest-special-substring-that-occurs-thrice-i.py"
      ]
    ],
    "Time": "_O(26 * 3 + n * 3)_",
    "Space": "_O(26 * 3)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2982,
    "Title": "[Find Longest Special Substring That Occurs Thrice II](https://leetcode.com/problems/find-longest-special-substring-that-occurs-thrice-ii/)",
    "Solution": [
      [
        "C++",
        "C++/find-longest-special-substring-that-occurs-thrice-ii.cpp"
      ],
      [
        "Python",
        "Python/find-longest-special-substring-that-occurs-thrice-ii.py"
      ]
    ],
    "Time": "_O(26 * 3 + n * 3)_",
    "Space": "_O(26 * 3)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2983,
    "Title": "[Palindrome Rearrangement Queries](https://leetcode.com/problems/palindrome-rearrangement-queries/)",
    "Solution": [
      [
        "C++",
        "C++/palindrome-rearrangement-queries.cpp"
      ],
      [
        "Python",
        "Python/palindrome-rearrangement-queries.py"
      ]
    ],
    "Time": "_O(26 + d * n + d * q)_",
    "Space": "_O(26 + d * n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 2984,
    "Title": "[Find Peak Calling Hours for Each City](https://leetcode.com/problems/find-peak-calling-hours-for-each-city/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-peak-calling-hours-for-each-city.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2985,
    "Title": "[Calculate Compressed Mean](https://leetcode.com/problems/calculate-compressed-mean/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/calculate-compressed-mean.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2986,
    "Title": "[Find Third Transaction](https://leetcode.com/problems/find-third-transaction/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-third-transaction.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2987,
    "Title": "[Find Expensive Cities](https://leetcode.com/problems/find-expensive-cities/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-expensive-cities.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2988,
    "Title": "[Manager of the Largest Department](https://leetcode.com/problems/manager-of-the-largest-department/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/manager-of-the-largest-department.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2989,
    "Title": "[Class Performance](https://leetcode.com/problems/class-performance/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/class-performance.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2990,
    "Title": "[Loan Types](https://leetcode.com/problems/loan-types/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/loan-types.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2991,
    "Title": "[Top Three Wineries](https://leetcode.com/problems/top-three-wineries/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/top-three-wineries.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2992,
    "Title": "[Number of Self-Divisible Permutations](https://leetcode.com/problems/number-of-self-divisible-permutations/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-self-divisible-permutations.cpp"
      ],
      [
        "Python",
        "Python/number-of-self-divisible-permutations.py"
      ]
    ],
    "Time": "_O(n * 2^n)_",
    "Space": "_O(2^n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 2993,
    "Title": "[Friday Purchases I](https://leetcode.com/problems/friday-purchases-i/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/friday-purchases-i.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2994,
    "Title": "[Friday Purchases II](https://leetcode.com/problems/friday-purchases-ii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/friday-purchases-ii.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2995,
    "Title": "[Viewers Turned Streamers](https://leetcode.com/problems/viewers-turned-streamers/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/viewers-turned-streamers.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 2996,
    "Title": "[Smallest Missing Integer Greater Than Sequential Prefix Sum](https://leetcode.com/problems/smallest-missing-integer-greater-than-sequential-prefix-sum/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-missing-integer-greater-than-sequential-prefix-sum.cpp"
      ],
      [
        "Python",
        "Python/smallest-missing-integer-greater-than-sequential-prefix-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 2997,
    "Title": "[Minimum Number of Operations to Make Array XOR Equal to K](https://leetcode.com/problems/minimum-number-of-operations-to-make-array-xor-equal-to-k/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-operations-to-make-array-xor-equal-to-k.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-operations-to-make-array-xor-equal-to-k.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2998,
    "Title": "[Minimum Number of Operations to Make X and Y Equal](https://leetcode.com/problems/minimum-number-of-operations-to-make-x-and-y-equal/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-operations-to-make-x-and-y-equal.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-operations-to-make-x-and-y-equal.py"
      ]
    ],
    "Time": "_O(x)_",
    "Space": "_O(x)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 2999,
    "Title": "[Count the Number of Powerful Integers](https://leetcode.com/problems/count-the-number-of-powerful-integers/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-number-of-powerful-integers.cpp"
      ],
      [
        "Python",
        "Python/count-the-number-of-powerful-integers.py"
      ]
    ],
    "Time": "_O(logf)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Math, Combinatorics"
  },
  {
    "Index": 3000,
    "Title": "[Maximum Area of Longest Diagonal Rectangle](https://leetcode.com/problems/maximum-area-of-longest-diagonal-rectangle/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-area-of-longest-diagonal-rectangle.cpp"
      ],
      [
        "Python",
        "Python/maximum-area-of-longest-diagonal-rectangle.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3001,
    "Title": "[Minimum Moves to Capture The Queen](https://leetcode.com/problems/minimum-moves-to-capture-the-queen/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-moves-to-capture-the-queen.cpp"
      ],
      [
        "Python",
        "Python/minimum-moves-to-capture-the-queen.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Math"
  },
  {
    "Index": 3002,
    "Title": "[Maximum Size of a Set After Removals](https://leetcode.com/problems/maximum-size-of-a-set-after-removals/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-size-of-a-set-after-removals.cpp"
      ],
      [
        "Python",
        "Python/maximum-size-of-a-set-after-removals.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3003,
    "Title": "[Maximize the Number of Partitions After Operations](https://leetcode.com/problems/maximize-the-number-of-partitions-after-operations/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-the-number-of-partitions-after-operations.cpp"
      ],
      [
        "Python",
        "Python/maximize-the-number-of-partitions-after-operations.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3004,
    "Title": "[Maximum Subtree of the Same Color](https://leetcode.com/problems/maximum-subtree-of-the-same-color/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-subtree-of-the-same-color.cpp"
      ],
      [
        "Python",
        "Python/maximum-subtree-of-the-same-color.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "DFS"
  },
  {
    "Index": 3005,
    "Title": "[Count Elements With Maximum Frequency](https://leetcode.com/problems/count-elements-with-maximum-frequency/)",
    "Solution": [
      [
        "C++",
        "C++/count-elements-with-maximum-frequency.cpp"
      ],
      [
        "Python",
        "Python/count-elements-with-maximum-frequency.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3006,
    "Title": "[Find Beautiful Indices in the Given Array I](https://leetcode.com/problems/find-beautiful-indices-in-the-given-array-i/)",
    "Solution": [
      [
        "C++",
        "C++/find-beautiful-indices-in-the-given-array-i.cpp"
      ],
      [
        "Python",
        "Python/find-beautiful-indices-in-the-given-array-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(min(a + b + x + y, n))_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3007,
    "Title": "[Maximum Number That Sum of the Prices Is Less Than or Equal to K](https://leetcode.com/problems/maximum-number-that-sum-of-the-prices-is-less-than-or-equal-to-k/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-that-sum-of-the-prices-is-less-than-or-equal-to-k.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-that-sum-of-the-prices-is-less-than-or-equal-to-k.py"
      ]
    ],
    "Time": "_O(max(logk, x) * log((logk) / x))_",
    "Space": "_O((logk) / x)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Bit Manipulation, Binary Search, Combinatorics"
  },
  {
    "Index": 3008,
    "Title": "[Find Beautiful Indices in the Given Array II](https://leetcode.com/problems/find-beautiful-indices-in-the-given-array-ii/)",
    "Solution": [
      [
        "C++",
        "C++/find-beautiful-indices-in-the-given-array-ii.cpp"
      ],
      [
        "Python",
        "Python/find-beautiful-indices-in-the-given-array-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(min(a + b + x + y, n))_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3009,
    "Title": "[Maximum Number of Intersections on the Chart](https://leetcode.com/problems/maximum-number-of-intersections-on-the-chart/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-intersections-on-the-chart.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-intersections-on-the-chart.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 3010,
    "Title": "[Divide an Array Into Subarrays With Minimum Cost I](https://leetcode.com/problems/divide-an-array-into-subarrays-with-minimum-cost-i/)",
    "Solution": [
      [
        "C++",
        "C++/divide-an-array-into-subarrays-with-minimum-cost-i.cpp"
      ],
      [
        "Python",
        "Python/divide-an-array-into-subarrays-with-minimum-cost-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3011,
    "Title": "[Find if Array Can Be Sorted](https://leetcode.com/problems/find-if-array-can-be-sorted/)",
    "Solution": [
      [
        "C++",
        "C++/find-if-array-can-be-sorted.cpp"
      ],
      [
        "Python",
        "Python/find-if-array-can-be-sorted.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3012,
    "Title": "[Minimize Length of Array Using Operations](https://leetcode.com/problems/minimize-length-of-array-using-operations/)",
    "Solution": [
      [
        "C++",
        "C++/minimize-length-of-array-using-operations.cpp"
      ],
      [
        "Python",
        "Python/minimize-length-of-array-using-operations.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3013,
    "Title": "[Divide an Array Into Subarrays With Minimum Cost II](https://leetcode.com/problems/divide-an-array-into-subarrays-with-minimum-cost-ii/)",
    "Solution": [
      [
        "C++",
        "C++/divide-an-array-into-subarrays-with-minimum-cost-ii.cpp"
      ],
      [
        "Python",
        "Python/divide-an-array-into-subarrays-with-minimum-cost-ii.py"
      ]
    ],
    "Time": "_O(nlogd)_",
    "Space": "_O(d)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3014,
    "Title": "[Minimum Number of Pushes to Type Word I](https://leetcode.com/problems/minimum-number-of-pushes-to-type-word-i/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-pushes-to-type-word-i.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-pushes-to-type-word-i.py"
      ]
    ],
    "Time": "_O(4)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3015,
    "Title": "[Count the Number of Houses at a Certain Distance I](https://leetcode.com/problems/count-the-number-of-houses-at-a-certain-distance-i/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-number-of-houses-at-a-certain-distance-i.cpp"
      ],
      [
        "Python",
        "Python/count-the-number-of-houses-at-a-certain-distance-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3016,
    "Title": "[Minimum Number of Pushes to Type Word II](https://leetcode.com/problems/minimum-number-of-pushes-to-type-word-ii/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-pushes-to-type-word-ii.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-pushes-to-type-word-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(26)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3017,
    "Title": "[Count the Number of Houses at a Certain Distance II](https://leetcode.com/problems/count-the-number-of-houses-at-a-certain-distance-ii/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-number-of-houses-at-a-certain-distance-ii.cpp"
      ],
      [
        "Python",
        "Python/count-the-number-of-houses-at-a-certain-distance-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3018,
    "Title": "[Maximum Number of Removal Queries That Can Be Processed I](https://leetcode.com/problems/maximum-number-of-removal-queries-that-can-be-processed-i/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-removal-queries-that-can-be-processed-i.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-removal-queries-that-can-be-processed-i.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 3019,
    "Title": "[Number of Changing Keys](https://leetcode.com/problems/number-of-changing-keys/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-changing-keys.cpp"
      ],
      [
        "Python",
        "Python/number-of-changing-keys.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "String"
  },
  {
    "Index": 3020,
    "Title": "[Find the Maximum Number of Elements in Subset](https://leetcode.com/problems/find-the-maximum-number-of-elements-in-subset/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-maximum-number-of-elements-in-subset.cpp"
      ],
      [
        "Python",
        "Python/find-the-maximum-number-of-elements-in-subset.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3021,
    "Title": "[Alice and Bob Playing Flower Game](https://leetcode.com/problems/alice-and-bob-playing-flower-game/)",
    "Solution": [
      [
        "C++",
        "C++/alice-and-bob-playing-flower-game.cpp"
      ],
      [
        "Python",
        "Python/alice-and-bob-playing-flower-game.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Combinatorics"
  },
  {
    "Index": 3022,
    "Title": "[Minimize OR of Remaining Elements Using Operations](https://leetcode.com/problems/minimize-or-of-remaining-elements-using-operations/)",
    "Solution": [
      [
        "C++",
        "C++/minimize-or-of-remaining-elements-using-operations.cpp"
      ],
      [
        "Python",
        "Python/minimize-or-of-remaining-elements-using-operations.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3023,
    "Title": "[Find Pattern in Infinite Stream I](https://leetcode.com/problems/find-pattern-in-infinite-stream-i/)",
    "Solution": [
      [
        "C++",
        "C++/find-pattern-in-infinite-stream-i.cpp"
      ],
      [
        "Python",
        "Python/find-pattern-in-infinite-stream-i.py"
      ]
    ],
    "Time": "_O(p + n)_",
    "Space": "_O(p)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "String, `KMP Algorithm`"
  },
  {
    "Index": 3024,
    "Title": "[Type of Triangle II](https://leetcode.com/problems/type-of-triangle-ii/)",
    "Solution": [
      [
        "C++",
        "C++/type-of-triangle-ii.cpp"
      ],
      [
        "Python",
        "Python/type-of-triangle-ii.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Math"
  },
  {
    "Index": 3025,
    "Title": "[Find the Number of Ways to Place People I](https://leetcode.com/problems/find-the-number-of-ways-to-place-people-i/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-number-of-ways-to-place-people-i.cpp"
      ],
      [
        "Python",
        "Python/find-the-number-of-ways-to-place-people-i.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3026,
    "Title": "[Maximum Good Subarray Sum](https://leetcode.com/problems/maximum-good-subarray-sum/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-good-subarray-sum.cpp"
      ],
      [
        "Python",
        "Python/maximum-good-subarray-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3027,
    "Title": "[Find the Number of Ways to Place People II](https://leetcode.com/problems/find-the-number-of-ways-to-place-people-ii/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-number-of-ways-to-place-people-ii.cpp"
      ],
      [
        "Python",
        "Python/find-the-number-of-ways-to-place-people-ii.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3028,
    "Title": "[Ant on the Boundary](https://leetcode.com/problems/ant-on-the-boundary/)",
    "Solution": [
      [
        "C++",
        "C++/ant-on-the-boundary.cpp"
      ],
      [
        "Python",
        "Python/ant-on-the-boundary.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3029,
    "Title": "[Minimum Time to Revert Word to Initial State I](https://leetcode.com/problems/minimum-time-to-revert-word-to-initial-state-i/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-time-to-revert-word-to-initial-state-i.cpp"
      ],
      [
        "Python",
        "Python/minimum-time-to-revert-word-to-initial-state-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "String, `Z-Function`, Brute Force"
  },
  {
    "Index": 3030,
    "Title": "[Find the Grid of Region Average](https://leetcode.com/problems/find-the-grid-of-region-average/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-grid-of-region-average.cpp"
      ],
      [
        "Python",
        "Python/find-the-grid-of-region-average.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3031,
    "Title": "[Minimum Time to Revert Word to Initial State II](https://leetcode.com/problems/minimum-time-to-revert-word-to-initial-state-ii/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-time-to-revert-word-to-initial-state-ii.cpp"
      ],
      [
        "Python",
        "Python/minimum-time-to-revert-word-to-initial-state-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "String, `Z-Function`"
  },
  {
    "Index": 3032,
    "Title": "[Count Numbers With Unique Digits II](https://leetcode.com/problems/count-numbers-with-unique-digits-ii/)",
    "Solution": [
      [
        "C++",
        "C++/count-numbers-with-unique-digits-ii.cpp"
      ],
      [
        "Python",
        "Python/count-numbers-with-unique-digits-ii.py"
      ]
    ],
    "Time": "_O(logb)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒, variant of [Count Numbers With Unique Digits](https://leetcode.com/problems/count-numbers-with-unique-digits/)"
  },
  {
    "Index": 3033,
    "Title": "[Modify the Matrix](https://leetcode.com/problems/modify-the-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/modify-the-matrix.cpp"
      ],
      [
        "Python",
        "Python/modify-the-matrix.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3034,
    "Title": "[Number of Subarrays That Match a Pattern I](https://leetcode.com/problems/number-of-subarrays-that-match-a-pattern-i/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-subarrays-that-match-a-pattern-i.cpp"
      ],
      [
        "Python",
        "Python/number-of-subarrays-that-match-a-pattern-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(m)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Brute Force, String, `KMP Algorithm`"
  },
  {
    "Index": 3035,
    "Title": "[Maximum Palindromes After Operations](https://leetcode.com/problems/maximum-palindromes-after-operations/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-palindromes-after-operations.cpp"
      ],
      [
        "Python",
        "Python/maximum-palindromes-after-operations.py"
      ]
    ],
    "Time": "_O(n * l + nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3036,
    "Title": "[Number of Subarrays That Match a Pattern II](https://leetcode.com/problems/number-of-subarrays-that-match-a-pattern-ii/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-subarrays-that-match-a-pattern-ii.cpp"
      ],
      [
        "Python",
        "Python/number-of-subarrays-that-match-a-pattern-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(m)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "String, `KMP Algorithm`"
  },
  {
    "Index": 3037,
    "Title": "[Find Pattern in Infinite Stream II](https://leetcode.com/problems/find-pattern-in-infinite-stream-ii/)",
    "Solution": [
      [
        "C++",
        "C++/find-pattern-in-infinite-stream-ii.cpp"
      ],
      [
        "Python",
        "Python/find-pattern-in-infinite-stream-ii.py"
      ]
    ],
    "Time": "_O(p + n)_",
    "Space": "_O(p)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "String, `KMP Algorithm`"
  },
  {
    "Index": 3038,
    "Title": "[Maximum Number of Operations With the Same Score I](https://leetcode.com/problems/maximum-number-of-operations-with-the-same-score-i/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-operations-with-the-same-score-i.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-operations-with-the-same-score-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3039,
    "Title": "[Apply Operations to Make String Empty](https://leetcode.com/problems/apply-operations-to-make-string-empty/)",
    "Solution": [
      [
        "C++",
        "C++/apply-operations-to-make-string-empty.cpp"
      ],
      [
        "Python",
        "Python/apply-operations-to-make-string-empty.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3040,
    "Title": "[Maximum Number of Operations With the Same Score II](https://leetcode.com/problems/maximum-number-of-operations-with-the-same-score-ii/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-operations-with-the-same-score-ii.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-operations-with-the-same-score-ii.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3041,
    "Title": "[Maximize Consecutive Elements in an Array After Modification](https://leetcode.com/problems/maximize-consecutive-elements-in-an-array-after-modification/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-consecutive-elements-in-an-array-after-modification.cpp"
      ],
      [
        "Python",
        "Python/maximize-consecutive-elements-in-an-array-after-modification.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3042,
    "Title": "[Count Prefix and Suffix Pairs I](https://leetcode.com/problems/count-prefix-and-suffix-pairs-i/)",
    "Solution": [
      [
        "C++",
        "C++/count-prefix-and-suffix-pairs-i.cpp"
      ],
      [
        "Python",
        "Python/count-prefix-and-suffix-pairs-i.py"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(t)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Trie, Brute Force"
  },
  {
    "Index": 3043,
    "Title": "[Find the Length of the Longest Common Prefix](https://leetcode.com/problems/find-the-length-of-the-longest-common-prefix/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-length-of-the-longest-common-prefix.cpp"
      ],
      [
        "Python",
        "Python/find-the-length-of-the-longest-common-prefix.py"
      ]
    ],
    "Time": "_O((n + m) * l)_",
    "Space": "_O(t)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Trie, Hash Table"
  },
  {
    "Index": 3044,
    "Title": "[Most Frequent Prime](https://leetcode.com/problems/most-frequent-prime/)",
    "Solution": [
      [
        "C++",
        "C++/most-frequent-prime.cpp"
      ],
      [
        "Python",
        "Python/most-frequent-prime.py"
      ]
    ],
    "Time": "precompute: _O(10^MAX_N_M)_<br>runtime: _O(n * m * (n + m))_",
    "Space": "_O(10^MAX_N_M + n * m * (n + m))_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3045,
    "Title": "[Count Prefix and Suffix Pairs II](https://leetcode.com/problems/count-prefix-and-suffix-pairs-ii/)",
    "Solution": [
      [
        "C++",
        "C++/count-prefix-and-suffix-pairs-ii.cpp"
      ],
      [
        "Python",
        "Python/count-prefix-and-suffix-pairs-ii.py"
      ]
    ],
    "Time": "_O(n * l)_",
    "Space": "_O(t)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Trie"
  },
  {
    "Index": 3046,
    "Title": "[Split the Array](https://leetcode.com/problems/split-the-array/)",
    "Solution": [
      [
        "C++",
        "C++/split-the-array.cpp"
      ],
      [
        "Python",
        "Python/split-the-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3047,
    "Title": "[Find the Largest Area of Square Inside Two Rectangles](https://leetcode.com/problems/find-the-largest-area-of-square-inside-two-rectangles/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-largest-area-of-square-inside-two-rectangles.cpp"
      ],
      [
        "Python",
        "Python/find-the-largest-area-of-square-inside-two-rectangles.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Meidum",
    "Tag": 0,
    "Note": "Brute Force, Math"
  },
  {
    "Index": 3048,
    "Title": "[Earliest Second to Mark Indices I](https://leetcode.com/problems/earliest-second-to-mark-indices-i/)",
    "Solution": [
      [
        "C++",
        "C++/earliest-second-to-mark-indices-i.cpp"
      ],
      [
        "Python",
        "Python/earliest-second-to-mark-indices-i.py"
      ]
    ],
    "Time": "_O(mlogm)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Binary Search, Greedy"
  },
  {
    "Index": 3049,
    "Title": "[Earliest Second to Mark Indices II](https://leetcode.com/problems/earliest-second-to-mark-indices-ii/)",
    "Solution": [
      [
        "C++",
        "C++/earliest-second-to-mark-indices-ii.cpp"
      ],
      [
        "Python",
        "Python/earliest-second-to-mark-indices-ii.py"
      ]
    ],
    "Time": "_O((m + nlogn) *logm)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Binary Search, Greedy, Heap"
  },
  {
    "Index": 3050,
    "Title": "[Pizza Toppings Cost Analysis](https://leetcode.com/problems/pizza-toppings-cost-analysis/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/pizza-toppings-cost-analysis.sql"
      ]
    ],
    "Time": "_O(n^3 * logn)_",
    "Space": "_O(n^3)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 3051,
    "Title": "[Find Candidates for Data Scientist Position](https://leetcode.com/problems/find-candidates-for-data-scientist-position/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-candidates-for-data-scientist-position.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 3052,
    "Title": "[Maximize Items](https://leetcode.com/problems/maximize-items/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/maximize-items.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 3053,
    "Title": "[Classifying Triangles by Lengths](https://leetcode.com/problems/classifying-triangles-by-lengths/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/classifying-triangles-by-lengths.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 3054,
    "Title": "[Binary Tree Nodes](https://leetcode.com/problems/binary-tree-nodes/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/binary-tree-nodes.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 3055,
    "Title": "[Top Percentile Fraud](https://leetcode.com/problems/top-percentile-fraud/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/top-percentile-fraud.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 3056,
    "Title": "[Snaps Analysis](https://leetcode.com/snaps-analysis/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/snaps-analysis.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 3057,
    "Title": "[Employees Project Allocation](https://leetcode.com/problems/employees-project-allocation/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/employees-project-allocation.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 3058,
    "Title": "[Friends With No Mutual Friends](https://leetcode.com/problems/friends-with-no-mutual-friends/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/friends-with-no-mutual-friends.sql"
      ]
    ],
    "Time": "_O(n^2 * logn)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 3059,
    "Title": "[Find All Unique Email Domains](https://leetcode.com/problems/find-all-unique-email-domains/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-all-unique-email-domains.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 3060,
    "Title": "[User Activities within Time Bounds](https://leetcode.com/problems/user-activities-within-time-bounds/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/user-activities-within-time-bounds.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 3061,
    "Title": "[Calculate Trapping Rain Water](https://leetcode.com/problems/calculate-trapping-rain-water/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/calculate-trapping-rain-water.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 3062,
    "Title": "[Winner of the Linked List Game](https://leetcode.com/problems/winner-of-the-linked-list-game/)",
    "Solution": [
      [
        "C++",
        "C++/winner-of-the-linked-list-game.cpp"
      ],
      [
        "Python",
        "Python/winner-of-the-linked-list-game.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒"
  },
  {
    "Index": 3063,
    "Title": "[Linked List Frequency](https://leetcode.com/problems/linked-list-frequency/)",
    "Solution": [
      [
        "C++",
        "C++/linked-list-frequency.cpp"
      ],
      [
        "Python",
        "Python/linked-list-frequency.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 3064,
    "Title": "[Guess the Number Using Bitwise Questions I](https://leetcode.com/problems/guess-the-number-using-bitwise-questions-i/)",
    "Solution": [
      [
        "C++",
        "C++/guess-the-number-using-bitwise-questions-i.cpp"
      ],
      [
        "Python",
        "Python/guess-the-number-using-bitwise-questions-i.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 3065,
    "Title": "[Minimum Operations to Exceed Threshold Value I](https://leetcode.com/problems/minimum-operations-to-exceed-threshold-value-i/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-exceed-threshold-value-i.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-exceed-threshold-value-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3066,
    "Title": "[Minimum Operations to Exceed Threshold Value II](https://leetcode.com/problems/minimum-operations-to-exceed-threshold-value-ii/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-exceed-threshold-value-ii.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-exceed-threshold-value-ii.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3067,
    "Title": "[Count Pairs of Connectable Servers in a Weighted Tree Network](https://leetcode.com/problems/count-pairs-of-connectable-servers-in-a-weighted-tree-network/)",
    "Solution": [
      [
        "C++",
        "C++/count-pairs-of-connectable-servers-in-a-weighted-tree-network.cpp"
      ],
      [
        "Python",
        "Python/count-pairs-of-connectable-servers-in-a-weighted-tree-network.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS, BFS"
  },
  {
    "Index": 3068,
    "Title": "[Find the Maximum Sum of Node Values](https://leetcode.com/problems/find-the-maximum-sum-of-node-values/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-maximum-sum-of-node-values.cpp"
      ],
      [
        "Python",
        "Python/find-the-maximum-sum-of-node-values.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3069,
    "Title": "[Distribute Elements Into Two Arrays I](https://leetcode.com/problems/distribute-elements-into-two-arrays-i/)",
    "Solution": [
      [
        "C++",
        "C++/distribute-elements-into-two-arrays-i.cpp"
      ],
      [
        "Python",
        "Python/distribute-elements-into-two-arrays-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3070,
    "Title": "[Count Submatrices with Top-Left Element and Sum Less Than k](https://leetcode.com/problems/count-submatrices-with-top-left-element-and-sum-less-than-k/)",
    "Solution": [
      [
        "C++",
        "C++/count-submatrices-with-top-left-element-and-sum-less-than-k.cpp"
      ],
      [
        "Python",
        "Python/count-submatrices-with-top-left-element-and-sum-less-than-k.py"
      ]
    ],
    "Time": "_O(n * m)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3071,
    "Title": "[Minimum Operations to Write the Letter Y on a Grid](https://leetcode.com/problems/minimum-operations-to-write-the-letter-y-on-a-grid/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-write-the-letter-y-on-a-grid.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-write-the-letter-y-on-a-grid.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3072,
    "Title": "[Distribute Elements Into Two Arrays II](https://leetcode.com/problems/distribute-elements-into-two-arrays-ii/)",
    "Solution": [
      [
        "C++",
        "C++/distribute-elements-into-two-arrays-ii.cpp"
      ],
      [
        "Python",
        "Python/distribute-elements-into-two-arrays-ii.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3073,
    "Title": "[Maximum Increasing Triplet Value](https://leetcode.com/problems/maximum-increasing-triplet-value/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-increasing-triplet-value.cpp"
      ],
      [
        "Python",
        "Python/maximum-increasing-triplet-value.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 3074,
    "Title": "[Apple Redistribution into Boxes](https://leetcode.com/problems/apple-redistribution-into-boxes/)",
    "Solution": [
      [
        "C++",
        "C++/apple-redistribution-into-boxes.cpp"
      ],
      [
        "Python",
        "Python/apple-redistribution-into-boxes.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3075,
    "Title": "[Maximize Happiness of Selected Children](https://leetcode.com/problems/maximize-happiness-of-selected-children/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-happiness-of-selected-children.cpp"
      ],
      [
        "Python",
        "Python/maximize-happiness-of-selected-children.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3076,
    "Title": "[Shortest Uncommon Substring in an Array](https://leetcode.com/problems/shortest-uncommon-substring-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-uncommon-substring-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/shortest-uncommon-substring-in-an-array.py"
      ]
    ],
    "Time": "_O(n * l^2)_",
    "Space": "_O(t)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Trie"
  },
  {
    "Index": 3077,
    "Title": "[Maximum Strength of K Disjoint Subarrays](https://leetcode.com/problems/maximum-strength-of-k-disjoint-subarrays/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-strength-of-k-disjoint-subarrays.cpp"
      ],
      [
        "Python",
        "Python/maximum-strength-of-k-disjoint-subarrays.py"
      ]
    ],
    "Time": "_O(k * n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3078,
    "Title": "[Match Alphanumerical Pattern in Matrix I](https://leetcode.com/problems/match-alphanumerical-pattern-in-matrix-i/)",
    "Solution": [
      [
        "C++",
        "C++/match-alphanumerical-pattern-in-matrix-i.cpp"
      ],
      [
        "Python",
        "Python/match-alphanumerical-pattern-in-matrix-i.py"
      ]
    ],
    "Time": "_O(n * m * r * c)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 3079,
    "Title": "[Find the Sum of Encrypted Integers](https://leetcode.com/problems/find-the-sum-of-encrypted-integers/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-sum-of-encrypted-integers.cpp"
      ],
      [
        "Python",
        "Python/find-the-sum-of-encrypted-integers.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3080,
    "Title": "[Mark Elements on Array by Performing Queries](https://leetcode.com/problems/mark-elements-on-array-by-performing-queries/)",
    "Solution": [
      [
        "C++",
        "C++/mark-elements-on-array-by-performing-queries.cpp"
      ],
      [
        "Python",
        "Python/mark-elements-on-array-by-performing-queries.py"
      ]
    ],
    "Time": "_O(q + nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3081,
    "Title": "[Replace Question Marks in String to Minimize Its Value](https://leetcode.com/problems/replace-question-marks-in-string-to-minimize-its-value/)",
    "Solution": [
      [
        "C++",
        "C++/replace-question-marks-in-string-to-minimize-its-value.cpp"
      ],
      [
        "Python",
        "Python/replace-question-marks-in-string-to-minimize-its-value.py"
      ]
    ],
    "Time": "_O(n + 26 * log(26))_",
    "Space": "_O(n + 26)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3082,
    "Title": "[Find the Sum of the Power of All Subsequences](https://leetcode.com/problems/find-the-sum-of-the-power-of-all-subsequences/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-sum-of-the-power-of-all-subsequences.cpp"
      ],
      [
        "Python",
        "Python/find-the-sum-of-the-power-of-all-subsequences.py"
      ]
    ],
    "Time": "_O(n * k)_",
    "Space": "_O(k)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3083,
    "Title": "[Existence of a Substring in a String and Its Reverse](https://leetcode.com/problems/existence-of-a-substring-in-a-string-and-its-reverse/)",
    "Solution": [
      [
        "C++",
        "C++/existence-of-a-substring-in-a-string-and-its-reverse.cpp"
      ],
      [
        "Python",
        "Python/existence-of-a-substring-in-a-string-and-its-reverse.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(min(n, 26^2))_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3084,
    "Title": "[Count Substrings Starting and Ending with Given Character](https://leetcode.com/problems/count-substrings-starting-and-ending-with-given-character/)",
    "Solution": [
      [
        "C++",
        "C++/count-substrings-starting-and-ending-with-given-character.cpp"
      ],
      [
        "Python",
        "Python/count-substrings-starting-and-ending-with-given-character.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Meidum",
    "Tag": 0,
    "Note": "Combinatorics"
  },
  {
    "Index": 3085,
    "Title": "[Minimum Deletions to Make String K-Special](https://leetcode.com/problems/minimum-deletions-to-make-string-k-special/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-deletions-to-make-string-k-special.cpp"
      ],
      [
        "Python",
        "Python/minimum-deletions-to-make-string-k-special.py"
      ]
    ],
    "Time": "_O(n + 26)_",
    "Space": "_O(n + 26)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3086,
    "Title": "[Minimum Moves to Pick K Ones](https://leetcode.com/problems/minimum-moves-to-pick-k-ones/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-moves-to-pick-k-ones.cpp"
      ],
      [
        "Python",
        "Python/minimum-moves-to-pick-k-ones.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3087,
    "Title": "[Find Trending Hashtags](https://leetcode.com/problems/find-trending-hashtags/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-trending-hashtags.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 3088,
    "Title": "[Make String Anti-palindrome](https://leetcode.com/problems/make-string-anti-palindrome/)",
    "Solution": [
      [
        "C++",
        "C++/make-string-anti-palindrome.cpp"
      ],
      [
        "Python",
        "Python/make-string-anti-palindrome.py"
      ]
    ],
    "Time": "_O(n + 26)_",
    "Space": "_O(26)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 3089,
    "Title": "[Find Bursty Behavior](https://leetcode.com/problems/find-bursty-behavior/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-bursty-behavior.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Window Function"
  },
  {
    "Index": 3090,
    "Title": "[Maximum Length Substring With Two Occurrences](https://leetcode.com/problems/maximum-length-substring-with-two-occurrences/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-length-substring-with-two-occurrences.cpp"
      ],
      [
        "Python",
        "Python/maximum-length-substring-with-two-occurrences.py"
      ]
    ],
    "Time": "_O(n + 26)_",
    "Space": "_O(26)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3091,
    "Title": "[Apply Operations to Make Sum of Array Greater Than or Equal to k](https://leetcode.com/problems/apply-operations-to-make-sum-of-array-greater-than-or-equal-to-k/)",
    "Solution": [
      [
        "C++",
        "C++/apply-operations-to-make-sum-of-array-greater-than-or-equal-to-k.cpp"
      ],
      [
        "Python",
        "Python/apply-operations-to-make-sum-of-array-greater-than-or-equal-to-k.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Meidum",
    "Tag": "[Codeforces Round #674 C](https://codeforces.com/contest/1426/problem/C)",
    "Note": "Math"
  },
  {
    "Index": 3092,
    "Title": "[Most Frequent IDs](https://leetcode.com/problems/most-frequent-ids/)",
    "Solution": [
      [
        "C++",
        "C++/most-frequent-ids.cpp"
      ],
      [
        "Python",
        "Python/most-frequent-ids.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3093,
    "Title": "[Longest Common Suffix Queries](https://leetcode.com/problems/longest-common-suffix-queries/)",
    "Solution": [
      [
        "C++",
        "C++/longest-common-suffix-queries.cpp"
      ],
      [
        "Python",
        "Python/longest-common-suffix-queries.py"
      ]
    ],
    "Time": "_O((n + q) * l)_",
    "Space": "_O(t)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Trie"
  },
  {
    "Index": 3094,
    "Title": "[Guess the Number Using Bitwise Questions II](https://leetcode.com/problems/guess-the-number-using-bitwise-questions-ii/)",
    "Solution": [
      [
        "C++",
        "C++/guess-the-number-using-bitwise-questions-ii.cpp"
      ],
      [
        "Python",
        "Python/guess-the-number-using-bitwise-questions-ii.py"
      ]
    ],
    "Time": "_O(logr)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 3095,
    "Title": "[Shortest Subarray With OR at Least K I](https://leetcode.com/problems/shortest-subarray-with-or-at-least-k-i/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-subarray-with-or-at-least-k-i.cpp"
      ],
      [
        "Python",
        "Python/shortest-subarray-with-or-at-least-k-i.py"
      ]
    ],
    "Time": "_O(n * 30)_",
    "Space": "_O(30)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3096,
    "Title": "[Minimum Levels to Gain More Points](https://leetcode.com/problems/minimum-levels-to-gain-more-points/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-levels-to-gain-more-points.cpp"
      ],
      [
        "Python",
        "Python/minimum-levels-to-gain-more-points.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3097,
    "Title": "[Shortest Subarray With OR at Least K II](https://leetcode.com/problems/shortest-subarray-with-or-at-least-k-ii/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-subarray-with-or-at-least-k-ii.cpp"
      ],
      [
        "Python",
        "Python/shortest-subarray-with-or-at-least-k-ii.py"
      ]
    ],
    "Time": "_O(n * 30)_",
    "Space": "_O(30)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3098,
    "Title": "[Find the Sum of Subsequence Powers](https://leetcode.com/problems/find-the-sum-of-subsequence-powers/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-sum-of-subsequence-powers.cpp"
      ],
      [
        "Python",
        "Python/find-the-sum-of-subsequence-powers.py"
      ]
    ],
    "Time": "_O(n^3 * k)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3099,
    "Title": "[Harshad Number](https://leetcode.com/problems/harshad-number/)",
    "Solution": [
      [
        "C++",
        "C++/harshad-number.cpp"
      ],
      [
        "Python",
        "Python/harshad-number.py"
      ]
    ],
    "Time": "_O(logx)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Math"
  },
  {
    "Index": 3100,
    "Title": "[Water Bottles II](https://leetcode.com/problems/water-bottles-ii/)",
    "Solution": [
      [
        "C++",
        "C++/water-bottles-ii.cpp"
      ],
      [
        "Python",
        "Python/water-bottles-ii.py"
      ]
    ],
    "Time": "_O(sqrt(n))_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3101,
    "Title": "[Count Alternating Subarrays](https://leetcode.com/problems/count-alternating-subarrays/)",
    "Solution": [
      [
        "C++",
        "C++/count-alternating-subarrays.cpp"
      ],
      [
        "Python",
        "Python/count-alternating-subarrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3102,
    "Title": "[Minimize Manhattan Distances](https://leetcode.com/problems/minimize-manhattan-distances/)",
    "Solution": [
      [
        "C++",
        "C++/minimize-manhattan-distances.cpp"
      ],
      [
        "Python",
        "Python/minimize-manhattan-distances.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Math"
  },
  {
    "Index": 3103,
    "Title": "[Find Trending Hashtags II](https://leetcode.com/problems/find-trending-hashtags-ii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-trending-hashtags-ii.sql"
      ]
    ],
    "Time": "_O(n * l^2 + (n * l) * log(n * l))_",
    "Space": "_O(n * l^2)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Recursive CTE"
  },
  {
    "Index": 3104,
    "Title": "[Find Longest Self-Contained Substring](https://leetcode.com/problems/find-longest-self-contained-substring/)",
    "Solution": [
      [
        "C++",
        "C++/find-longest-self-contained-substring.cpp"
      ],
      [
        "Python",
        "Python/find-longest-self-contained-substring.py"
      ]
    ],
    "Time": "_O(n + 26^3 * logn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Brute Force, Freq Table, Two Pointers, Hash Table, Binary Search"
  },
  {
    "Index": 3105,
    "Title": "[Longest Strictly Increasing or Strictly Decreasing Subarray](https://leetcode.com/problems/longest-strictly-increasing-or-strictly-decreasing-subarray/)",
    "Solution": [
      [
        "C++",
        "C++/longest-strictly-increasing-or-strictly-decreasing-subarray.cpp"
      ],
      [
        "Python",
        "Python/longest-strictly-increasing-or-strictly-decreasing-subarray.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3106,
    "Title": "[Lexicographically Smallest String After Operations With Constraint](https://leetcode.com/problems/lexicographically-smallest-string-after-operations-with-constraint/)",
    "Solution": [
      [
        "C++",
        "C++/lexicographically-smallest-string-after-operations-with-constraint.cpp"
      ],
      [
        "Python",
        "Python/lexicographically-smallest-string-after-operations-with-constraint.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3107,
    "Title": "[Minimum Operations to Make Median of Array Equal to K](https://leetcode.com/problems/minimum-operations-to-make-median-of-array-equal-to-k/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-make-median-of-array-equal-to-k.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-make-median-of-array-equal-to-k.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3108,
    "Title": "[Minimum Cost Walk in Weighted Graph](https://leetcode.com/problems/minimum-cost-walk-in-weighted-graph/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-walk-in-weighted-graph.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-walk-in-weighted-graph.py"
      ]
    ],
    "Time": "_O(n + e + q)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3109,
    "Title": "[Find the Index of Permutation](https://leetcode.com/problems/find-the-index-of-permutation/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-index-of-permutation.cpp"
      ],
      [
        "Python",
        "Python/find-the-index-of-permutation.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "🔒, Medium",
    "Tag": "variant of [Count of Smaller Numbers After Self](https://leetcode.com/problems/count-of-smaller-numbers-after-self/)",
    "Note": "BIT, Fenwick Tree, Combinatorics"
  },
  {
    "Index": 3110,
    "Title": "[Score of a String](https://leetcode.com/problems/score-of-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/score-of-a-string.cpp"
      ],
      [
        "Python",
        "Python/score-of-a-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "String"
  },
  {
    "Index": 3111,
    "Title": "[Minimum Rectangles to Cover Points](https://leetcode.com/problems/minimum-rectangles-to-cover-points/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-rectangles-to-cover-points.cpp"
      ],
      [
        "Python",
        "Python/minimum-rectangles-to-cover-points.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3112,
    "Title": "[Minimum Time to Visit Disappearing Nodes](https://leetcode.com/problems/find-the-closest-marked-node/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-time-to-visit-disappearing-nodes.cpp"
      ],
      [
        "Python",
        "Python/minimum-time-to-visit-disappearing-nodes.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "E\\",
    "Difficulty": "* log\\",
    "Tag": "V\\",
    "Note": ")_"
  },
  {
    "Index": 3113,
    "Title": "[Find the Number of Subarrays Where Boundary Elements Are Maximum](https://leetcode.com/problems/find-the-number-of-subarrays-where-boundary-elements-are-maximum/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-number-of-subarrays-where-boundary-elements-are-maximum.cpp"
      ],
      [
        "Python",
        "Python/find-the-number-of-subarrays-where-boundary-elements-are-maximum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3114,
    "Title": "[Latest Time You Can Obtain After Replacing Characters](https://leetcode.com/problems/latest-time-you-can-obtain-after-replacing-characters/)",
    "Solution": [
      [
        "C++",
        "C++/latest-time-you-can-obtain-after-replacing-characters.cpp"
      ],
      [
        "Python",
        "Python/latest-time-you-can-obtain-after-replacing-characters.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "String, Greedy"
  },
  {
    "Index": 3115,
    "Title": "[Maximum Prime Difference](https://leetcode.com/problems/maximum-prime-difference/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-prime-difference.cpp"
      ],
      [
        "Python",
        "Python/maximum-prime-difference.py"
      ]
    ],
    "Time": "_O(r + n)_",
    "Space": "_O(r)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Array, Number Theory, `Linear Sieve of Eratosthenes`"
  },
  {
    "Index": 3116,
    "Title": "[Kth Smallest Amount With Single Denomination Combination](https://leetcode.com/problems/kth-smallest-amount-with-single-denomination-combination/)",
    "Solution": [
      [
        "C++",
        "C++/kth-smallest-amount-with-single-denomination-combination.cpp"
      ],
      [
        "Python",
        "Python/kth-smallest-amount-with-single-denomination-combination.py"
      ]
    ],
    "Time": "_O(n * 2^n *  logk)_",
    "Space": "_O(2^n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Binary Search, Principle of Inclusion and Exclusion, Number Theory"
  },
  {
    "Index": 3117,
    "Title": "[Minimum Sum of Values by Dividing Array](https://leetcode.com/problems/minimum-sum-of-values-by-dividing-array/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-sum-of-values-by-dividing-array.cpp"
      ],
      [
        "Python",
        "Python/minimum-sum-of-values-by-dividing-array.py"
      ]
    ],
    "Time": "_O(n * m * logr)_",
    "Space": "_O(n + logr)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3118,
    "Title": "[Friday Purchase III](https://leetcode.com/problems/friday-purchase-iii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/friday-purchase-iii.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 3119,
    "Title": "[Maximum Number of Potholes That Can Be Fixed](https://leetcode.com/problems/maximum-number-of-potholes-that-can-be-fixed/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-potholes-that-can-be-fixed.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-potholes-that-can-be-fixed.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Sort, Counting Sort, Greedy"
  },
  {
    "Index": 3120,
    "Title": "[Count the Number of Special Characters I](https://leetcode.com/problems/count-the-number-of-special-characters-i/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-number-of-special-characters-i.cpp"
      ],
      [
        "Python",
        "Python/count-the-number-of-special-characters-i.py"
      ]
    ],
    "Time": "_O(n + 26)_",
    "Space": "_O(26)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3121,
    "Title": "[Count the Number of Special Characters II](https://leetcode.com/problems/count-the-number-of-special-characters-ii/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-number-of-special-characters-ii.cpp"
      ],
      [
        "Python",
        "Python/count-the-number-of-special-characters-ii.py"
      ]
    ],
    "Time": "_O(n + 26)_",
    "Space": "_O(26)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3122,
    "Title": "[Minimum Number of Operations to Satisfy Conditions](https://leetcode.com/problems/minimum-number-of-operations-to-satisfy-conditions/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-operations-to-satisfy-conditions.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-operations-to-satisfy-conditions.py"
      ]
    ],
    "Time": "_O(n * (m + 10))_",
    "Space": "_O(10)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3123,
    "Title": "[Find Edges in Shortest Paths](https://leetcode.com/problems/find-edges-in-shortest-paths/)",
    "Solution": [
      [
        "C++",
        "C++/find-edges-in-shortest-paths.cpp"
      ],
      [
        "Python",
        "Python/find-edges-in-shortest-paths.py"
      ]
    ],
    "Time": "_O(\\",
    "Space": "E\\",
    "Difficulty": "* log\\",
    "Tag": "V\\",
    "Note": ")_"
  },
  {
    "Index": 3124,
    "Title": "[Find Longest Calls](https://leetcode.com/problems/find-longest-calls/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-longest-calls.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Window Function"
  },
  {
    "Index": 3125,
    "Title": "[Maximum Number That Makes Result of Bitwise AND Zero](https://leetcode.com/problems/maximum-number-that-makes-result-of-bitwise-and-zero/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-that-makes-result-of-bitwise-and-zero.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-that-makes-result-of-bitwise-and-zero.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 3126,
    "Title": "[Server Utilization Time](https://leetcode.com/problems/server-utilization-time/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/server-utilization-time.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Window Function"
  },
  {
    "Index": 3127,
    "Title": "[Make a Square with the Same Color](https://leetcode.com/problems/make-a-square-with-the-same-color/)",
    "Solution": [
      [
        "C++",
        "C++/make-a-square-with-the-same-color.cpp"
      ],
      [
        "Python",
        "Python/make-a-square-with-the-same-color.py"
      ]
    ],
    "Time": "_O((n - w + 1)^2 * w^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3128,
    "Title": "[Right Triangles](https://leetcode.com/problems/right-triangles/)",
    "Solution": [
      [
        "C++",
        "C++/right-triangles.cpp"
      ],
      [
        "Python",
        "Python/right-triangles.py"
      ]
    ],
    "Time": "_O(n * m)_",
    "Space": "_O(min(n, m))_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Array, Combinatorics, Freq Table"
  },
  {
    "Index": 3129,
    "Title": "[Find All Possible Stable Binary Arrays I](https://leetcode.com/problems/find-all-possible-stable-binary-arrays-i/)",
    "Solution": [
      [
        "C++",
        "C++/find-all-possible-stable-binary-arrays-i.cpp"
      ],
      [
        "Python",
        "Python/find-all-possible-stable-binary-arrays-i.py"
      ]
    ],
    "Time": "_O(n * m)_",
    "Space": "_O(n * m)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3130,
    "Title": "[Find All Possible Stable Binary Arrays II](https://leetcode.com/problems/find-all-possible-stable-binary-arrays-ii/)",
    "Solution": [
      [
        "C++",
        "C++/find-all-possible-stable-binary-arrays-ii.cpp"
      ],
      [
        "Python",
        "Python/find-all-possible-stable-binary-arrays-ii.py"
      ]
    ],
    "Time": "_O(n * m)_",
    "Space": "_O(n * m)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3131,
    "Title": "[Find the Integer Added to Array I](https://leetcode.com/problems/find-the-integer-added-to-array-i/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-integer-added-to-array-i.cpp"
      ],
      [
        "Python",
        "Python/find-the-integer-added-to-array-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3132,
    "Title": "[Find the Integer Added to Array II](https://leetcode.com/problems/find-the-integer-added-to-array-ii/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-integer-added-to-array-ii.cpp"
      ],
      [
        "Python",
        "Python/find-the-integer-added-to-array-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3133,
    "Title": "[Minimum Array End](https://leetcode.com/problems/minimum-array-end/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-array-end.cpp"
      ],
      [
        "Python",
        "Python/minimum-array-end.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3134,
    "Title": "[Find the Median of the Uniqueness Array](https://leetcode.com/problems/find-the-median-of-the-uniqueness-array/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-median-of-the-uniqueness-array.cpp"
      ],
      [
        "Python",
        "Python/find-the-median-of-the-uniqueness-array.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Binary Search, Two Pointers, Sliding Window"
  },
  {
    "Index": 3135,
    "Title": "[Equalize Strings by Adding or Removing Characters at Ends](https://leetcode.com/problems/equalize-strings-by-adding-or-removing-characters-at-ends/)",
    "Solution": [
      [
        "C++",
        "C++/equalize-strings-by-adding-or-removing-characters-at-ends.cpp"
      ],
      [
        "Python",
        "Python/equalize-strings-by-adding-or-removing-characters-at-ends.py"
      ]
    ],
    "Time": "_O((n + m) * log(min(n, m)))_",
    "Space": "_O(min(n, m))_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 3136,
    "Title": "[Valid Word](https://leetcode.com/problems/valid-word/)",
    "Solution": [
      [
        "C++",
        "C++/valid-word.cpp"
      ],
      [
        "Python",
        "Python/valid-word.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3137,
    "Title": "[Minimum Number of Operations to Make Word K-Periodic](https://leetcode.com/problems/minimum-number-of-operations-to-make-word-k-periodic/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-operations-to-make-word-k-periodic.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-operations-to-make-word-k-periodic.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3138,
    "Title": "[Minimum Length of Anagram Concatenation](https://leetcode.com/problems/minimum-length-of-anagram-concatenation/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-length-of-anagram-concatenation.cpp"
      ],
      [
        "Python",
        "Python/minimum-length-of-anagram-concatenation.py"
      ]
    ],
    "Time": "_O(sqrt(n) * n + 26 * nlogn)_",
    "Space": "_O(26)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3139,
    "Title": "[Minimum Cost to Equalize Array](https://leetcode.com/problems/minimum-cost-to-equalize-array/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-to-equalize-array.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-to-equalize-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3140,
    "Title": "[Consecutive Available Seats II](https://leetcode.com/problems/consecutive-available-seats-ii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/consecutive-available-seats-ii.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Window Function"
  },
  {
    "Index": 3141,
    "Title": "[Maximum Hamming Distances](https://leetcode.com/problems/maximum-hamming-distances/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-hamming-distances.cpp"
      ],
      [
        "Python",
        "Python/maximum-hamming-distances.py"
      ]
    ],
    "Time": "_O(m * 2^m)_",
    "Space": "_O(2^m)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Bitmasks, BFS, Knapsack DP"
  },
  {
    "Index": 3142,
    "Title": "[Check if Grid Satisfies Conditions](https://leetcode.com/problems/check-if-grid-satisfies-conditions/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-grid-satisfies-conditions.cpp"
      ],
      [
        "Python",
        "Python/check-if-grid-satisfies-conditions.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3143,
    "Title": "[Maximum Points Inside the Square](https://leetcode.com/problems/maximum-points-inside-the-square/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-points-inside-the-square.cpp"
      ],
      [
        "Python",
        "Python/maximum-points-inside-the-square.py"
      ]
    ],
    "Time": "_O(n + 26)_",
    "Space": "_O(26)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3144,
    "Title": "[Minimum Substring Partition of Equal Character Frequency](https://leetcode.com/problems/minimum-substring-partition-of-equal-character-frequency/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-substring-partition-of-equal-character-frequency.cpp"
      ],
      [
        "Python",
        "Python/minimum-substring-partition-of-equal-character-frequency.py"
      ]
    ],
    "Time": "_O(n * (n + 26))_",
    "Space": "_O(n + 26)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3145,
    "Title": "[Find Products of Elements of Big Array](https://leetcode.com/problems/find-products-of-elements-of-big-array/)",
    "Solution": [
      [
        "C++",
        "C++/find-products-of-elements-of-big-array.cpp"
      ],
      [
        "Python",
        "Python/find-products-of-elements-of-big-array.py"
      ]
    ],
    "Time": "_O(q * (logr)^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3146,
    "Title": "[Permutation Difference between Two Strings](https://leetcode.com/problems/permutation-difference-between-two-strings/)",
    "Solution": [
      [
        "C++",
        "C++/permutation-difference-between-two-strings.cpp"
      ],
      [
        "Python",
        "Python/permutation-difference-between-two-strings.py"
      ]
    ],
    "Time": "_O(n + 26)_",
    "Space": "_O(26)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3147,
    "Title": "[Taking Maximum Energy From the Mystic Dungeon](https://leetcode.com/problems/taking-maximum-energy-from-the-mystic-dungeon/)",
    "Solution": [
      [
        "C++",
        "C++/taking-maximum-energy-from-the-mystic-dungeon.cpp"
      ],
      [
        "Python",
        "Python/taking-maximum-energy-from-the-mystic-dungeon.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3148,
    "Title": "[Maximum Difference Score in a Grid](https://leetcode.com/problems/maximum-difference-score-in-a-grid/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-difference-score-in-a-grid.cpp"
      ],
      [
        "Python",
        "Python/maximum-difference-score-in-a-grid.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3149,
    "Title": "[Find the Minimum Cost Array Permutation](https://leetcode.com/problems/find-the-minimum-cost-array-permutation/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-minimum-cost-array-permutation.cpp"
      ],
      [
        "Python",
        "Python/find-the-minimum-cost-array-permutation.py"
      ]
    ],
    "Time": "_O((n-1)^2 * 2^(n-1))_",
    "Space": "_O((n-1) * 2^(n-1))_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3150,
    "Title": "[Invalid Tweets II](https://leetcode.com/problems/invalid-tweets-ii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/invalid-tweets-ii.sql"
      ]
    ],
    "Time": "_O(n * l + nlogn)_",
    "Space": "_O(n * l)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": "String"
  },
  {
    "Index": 3151,
    "Title": "[Special Array I](https://leetcode.com/problems/special-array-i/)",
    "Solution": [
      [
        "C++",
        "C++/special-array-i.cpp"
      ],
      [
        "Python",
        "Python/special-array-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3152,
    "Title": "[Special Array II](https://leetcode.com/problems/special-array-ii/)",
    "Solution": [
      [
        "C++",
        "C++/special-array-ii.cpp"
      ],
      [
        "Python",
        "Python/special-array-ii.py"
      ]
    ],
    "Time": "_O(n + q)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3153,
    "Title": "[Sum of Digit Differences of All Pairs](https://leetcode.com/problems/sum-of-digit-differences-of-all-pairs/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-digit-differences-of-all-pairs.cpp"
      ],
      [
        "Python",
        "Python/sum-of-digit-differences-of-all-pairs.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(10 * logr)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3154,
    "Title": "[Find Number of Ways to Reach the K-th Stair](https://leetcode.com/problems/find-number-of-ways-to-reach-the-k-th-stair/)",
    "Solution": [
      [
        "C++",
        "C++/find-number-of-ways-to-reach-the-k-th-stair.cpp"
      ],
      [
        "Python",
        "Python/find-number-of-ways-to-reach-the-k-th-stair.py"
      ]
    ],
    "Time": "_O(logk)_",
    "Space": "_O(logk)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Combinatorics"
  },
  {
    "Index": 3155,
    "Title": "[Maximum Number of Upgradable Servers](https://leetcode.com/problems/maximum-number-of-upgradable-servers/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-upgradable-servers.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-upgradable-servers.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Math"
  },
  {
    "Index": 3156,
    "Title": "[Employee Task Duration and Concurrent Tasks](https://leetcode.com/problems/employee-task-duration-and-concurrent-tasks/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/employee-task-duration-and-concurrent-tasks.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Line Sweep"
  },
  {
    "Index": 3157,
    "Title": "[Find the Level of Tree with Minimum Sum](https://leetcode.com/problems/find-the-level-of-tree-with-minimum-sum/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-level-of-tree-with-minimum-sum.cpp"
      ],
      [
        "Python",
        "Python/find-the-level-of-tree-with-minimum-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(w)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "BFS"
  },
  {
    "Index": 3158,
    "Title": "[Find the XOR of Numbers Which Appear Twice](https://leetcode.com/problems/find-the-xor-of-numbers-which-appear-twice/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-xor-of-numbers-which-appear-twice.cpp"
      ],
      [
        "Python",
        "Python/find-the-xor-of-numbers-which-appear-twice.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3159,
    "Title": "[Find Occurrences of an Element in an Array](https://leetcode.com/problems/find-occurrences-of-an-element-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/find-occurrences-of-an-element-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/find-occurrences-of-an-element-in-an-array.py"
      ]
    ],
    "Time": "_O(n + q)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3160,
    "Title": "[Find the Number of Distinct Colors Among the Balls](https://leetcode.com/problems/find-the-number-of-distinct-colors-among-the-balls/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-number-of-distinct-colors-among-the-balls.cpp"
      ],
      [
        "Python",
        "Python/find-the-number-of-distinct-colors-among-the-balls.py"
      ]
    ],
    "Time": "_O(q)_",
    "Space": "_O(q)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3161,
    "Title": "[Block Placement Queries](https://leetcode.com/problems/block-placement-queries/)",
    "Solution": [
      [
        "C++",
        "C++/block-placement-queries.cpp"
      ],
      [
        "Python",
        "Python/block-placement-queries.py"
      ]
    ],
    "Time": "_O(qlogq)_",
    "Space": "_O(q)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3162,
    "Title": "[Find the Number of Good Pairs I](https://leetcode.com/problems/find-the-number-of-good-pairs-i/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-number-of-good-pairs-i.cpp"
      ],
      [
        "Python",
        "Python/find-the-number-of-good-pairs-i.py"
      ]
    ],
    "Time": "_O(rlogr + n + m)_",
    "Space": "_O(r)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Brute Force, Number Theory, Freq Table"
  },
  {
    "Index": 3163,
    "Title": "[String Compression III](https://leetcode.com/problems/string-compression-iii/)",
    "Solution": [
      [
        "C++",
        "C++/string-compression-iii.cpp"
      ],
      [
        "Python",
        "Python/string-compression-iii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3164,
    "Title": "[Find the Number of Good Pairs II](https://leetcode.com/problems/find-the-number-of-good-pairs-ii/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-number-of-good-pairs-ii.cpp"
      ],
      [
        "Python",
        "Python/find-the-number-of-good-pairs-ii.py"
      ]
    ],
    "Time": "_O(rlogr + n + m)_",
    "Space": "_O(r)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Number Theory, Freq Table"
  },
  {
    "Index": 3165,
    "Title": "[Maximum Sum of Subsequence With Non-adjacent Elements](https://leetcode.com/problems/maximum-sum-of-subsequence-with-non-adjacent-elements/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-sum-of-subsequence-with-non-adjacent-elements.cpp"
      ],
      [
        "Python",
        "Python/maximum-sum-of-subsequence-with-non-adjacent-elements.py"
      ]
    ],
    "Time": "_O(n + qlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3166,
    "Title": "[Calculate Parking Fees and Duration](https://leetcode.com/problems/calculate-parking-fees-and-duration/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/calculate-parking-fees-and-duration.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 3167,
    "Title": "[Better Compression of String](https://leetcode.com/problems/better-compression-of-string/)",
    "Solution": [
      [
        "C++",
        "C++/better-compression-of-string.cpp"
      ],
      [
        "Python",
        "Python/better-compression-of-string.py"
      ]
    ],
    "Time": "_O(n + 26)_",
    "Space": "_O(26)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 3168,
    "Title": "[Minimum Number of Chairs in a Waiting Room](https://leetcode.com/problems/minimum-number-of-chairs-in-a-waiting-room/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-chairs-in-a-waiting-room.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-chairs-in-a-waiting-room.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3169,
    "Title": "[Count Days Without Meetings](https://leetcode.com/problems/count-days-without-meetings/)",
    "Solution": [
      [
        "C++",
        "C++/count-days-without-meetings.cpp"
      ],
      [
        "Python",
        "Python/count-days-without-meetings.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3170,
    "Title": "[Lexicographically Minimum String After Removing Stars](https://leetcode.com/problems/lexicographically-minimum-string-after-removing-stars/)",
    "Solution": [
      [
        "C++",
        "C++/lexicographically-minimum-string-after-removing-stars.cpp"
      ],
      [
        "Python",
        "Python/lexicographically-minimum-string-after-removing-stars.py"
      ]
    ],
    "Time": "_O(n + 26)_",
    "Space": "_O(n + 26)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Greedy, Hash Table, Stack"
  },
  {
    "Index": 3171,
    "Title": "[Find Subarray With Bitwise OR Closest to K](https://leetcode.com/problems/find-subarray-with-bitwise-or-closest-to-k/)",
    "Solution": [
      [
        "C++",
        "C++/find-subarray-with-bitwise-or-closest-to-k.cpp"
      ],
      [
        "Python",
        "Python/find-subarray-with-bitwise-or-closest-to-k.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(logr)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Find a Value of a Mysterious Function Closest to Target](https://leetcode.com/problems/find-a-value-of-a-mysterious-function-closest-to-target/)"
  },
  {
    "Index": 3172,
    "Title": "[Second Day Verification](https://leetcode.com/problems/second-day-verification/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/second-day-verification.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 3173,
    "Title": "[Bitwise OR of Adjacent Elements](https://leetcode.com/problems/bitwise-or-of-adjacent-elements/)",
    "Solution": [
      [
        "C++",
        "C++/bitwise-or-of-adjacent-elements.cpp"
      ],
      [
        "Python",
        "Python/bitwise-or-of-adjacent-elements.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒"
  },
  {
    "Index": 3174,
    "Title": "[Clear Digits](https://leetcode.com/problems/clear-digits/)",
    "Solution": [
      [
        "C++",
        "C++/clear-digits.cpp"
      ],
      [
        "Python",
        "Python/clear-digits.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3175,
    "Title": "[Find The First Player to win K Games in a Row](https://leetcode.com/problems/find-the-first-player-to-win-k-games-in-a-row/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-first-player-to-win-k-games-in-a-row.cpp"
      ],
      [
        "Python",
        "Python/find-the-first-player-to-win-k-games-in-a-row.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3176,
    "Title": "[Find the Maximum Length of a Good Subsequence I](https://leetcode.com/problems/find-the-maximum-length-of-a-good-subsequence-i/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-maximum-length-of-a-good-subsequence-i.cpp"
      ],
      [
        "Python",
        "Python/find-the-maximum-length-of-a-good-subsequence-i.py"
      ]
    ],
    "Time": "_O(n * k)_",
    "Space": "_O(n * k)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3177,
    "Title": "[Find the Maximum Length of a Good Subsequence II](https://leetcode.com/problems/find-the-maximum-length-of-a-good-subsequence-ii/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-maximum-length-of-a-good-subsequence-ii.cpp"
      ],
      [
        "Python",
        "Python/find-the-maximum-length-of-a-good-subsequence-ii.py"
      ]
    ],
    "Time": "_O(n * k)_",
    "Space": "_O(n * k)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3178,
    "Title": "[Find the Child Who Has the Ball After K Seconds](https://leetcode.com/problems/find-the-child-who-has-the-ball-after-k-seconds/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-child-who-has-the-ball-after-k-seconds.cpp"
      ],
      [
        "Python",
        "Python/find-the-child-who-has-the-ball-after-k-seconds.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Math"
  },
  {
    "Index": 3179,
    "Title": "[Find the N-th Value After K Seconds](https://leetcode.com/problems/find-the-n-th-value-after-k-seconds/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-n-th-value-after-k-seconds.cpp"
      ],
      [
        "Python",
        "Python/find-the-n-th-value-after-k-seconds.py"
      ]
    ],
    "Time": "_O(n + k)_",
    "Space": "_O(n + k)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Prefix Sum, Combinatorics"
  },
  {
    "Index": 3180,
    "Title": "[Maximum Total Reward Using Operations I](https://leetcode.com/problems/maximum-total-reward-using-operations-i/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-total-reward-using-operations-i.cpp"
      ],
      [
        "Python",
        "Python/maximum-total-reward-using-operations-i.py"
      ]
    ],
    "Time": "_O(n * k)_",
    "Space": "_O(n * k)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3181,
    "Title": "[Maximum Total Reward Using Operations II](https://leetcode.com/problems/maximum-total-reward-using-operations-ii/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-total-reward-using-operations-ii.cpp"
      ],
      [
        "Python",
        "Python/maximum-total-reward-using-operations-ii.py"
      ]
    ],
    "Time": "_O(n * k)_",
    "Space": "_O(n * k)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3182,
    "Title": "[Find Top Scoring Students](https://leetcode.com/problems/find-top-scoring-students/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-top-scoring-students.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 3183,
    "Title": "[The Number of Ways to Make the Sum](https://leetcode.com/problems/the-number-of-ways-to-make-the-sum/)",
    "Solution": [
      [
        "C++",
        "C++/the-number-of-ways-to-make-the-sum.cpp"
      ],
      [
        "Python",
        "Python/the-number-of-ways-to-make-the-sum.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Math, DP"
  },
  {
    "Index": 3184,
    "Title": "[Count Pairs That Form a Complete Day I](https://leetcode.com/problems/count-pairs-that-form-a-complete-day-i/)",
    "Solution": [
      [
        "C++",
        "C++/count-pairs-that-form-a-complete-day-i.cpp"
      ],
      [
        "Python",
        "Python/count-pairs-that-form-a-complete-day-i.py"
      ]
    ],
    "Time": "_O(n + 24)_",
    "Space": "_O(24)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3185,
    "Title": "[Count Pairs That Form a Complete Day II](https://leetcode.com/problems/count-pairs-that-form-a-complete-day-ii/)",
    "Solution": [
      [
        "C++",
        "C++/count-pairs-that-form-a-complete-day-ii.cpp"
      ],
      [
        "Python",
        "Python/count-pairs-that-form-a-complete-day-ii.py"
      ]
    ],
    "Time": "_O(n + 24)_",
    "Space": "_O(24)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3186,
    "Title": "[Maximum Total Damage With Spell Casting](https://leetcode.com/problems/maximum-total-damage-with-spell-casting/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-total-damage-with-spell-casting.cpp"
      ],
      [
        "Python",
        "Python/maximum-total-damage-with-spell-casting.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3187,
    "Title": "[Peaks in Array](https://leetcode.com/problems/peaks-in-array/)",
    "Solution": [
      [
        "C++",
        "C++/peaks-in-array.cpp"
      ],
      [
        "Python",
        "Python/peaks-in-array.py"
      ]
    ],
    "Time": "_O(n + qlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3188,
    "Title": "[Find Top Scoring Students II](https://leetcode.com/problems/find-top-scoring-students-ii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-top-scoring-students-ii.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 3189,
    "Title": "[Minimum Moves to Get a Peaceful Board](https://leetcode.com/problems/minimum-moves-to-get-a-peaceful-board/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-moves-to-get-a-peaceful-board.cpp"
      ],
      [
        "Python",
        "Python/minimum-moves-to-get-a-peaceful-board.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒, variant of [Distribute Coins in Binary Tree](https://leetcode.com/problems/distribute-coins-in-binary-tree/)"
  },
  {
    "Index": 3190,
    "Title": "[Find Minimum Operations to Make All Elements Divisible by Three](https://leetcode.com/problems/find-minimum-operations-to-make-all-elements-divisible-by-three/)",
    "Solution": [
      [
        "C++",
        "C++/find-minimum-operations-to-make-all-elements-divisible-by-three.cpp"
      ],
      [
        "Python",
        "Python/find-minimum-operations-to-make-all-elements-divisible-by-three.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Math"
  },
  {
    "Index": 3191,
    "Title": "[Minimum Operations to Make Binary Array Elements Equal to One I](https://leetcode.com/problems/minimum-operations-to-make-binary-array-elements-equal-to-one-i/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-make-binary-array-elements-equal-to-one-i.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-make-binary-array-elements-equal-to-one-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3192,
    "Title": "[Minimum Operations to Make Binary Array Elements Equal to One II](https://leetcode.com/problems/minimum-operations-to-make-binary-array-elements-equal-to-one-ii/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-make-binary-array-elements-equal-to-one-ii.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-make-binary-array-elements-equal-to-one-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3193,
    "Title": "[Count the Number of Inversions](https://leetcode.com/problems/count-the-number-of-inversions/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-number-of-inversions.cpp"
      ],
      [
        "Python",
        "Python/count-the-number-of-inversions.py"
      ]
    ],
    "Time": "_O(n * k)_",
    "Space": "_O(n + k)_",
    "Difficulty": "Hard",
    "Tag": "variant of [K Inverse Pairs Array](https://leetcode.com/problems/k-inverse-pairs-array/)"
  },
  {
    "Index": 3194,
    "Title": "[Minimum Average of Smallest and Largest Elements](https://leetcode.com/problems/minimum-average-of-smallest-and-largest-elements/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-average-of-smallest-and-largest-elements.cpp"
      ],
      [
        "Python",
        "Python/minimum-average-of-smallest-and-largest-elements.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3195,
    "Title": "[Find the Minimum Area to Cover All Ones I](https://leetcode.com/problems/find-the-minimum-area-to-cover-all-ones-i/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-minimum-area-to-cover-all-ones-i.cpp"
      ],
      [
        "Python",
        "Python/find-the-minimum-area-to-cover-all-ones-i.py"
      ]
    ],
    "Time": "_O(n * m)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3196,
    "Title": "[Maximize Total Cost of Alternating Subarrays](https://leetcode.com/problems/maximize-total-cost-of-alternating-subarrays/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-total-cost-of-alternating-subarrays.cpp"
      ],
      [
        "Python",
        "Python/maximize-total-cost-of-alternating-subarrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3197,
    "Title": "[Find the Minimum Area to Cover All Ones II](https://leetcode.com/problems/find-the-minimum-area-to-cover-all-ones-ii/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-minimum-area-to-cover-all-ones-ii.cpp"
      ],
      [
        "Python",
        "Python/find-the-minimum-area-to-cover-all-ones-ii.py"
      ]
    ],
    "Time": "_O(max(n, m)^2)_",
    "Space": "_O(max(n, m)^2)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3198,
    "Title": "[Find Cities in Each State](https://leetcode.com/problems/find-cities-in-each-state/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-cities-in-each-state.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 3199,
    "Title": "[Count Triplets with Even XOR Set Bits I](https://leetcode.com/problems/count-triplets-with-even-xor-set-bits-i/)",
    "Solution": [
      [
        "C++",
        "C++/count-triplets-with-even-xor-set-bits-i.cpp"
      ],
      [
        "Python",
        "Python/count-triplets-with-even-xor-set-bits-i.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒"
  },
  {
    "Index": 3200,
    "Title": "[Maximum Height of a Triangle](https://leetcode.com/problems/maximum-height-of-a-triangle/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-height-of-a-triangle.cpp"
      ],
      [
        "Python",
        "Python/maximum-height-of-a-triangle.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Simulation, Math"
  },
  {
    "Index": 3201,
    "Title": "[Find the Maximum Length of Valid Subsequence I](https://leetcode.com/problems/find-the-maximum-length-of-valid-subsequence-i/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-maximum-length-of-valid-subsequence-i.cpp"
      ],
      [
        "Python",
        "Python/find-the-maximum-length-of-valid-subsequence-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3202,
    "Title": "[Find the Maximum Length of Valid Subsequence II](https://leetcode.com/problems/find-the-maximum-length-of-valid-subsequence-ii/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-maximum-length-of-valid-subsequence-ii.cpp"
      ],
      [
        "Python",
        "Python/find-the-maximum-length-of-valid-subsequence-ii.py"
      ]
    ],
    "Time": "_O(n * k)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3203,
    "Title": "[Find Minimum Diameter After Merging Two Trees](https://leetcode.com/problems/find-minimum-diameter-after-merging-two-trees/)",
    "Solution": [
      [
        "C++",
        "C++/find-minimum-diameter-after-merging-two-trees.cpp"
      ],
      [
        "Python",
        "Python/find-minimum-diameter-after-merging-two-trees.py"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(n + m)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Tree Diameter](https://leetcode.com/problems/tree-diameter/)",
    "Note": "DFS, BFS, Tree DP, Tree Diameter"
  },
  {
    "Index": 3204,
    "Title": "[Bitwise User Permissions Analysis](https://leetcode.com/problems/bitwise-user-permissions-analysis/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/bitwise-user-permissions-analysis.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 3205,
    "Title": "[Maximum Array Hopping Score I](https://leetcode.com/problems/maximum-array-hopping-score-i/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-array-hopping-score-i.cpp"
      ],
      [
        "Python",
        "Python/maximum-array-hopping-score-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "DP, Prefix Sum, Greedy"
  },
  {
    "Index": 3206,
    "Title": "[Alternating Groups I](https://leetcode.com/problems/alternating-groups-i/)",
    "Solution": [
      [
        "C++",
        "C++/alternating-groups-i.cpp"
      ],
      [
        "Python",
        "Python/alternating-groups-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3207,
    "Title": "[Maximum Points After Enemy Battles](https://leetcode.com/problems/maximum-points-after-enemy-battles/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-points-after-enemy-battles.cpp"
      ],
      [
        "Python",
        "Python/maximum-points-after-enemy-battles.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Greedy"
  },
  {
    "Index": 3208,
    "Title": "[Alternating Groups II](https://leetcode.com/problems/alternating-groups-ii/)",
    "Solution": [
      [
        "C++",
        "C++/alternating-groups-ii.cpp"
      ],
      [
        "Python",
        "Python/alternating-groups-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3209,
    "Title": "[Number of Subarrays With AND Value of K](https://leetcode.com/problems/number-of-subarrays-with-and-value-of-k/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-subarrays-with-and-value-of-k.cpp"
      ],
      [
        "Python",
        "Python/number-of-subarrays-with-and-value-of-k.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(logr)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Find Subarray With Bitwise OR Closest to K](https://leetcode.com/problems/find-subarray-with-bitwise-or-closest-to-k/)"
  },
  {
    "Index": 3210,
    "Title": "[Find the Encrypted String](https://leetcode.com/problems/find-the-encrypted-string/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-encrypted-string.cpp"
      ],
      [
        "Python",
        "Python/find-the-encrypted-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3211,
    "Title": "[Generate Binary Strings Without Adjacent Zeros](https://leetcode.com/problems/generate-binary-strings-without-adjacent-zeros/)",
    "Solution": [
      [
        "C++",
        "C++/generate-binary-strings-without-adjacent-zeros.cpp"
      ],
      [
        "Python",
        "Python/generate-binary-strings-without-adjacent-zeros.py"
      ]
    ],
    "Time": "_O(n * 2^n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3212,
    "Title": "[Count Submatrices With Equal Frequency of X and Y](https://leetcode.com/problems/count-submatrices-with-equal-frequency-of-x-and-y/)",
    "Solution": [
      [
        "C++",
        "C++/count-submatrices-with-equal-frequency-of-x-and-y.cpp"
      ],
      [
        "Python",
        "Python/count-submatrices-with-equal-frequency-of-x-and-y.py"
      ]
    ],
    "Time": "_O(n * m)_",
    "Space": "_O(n * m)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3213,
    "Title": "[Construct String with Minimum Cost](https://leetcode.com/problems/construct-string-with-minimum-cost/)",
    "Solution": [
      [
        "C++",
        "C++/construct-string-with-minimum-cost.cpp"
      ],
      [
        "Python",
        "Python/construct-string-with-minimum-cost.py"
      ]
    ],
    "Time": "_O(n^2 + w * l)_",
    "Space": "_O(t)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3214,
    "Title": "[Year on Year Growth Rate](https://leetcode.com/problems/year-on-year-growth-rate/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/year-on-year-growth-rate.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Window Function"
  },
  {
    "Index": 3215,
    "Title": "[Count Triplets with Even XOR Set Bits II](https://leetcode.com/problems/count-triplets-with-even-xor-set-bits-ii/)",
    "Solution": [
      [
        "C++",
        "C++/count-triplets-with-even-xor-set-bits-ii.cpp"
      ],
      [
        "Python",
        "Python/count-triplets-with-even-xor-set-bits-ii.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 3216,
    "Title": "[Lexicographically Smallest String After a Swap](https://leetcode.com/problems/lexicographically-smallest-string-after-a-swap/)",
    "Solution": [
      [
        "C++",
        "C++/lexicographically-smallest-string-after-a-swap.cpp"
      ],
      [
        "Python",
        "Python/lexicographically-smallest-string-after-a-swap.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Greedy"
  },
  {
    "Index": 3217,
    "Title": "[Delete Nodes From Linked List Present in Array](https://leetcode.com/problems/delete-nodes-from-linked-list-present-in-array/)",
    "Solution": [
      [
        "C++",
        "C++/delete-nodes-from-linked-list-present-in-array.cpp"
      ],
      [
        "Python",
        "Python/delete-nodes-from-linked-list-present-in-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(m)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3218,
    "Title": "[Minimum Cost for Cutting Cake I](https://leetcode.com/problems/minimum-cost-for-cutting-cake-i/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-for-cutting-cake-i.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-for-cutting-cake-i.py"
      ]
    ],
    "Time": "_O(mlogm + nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Memoization, Greedy"
  },
  {
    "Index": 3219,
    "Title": "[Minimum Cost for Cutting Cake II](https://leetcode.com/problems/minimum-cost-for-cutting-cake-ii/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-for-cutting-cake-ii.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-for-cutting-cake-ii.py"
      ]
    ],
    "Time": "_O(mlogm + nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Greedy"
  },
  {
    "Index": 3220,
    "Title": "[Odd and Even Transactions](https://leetcode.com/problems/odd-and-even-transactions/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/odd-and-even-transactions.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": 0
  },
  {
    "Index": 3221,
    "Title": "[Maximum Array Hopping Score II](https://leetcode.com/problems/maximum-array-hopping-score-ii/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-array-hopping-score-ii.cpp"
      ],
      [
        "Python",
        "Python/maximum-array-hopping-score-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Prefix Sum, Greedy"
  },
  {
    "Index": 3222,
    "Title": "[Find the Winning Player in Coin Game](https://leetcode.com/problems/find-the-winning-player-in-coin-game/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-winning-player-in-coin-game.cpp"
      ],
      [
        "Python",
        "Python/find-the-winning-player-in-coin-game.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Math"
  },
  {
    "Index": 3223,
    "Title": "[Minimum Length of String After Operations](https://leetcode.com/problems/minimum-length-of-string-after-operations/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-length-of-string-after-operations.cpp"
      ],
      [
        "Python",
        "Python/minimum-length-of-string-after-operations.py"
      ]
    ],
    "Time": "_O(n + 26)_",
    "Space": "_O(26)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3224,
    "Title": "[Minimum Array Changes to Make Differences Equal](https://leetcode.com/problems/minimum-array-changes-to-make-differences-equal/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-array-changes-to-make-differences-equal.cpp"
      ],
      [
        "Python",
        "Python/minimum-array-changes-to-make-differences-equal.py"
      ]
    ],
    "Time": "_O(n + k)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3225,
    "Title": "[Maximum Score From Grid Operations](https://leetcode.com/problems/maximum-score-from-grid-operations/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-score-from-grid-operations.cpp"
      ],
      [
        "Python",
        "Python/maximum-score-from-grid-operations.py"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3226,
    "Title": "[Number of Bit Changes to Make Two Integers Equal](https://leetcode.com/problems/number-of-bit-changes-to-make-two-integers-equal/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-bit-changes-to-make-two-integers-equal.cpp"
      ],
      [
        "Python",
        "Python/number-of-bit-changes-to-make-two-integers-equal.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3227,
    "Title": "[Vowels Game in a String](https://leetcode.com/problems/vowels-game-in-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/vowels-game-in-a-string.cpp"
      ],
      [
        "Python",
        "Python/vowels-game-in-a-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Math"
  },
  {
    "Index": 3228,
    "Title": "[Maximum Number of Operations to Move Ones to the End](https://leetcode.com/problems/maximum-number-of-operations-to-move-ones-to-the-end/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-operations-to-move-ones-to-the-end.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-operations-to-move-ones-to-the-end.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Greedy"
  },
  {
    "Index": 3229,
    "Title": "[Minimum Operations to Make Array Equal to Target](https://leetcode.com/problems/minimum-operations-to-make-array-equal-to-target/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-make-array-equal-to-target.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-make-array-equal-to-target.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": "variant of [Minimum Number of Increments on Subarrays to Form a Target Array](https://leetcode.com/problems/minimum-number-of-increments-on-subarrays-to-form-a-target-array/)",
    "Note": "Greedy"
  },
  {
    "Index": 3230,
    "Title": "[Customer Purchasing Behavior Analysis](https://leetcode.com/problems/customer-purchasing-behavior-analysis/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/customer-purchasing-behavior-analysis.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Window Function"
  },
  {
    "Index": 3231,
    "Title": "[Minimum Number of Increasing Subsequence to Be Removed](https://leetcode.com/problems/minimum-number-of-increasing-subsequence-to-be-removed/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-increasing-subsequence-to-be-removed.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-increasing-subsequence-to-be-removed.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒, variant of [Longest Increasing Subsequence](https://leetcode.com/problems/longest-increasing-subsequence/)"
  },
  {
    "Index": 3232,
    "Title": "[Find if Digit Game Can Be Won](https://leetcode.com/problems/find-if-digit-game-can-be-won/)",
    "Solution": [
      [
        "C++",
        "C++/find-if-digit-game-can-be-won.cpp"
      ],
      [
        "Python",
        "Python/find-if-digit-game-can-be-won.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Brute Force, Game Theory"
  },
  {
    "Index": 3233,
    "Title": "[Find the Count of Numbers Which Are Not Special](https://leetcode.com/problems/find-the-count-of-numbers-which-are-not-special/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-count-of-numbers-which-are-not-special.cpp"
      ],
      [
        "Python",
        "Python/find-the-count-of-numbers-which-are-not-special.py"
      ]
    ],
    "Time": "precompute: _O(sqrt(r))_<br>runtime: _O(logr)_",
    "Space": "_O(sqrt(r))_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Number Theory, `Linear Sieve of Eratosthenes`, Binary Search"
  },
  {
    "Index": 3234,
    "Title": "[Count the Number of Substrings With Dominant Ones](https://leetcode.com/problems/count-the-number-of-substrings-with-dominant-ones/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-number-of-substrings-with-dominant-ones.cpp"
      ],
      [
        "Python",
        "Python/count-the-number-of-substrings-with-dominant-ones.py"
      ]
    ],
    "Time": "_O(n^(3/2))_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3235,
    "Title": "[Check if the Rectangle Corner Is Reachable](https://leetcode.com/problems/check-if-the-rectangle-corner-is-reachable/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-the-rectangle-corner-is-reachable.cpp"
      ],
      [
        "Python",
        "Python/check-if-the-rectangle-corner-is-reachable.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Graph, BFS, DFS, Union Find"
  },
  {
    "Index": 3236,
    "Title": "[CEO Subordinate Hierarchy](https://leetcode.com/problems/ceo-subordinate-hierarchy/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/ceo-subordinate-hierarchy.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Recursive CTE, BFS"
  },
  {
    "Index": 3237,
    "Title": "[Alt and Tab Simulation](https://leetcode.com/problems/alt-and-tab-simulation/)",
    "Solution": [
      [
        "C++",
        "C++/alt-and-tab-simulation.cpp"
      ],
      [
        "Python",
        "Python/alt-and-tab-simulation.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 3238,
    "Title": "[Find the Number of Winning Players](https://leetcode.com/problems/find-the-number-of-winning-players/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-number-of-winning-players.cpp"
      ],
      [
        "Python",
        "Python/find-the-number-of-winning-players.py"
      ]
    ],
    "Time": "_O(p)_",
    "Space": "_O(min(n * c, p)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3239,
    "Title": "[Minimum Number of Flips to Make Binary Grid Palindromic I](https://leetcode.com/problems/minimum-number-of-flips-to-make-binary-grid-palindromic-i/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-flips-to-make-binary-grid-palindromic-i.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-flips-to-make-binary-grid-palindromic-i.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3240,
    "Title": "[Minimum Number of Flips to Make Binary Grid Palindromic II](https://leetcode.com/problems/minimum-number-of-flips-to-make-binary-grid-palindromic-ii/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-flips-to-make-binary-grid-palindromic-ii.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-flips-to-make-binary-grid-palindromic-ii.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3241,
    "Title": "[Time Taken to Mark All Nodes](https://leetcode.com/problems/time-taken-to-mark-all-nodes/)",
    "Solution": [
      [
        "C++",
        "C++/time-taken-to-mark-all-nodes.cpp"
      ],
      [
        "Python",
        "Python/time-taken-to-mark-all-nodes.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3242,
    "Title": "[Design Neighbor Sum Service](https://leetcode.com/problems/design-neighbor-sum-service/)",
    "Solution": [
      [
        "C++",
        "C++/design-neighbor-sum-service.cpp"
      ],
      [
        "Python",
        "Python/design-neighbor-sum-service.py"
      ]
    ],
    "Time": "ctor: _O(n^2)_<br>adjacentSum: _O(1)_<br>diagonalSum: _O(1)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3243,
    "Title": "[Shortest Distance After Road Addition Queries I](https://leetcode.com/problems/shortest-distance-after-road-addition-queries-i/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-distance-after-road-addition-queries-i.cpp"
      ],
      [
        "Python",
        "Python/shortest-distance-after-road-addition-queries-i.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Graph, `Dijkstra's Algorithm`, BFS"
  },
  {
    "Index": 3244,
    "Title": "[Shortest Distance After Road Addition Queries II](https://leetcode.com/problems/shortest-distance-after-road-addition-queries-ii/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-distance-after-road-addition-queries-ii.cpp"
      ],
      [
        "Python",
        "Python/shortest-distance-after-road-addition-queries-ii.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Graph, BST, Sorted List"
  },
  {
    "Index": 3245,
    "Title": "[Alternating Groups III](https://leetcode.com/problems/alternating-groups-iii/)",
    "Solution": [
      [
        "C++",
        "C++/alternating-groups-iii.cpp"
      ],
      [
        "Python",
        "Python/alternating-groups-iii.py"
      ]
    ],
    "Time": "_O(nlogn + qlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3246,
    "Title": "[Premier League Table Ranking](https://leetcode.com/problems/premier-league-table-ranking/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/premier-league-table-ranking.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": "Window Function"
  },
  {
    "Index": 3247,
    "Title": "[Number of Subsequences with Odd Sum](https://leetcode.com/problems/number-of-subsequences-with-odd-sum/)",
    "Solution": [
      [
        "C++",
        "C++/number-of-subsequences-with-odd-sum.cpp"
      ],
      [
        "Python",
        "Python/number-of-subsequences-with-odd-sum.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Combinatorics, Fast Exponentiation, DP"
  },
  {
    "Index": 3248,
    "Title": "[Snake in Matrix](https://leetcode.com/problems/snake-in-matrix/)",
    "Solution": [
      [
        "C++",
        "C++/snake-in-matrix.cpp"
      ],
      [
        "Python",
        "Python/snake-in-matrix.py"
      ]
    ],
    "Time": "_O(c)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3249,
    "Title": "[Count the Number of Good Nodes](https://leetcode.com/problems/count-the-number-of-good-nodes/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-number-of-good-nodes.cpp"
      ],
      [
        "Python",
        "Python/count-the-number-of-good-nodes.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(h)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS"
  },
  {
    "Index": 3250,
    "Title": "[Find the Count of Monotonic Pairs I](https://leetcode.com/problems/find-the-count-of-monotonic-pairs-i/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-count-of-monotonic-pairs-i.cpp"
      ],
      [
        "Python",
        "Python/find-the-count-of-monotonic-pairs-i.py"
      ]
    ],
    "Time": "_O(n + r)_",
    "Space": "_O(n + r)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Combinatorics, Stars and Bars, DP, Prefix Sum"
  },
  {
    "Index": 3251,
    "Title": "[Find the Count of Monotonic Pairs II](https://leetcode.com/problems/find-the-count-of-monotonic-pairs-ii/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-count-of-monotonic-pairs-ii.cpp"
      ],
      [
        "Python",
        "Python/find-the-count-of-monotonic-pairs-ii.py"
      ]
    ],
    "Time": "_O(n + r)_",
    "Space": "_O(n + r)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Combinatorics, Stars and Bars, DP, Prefix Sum"
  },
  {
    "Index": 3252,
    "Title": "[Premier League Table Ranking II](https://leetcode.com/problems/premier-league-table-ranking-ii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/premier-league-table-ranking-ii.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Window Function"
  },
  {
    "Index": 3253,
    "Title": "[Construct String with Minimum Cost (Easy)](https://leetcode.com/problems/construct-string-with-minimum-cost-easy/)",
    "Solution": [
      [
        "C++",
        "C++/construct-string-with-minimum-cost-easy.cpp"
      ],
      [
        "Python",
        "Python/construct-string-with-minimum-cost-easy.py"
      ]
    ],
    "Time": "_O(n * w * l)_",
    "Space": "_O(l)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 3254,
    "Title": "[Find the Power of K-Size Subarrays I](https://leetcode.com/problems/find-the-power-of-k-size-subarrays-i/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-power-of-k-size-subarrays-i.cpp"
      ],
      [
        "Python",
        "Python/find-the-power-of-k-size-subarrays-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3255,
    "Title": "[Find the Power of K-Size Subarrays II](https://leetcode.com/problems/find-the-power-of-k-size-subarrays-ii/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-power-of-k-size-subarrays-ii.cpp"
      ],
      [
        "Python",
        "Python/find-the-power-of-k-size-subarrays-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3256,
    "Title": "[Maximum Value Sum by Placing Three Rooks I](https://leetcode.com/problems/maximum-value-sum-by-placing-three-rooks-i/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-value-sum-by-placing-three-rooks-i.cpp"
      ],
      [
        "Python",
        "Python/maximum-value-sum-by-placing-three-rooks-i.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3257,
    "Title": "[Maximum Value Sum by Placing Three Rooks II](https://leetcode.com/problems/maximum-value-sum-by-placing-three-rooks-ii/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-value-sum-by-placing-three-rooks-ii.cpp"
      ],
      [
        "Python",
        "Python/maximum-value-sum-by-placing-three-rooks-ii.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m + n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3258,
    "Title": "[Count Substrings That Satisfy K-Constraint I](https://leetcode.com/problems/count-substrings-that-satisfy-k-constraint-i/)",
    "Solution": [
      [
        "C++",
        "C++/count-substrings-that-satisfy-k-constraint-i.cpp"
      ],
      [
        "Python",
        "Python/count-substrings-that-satisfy-k-constraint-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3259,
    "Title": "[Maximum Energy Boost From Two Drinks](https://leetcode.com/problems/maximum-energy-boost-from-two-drinks/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-energy-boost-from-two-drinks.cpp"
      ],
      [
        "Python",
        "Python/maximum-energy-boost-from-two-drinks.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3260,
    "Title": "[Find the Largest Palindrome Divisible by K](https://leetcode.com/problems/find-the-largest-palindrome-divisible-by-k/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-largest-palindrome-divisible-by-k.cpp"
      ],
      [
        "Python",
        "Python/find-the-largest-palindrome-divisible-by-k.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "String, Constructive Algorithms, Math"
  },
  {
    "Index": 3261,
    "Title": "[Count Substrings That Satisfy K-Constraint II](https://leetcode.com/problems/count-substrings-that-satisfy-k-constraint-ii/)",
    "Solution": [
      [
        "C++",
        "C++/count-substrings-that-satisfy-k-constraint-ii.cpp"
      ],
      [
        "Python",
        "Python/count-substrings-that-satisfy-k-constraint-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3262,
    "Title": "[Find Overlapping Shifts](https://leetcode.com/problems/find-overlapping-shifts/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-overlapping-shifts.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Line Sweep"
  },
  {
    "Index": 3263,
    "Title": "[Convert Doubly Linked List to Array I](https://leetcode.com/problems/convert-doubly-linked-list-to-array-i/)",
    "Solution": [
      [
        "C++",
        "C++/convert-doubly-linked-list-to-array-i.cpp"
      ],
      [
        "Python",
        "Python/convert-doubly-linked-list-to-array-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒"
  },
  {
    "Index": 3264,
    "Title": "[Final Array State After K Multiplication Operations I](https://leetcode.com/problems/final-array-state-after-k-multiplication-operations-i/)",
    "Solution": [
      [
        "C++",
        "C++/final-array-state-after-k-multiplication-operations-i.cpp"
      ],
      [
        "Python",
        "Python/final-array-state-after-k-multiplication-operations-i.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3265,
    "Title": "[Count Almost Equal Pairs I](https://leetcode.com/problems/count-almost-equal-pairs-i/)",
    "Solution": [
      [
        "C++",
        "C++/count-almost-equal-pairs-i.cpp"
      ],
      [
        "Python",
        "Python/count-almost-equal-pairs-i.py"
      ]
    ],
    "Time": "_O(n * l^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Freq Table, Combinatorics, Graph, BFS"
  },
  {
    "Index": 3266,
    "Title": "[Final Array State After K Multiplication Operations II](https://leetcode.com/problems/final-array-state-after-k-multiplication-operations-ii/)",
    "Solution": [
      [
        "C++",
        "C++/final-array-state-after-k-multiplication-operations-ii.cpp"
      ],
      [
        "Python",
        "Python/final-array-state-after-k-multiplication-operations-ii.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3267,
    "Title": "[Count Almost Equal Pairs II](https://leetcode.com/problems/count-almost-equal-pairs-ii/)",
    "Solution": [
      [
        "C++",
        "C++/count-almost-equal-pairs-ii.cpp"
      ],
      [
        "Python",
        "Python/count-almost-equal-pairs-ii.py"
      ]
    ],
    "Time": "_O(n * l^4)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Freq Table, Combinatorics, Graph, BFS"
  },
  {
    "Index": 3268,
    "Title": "[Find Overlapping Shifts II](https://leetcode.com/problems/find-overlapping-shifts-ii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-overlapping-shifts-ii.sql"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Line Sweep, Window Function, Combinatorics"
  },
  {
    "Index": 3269,
    "Title": "[Constructing Two Increasing Arrays](https://leetcode.com/problems/constructing-two-increasing-arrays/)",
    "Solution": [
      [
        "C++",
        "C++/constructing-two-increasing-arrays.cpp"
      ],
      [
        "Python",
        "Python/constructing-two-increasing-arrays.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(min(m, n))_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 3270,
    "Title": "[Find the Key of the Numbers](https://leetcode.com/problems/find-the-key-of-the-numbers/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-key-of-the-numbers.cpp"
      ],
      [
        "Python",
        "Python/find-the-key-of-the-numbers.py"
      ]
    ],
    "Time": "_O(d)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Math"
  },
  {
    "Index": 3271,
    "Title": "[Hash Divided String](https://leetcode.com/problems/hash-divided-string/)",
    "Solution": [
      [
        "C++",
        "C++/hash-divided-string.cpp"
      ],
      [
        "Python",
        "Python/hash-divided-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3272,
    "Title": "[Find the Count of Good Integers](https://leetcode.com/problems/find-the-count-of-good-integers/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-count-of-good-integers.cpp"
      ],
      [
        "Python",
        "Python/find-the-count-of-good-integers.py"
      ]
    ],
    "Time": "_O(n + 10 * 10^((n + 1)/2))_",
    "Space": "_O(n + 10 * (10 * nHr(10, n/2)))_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Combinatorics, Freq Table"
  },
  {
    "Index": 3273,
    "Title": "[Minimum Amount of Damage Dealt to Bob](https://leetcode.com/problems/minimum-amount-of-damage-dealt-to-bob/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-amount-of-damage-dealt-to-bob.cpp"
      ],
      [
        "Python",
        "Python/minimum-amount-of-damage-dealt-to-bob.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3274,
    "Title": "[Check if Two Chessboard Squares Have the Same Color](https://leetcode.com/problems/check-if-two-chessboard-squares-have-the-same-color/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-two-chessboard-squares-have-the-same-color.cpp"
      ],
      [
        "Python",
        "Python/check-if-two-chessboard-squares-have-the-same-color.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Math, Parity"
  },
  {
    "Index": 3275,
    "Title": "[K-th Nearest Obstacle Queries](https://leetcode.com/problems/k-th-nearest-obstacle-queries/)",
    "Solution": [
      [
        "C++",
        "C++/k-th-nearest-obstacle-queries.cpp"
      ],
      [
        "Python",
        "Python/k-th-nearest-obstacle-queries.py"
      ]
    ],
    "Time": "_O(qlogk)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3276,
    "Title": "[Select Cells in Grid With Maximum Score](https://leetcode.com/problems/select-cells-in-grid-with-maximum-score/)",
    "Solution": [
      [
        "C++",
        "C++/select-cells-in-grid-with-maximum-score.cpp"
      ],
      [
        "Python",
        "Python/select-cells-in-grid-with-maximum-score.py"
      ]
    ],
    "Time": "_O(n^2 * max(n, r))_",
    "Space": "_O(n * max(n, r))_",
    "Difficulty": "Hard",
    "Tag": "variant of [Maximum Compatibility Score Sum](https://leetcode.com/problems/maximum-compatibility-score-sum/)",
    "Note": "`Hungarian Weighted Bipartite Matching`, DP, Bitmasks"
  },
  {
    "Index": 3277,
    "Title": "[Maximum XOR Score Subarray Queries](https://leetcode.com/problems/maximum-xor-score-subarray-queries/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-xor-score-subarray-queries.cpp"
      ],
      [
        "Python",
        "Python/maximum-xor-score-subarray-queries.py"
      ]
    ],
    "Time": "_O(n^2 + q)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3278,
    "Title": "[Find Candidates for Data Scientist Position II](https://leetcode.com/problems/find-candidates-for-data-scientist-position-ii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-candidates-for-data-scientist-position-ii.sql"
      ]
    ],
    "Time": "_O(p * s * n + p * nlogn + plogp)_",
    "Space": "_O(p * s * n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Window Function"
  },
  {
    "Index": 3279,
    "Title": "[Maximum Total Area Occupied by Pistons](https://leetcode.com/problems/maximum-total-area-occupied-by-pistons/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-total-area-occupied-by-pistons.cpp"
      ],
      [
        "Python",
        "Python/maximum-total-area-occupied-by-pistons.py"
      ]
    ],
    "Time": "_O(h)_",
    "Space": "_O(h)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 3280,
    "Title": "[Convert Date to Binary](https://leetcode.com/problems/convert-date-to-binary/)",
    "Solution": [
      [
        "C++",
        "C++/convert-date-to-binary.cpp"
      ],
      [
        "Python",
        "Python/convert-date-to-binary.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3281,
    "Title": "[Maximize Score of Numbers in Ranges](https://leetcode.com/problems/maximize-score-of-numbers-in-ranges/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-score-of-numbers-in-ranges.cpp"
      ],
      [
        "Python",
        "Python/maximize-score-of-numbers-in-ranges.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3282,
    "Title": "[Reach End of Array With Max Score](https://leetcode.com/problems/reach-end-of-array-with-max-score/)",
    "Solution": [
      [
        "C++",
        "C++/reach-end-of-array-with-max-score.cpp"
      ],
      [
        "Python",
        "Python/reach-end-of-array-with-max-score.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3283,
    "Title": "[Maximum Number of Moves to Kill All Pawns](https://leetcode.com/problems/maximum-number-of-moves-to-kill-all-pawns/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-moves-to-kill-all-pawns.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-moves-to-kill-all-pawns.py"
      ]
    ],
    "Time": "_O(p^2 * 2^p)_",
    "Space": "_O(p * 2^p)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3284,
    "Title": "[Sum of Consecutive Subarrays](https://leetcode.com/problems/sum-of-consecutive-subarrays/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-consecutive-subarrays.cpp"
      ],
      [
        "Python",
        "Python/sum-of-consecutive-subarrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Combinatorics"
  },
  {
    "Index": 3285,
    "Title": "[Find Indices of Stable Mountains](https://leetcode.com/problems/find-indices-of-stable-mountains/)",
    "Solution": [
      [
        "C++",
        "C++/find-indices-of-stable-mountains.cpp"
      ],
      [
        "Python",
        "Python/find-indices-of-stable-mountains.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3286,
    "Title": "[Find a Safe Walk Through a Grid](https://leetcode.com/problems/find-a-safe-walk-through-a-grid/)",
    "Solution": [
      [
        "C++",
        "C++/find-a-safe-walk-through-a-grid.cpp"
      ],
      [
        "Python",
        "Python/find-a-safe-walk-through-a-grid.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m * n)_",
    "Difficulty": "Medium",
    "Tag": "variant of [Minimum Obstacle Removal to Reach Corner](https://leetcode.com/problems/minimum-obstacle-removal-to-reach-corner/)",
    "Note": "0-1 BFS, Deque"
  },
  {
    "Index": 3287,
    "Title": "[Find the Maximum Sequence Value of Array](https://leetcode.com/problems/find-the-maximum-sequence-value-of-array/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-maximum-sequence-value-of-array.cpp"
      ],
      [
        "Python",
        "Python/find-the-maximum-sequence-value-of-array.py"
      ]
    ],
    "Time": "_O(n * r + r^2)_",
    "Space": "_O(r)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3288,
    "Title": "[Length of the Longest Increasing Path](https://leetcode.com/problems/length-of-the-longest-increasing-path/)",
    "Solution": [
      [
        "C++",
        "C++/length-of-the-longest-increasing-path.cpp"
      ],
      [
        "Python",
        "Python/length-of-the-longest-increasing-path.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3289,
    "Title": "[The Two Sneaky Numbers of Digitville](https://leetcode.com/problems/the-two-sneaky-numbers-of-digitville/)",
    "Solution": [
      [
        "C++",
        "C++/the-two-sneaky-numbers-of-digitville.cpp"
      ],
      [
        "Python",
        "Python/the-two-sneaky-numbers-of-digitville.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3290,
    "Title": "[Maximum Multiplication Score](https://leetcode.com/problems/maximum-multiplication-score/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-multiplication-score.cpp"
      ],
      [
        "Python",
        "Python/maximum-multiplication-score.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3291,
    "Title": "[Minimum Number of Valid Strings to Form Target I](https://leetcode.com/problems/minimum-number-of-valid-strings-to-form-target-i/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-valid-strings-to-form-target-i.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-valid-strings-to-form-target-i.py"
      ]
    ],
    "Time": "_O(n + w * l)_",
    "Space": "_O(n + t)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3292,
    "Title": "[Minimum Number of Valid Strings to Form Target II](https://leetcode.com/problems/minimum-number-of-valid-strings-to-form-target-ii/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-valid-strings-to-form-target-ii.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-valid-strings-to-form-target-ii.py"
      ]
    ],
    "Time": "_O(n + w * l)_",
    "Space": "_O(n + t)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3293,
    "Title": "[Calculate Product Final Price](https://leetcode.com/problems/calculate-product-final-price/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/calculate-product-final-price.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 3294,
    "Title": "[Convert Doubly Linked List to Array II](https://leetcode.com/problems/convert-doubly-linked-list-to-array-ii/)",
    "Solution": [
      [
        "C++",
        "C++/convert-doubly-linked-list-to-array-ii.cpp"
      ],
      [
        "Python",
        "Python/convert-doubly-linked-list-to-array-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 3295,
    "Title": "[Report Spam Message](https://leetcode.com/problems/report-spam-message/)",
    "Solution": [
      [
        "C++",
        "C++/report-spam-message.cpp"
      ],
      [
        "Python",
        "Python/report-spam-message.py"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(m)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3296,
    "Title": "[Minimum Number of Seconds to Make Mountain Height Zero](https://leetcode.com/problems/minimum-number-of-seconds-to-make-mountain-height-zero/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-seconds-to-make-mountain-height-zero.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-seconds-to-make-mountain-height-zero.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3297,
    "Title": "[Count Substrings That Can Be Rearranged to Contain a String I](https://leetcode.com/problems/count-substrings-that-can-be-rearranged-to-contain-a-string-i/)",
    "Solution": [
      [
        "C++",
        "C++/count-substrings-that-can-be-rearranged-to-contain-a-string-i.cpp"
      ],
      [
        "Python",
        "Python/count-substrings-that-can-be-rearranged-to-contain-a-string-i.py"
      ]
    ],
    "Time": "_O(n + 26)_",
    "Space": "_O(26)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3298,
    "Title": "[Count Substrings That Can Be Rearranged to Contain a String II](https://leetcode.com/problems/count-substrings-that-can-be-rearranged-to-contain-a-string-ii/)",
    "Solution": [
      [
        "C++",
        "C++/count-substrings-that-can-be-rearranged-to-contain-a-string-ii.cpp"
      ],
      [
        "Python",
        "Python/count-substrings-that-can-be-rearranged-to-contain-a-string-ii.py"
      ]
    ],
    "Time": "_O(n + 26)_",
    "Space": "_O(26)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3299,
    "Title": "[Sum of Consecutive Subsequences](https://leetcode.com/problems/sum-of-consecutive-subsequences/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-consecutive-subsequences.cpp"
      ],
      [
        "Python",
        "Python/sum-of-consecutive-subsequences.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Combinatorics, Prefix Sum, DP"
  },
  {
    "Index": 3300,
    "Title": "[Minimum Element After Replacement With Digit Sum](https://leetcode.com/problems/minimum-element-after-replacement-with-digit-sum/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-element-after-replacement-with-digit-sum.cpp"
      ],
      [
        "Python",
        "Python/minimum-element-after-replacement-with-digit-sum.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3301,
    "Title": "[Maximize the Total Height of Unique Towers](https://leetcode.com/problems/maximize-the-total-height-of-unique-towers/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-the-total-height-of-unique-towers.cpp"
      ],
      [
        "Python",
        "Python/maximize-the-total-height-of-unique-towers.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3302,
    "Title": "[Find the Lexicographically Smallest Valid Sequence](https://leetcode.com/problems/find-the-lexicographically-smallest-valid-sequence/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-lexicographically-smallest-valid-sequence.cpp"
      ],
      [
        "Python",
        "Python/find-the-lexicographically-smallest-valid-sequence.py"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(m)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3303,
    "Title": "[Find the Occurrence of First Almost Equal Substring](https://leetcode.com/problems/find-the-occurrence-of-first-almost-equal-substring/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-occurrence-of-first-almost-equal-substring.cpp"
      ],
      [
        "Python",
        "Python/find-the-occurrence-of-first-almost-equal-substring.py"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(n + m)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3304,
    "Title": "[Find the K-th Character in String Game I](https://leetcode.com/problems/find-the-k-th-character-in-string-game-i/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-k-th-character-in-string-game-i.cpp"
      ],
      [
        "Python",
        "Python/find-the-k-th-character-in-string-game-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3305,
    "Title": "[Count of Substrings Containing Every Vowel and K Consonants I](https://leetcode.com/problems/count-of-substrings-containing-every-vowel-and-k-consonants-i/)",
    "Solution": [
      [
        "C++",
        "C++/count-of-substrings-containing-every-vowel-and-k-consonants-i.cpp"
      ],
      [
        "Python",
        "Python/count-of-substrings-containing-every-vowel-and-k-consonants-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3306,
    "Title": "[Count of Substrings Containing Every Vowel and K Consonants II](https://leetcode.com/problems/count-of-substrings-containing-every-vowel-and-k-consonants-ii/)",
    "Solution": [
      [
        "C++",
        "C++/count-of-substrings-containing-every-vowel-and-k-consonants-ii.cpp"
      ],
      [
        "Python",
        "Python/count-of-substrings-containing-every-vowel-and-k-consonants-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3307,
    "Title": "[Find the K-th Character in String Game II](https://leetcode.com/problems/find-the-k-th-character-in-string-game-ii/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-k-th-character-in-string-game-ii.cpp"
      ],
      [
        "Python",
        "Python/find-the-k-th-character-in-string-game-ii.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3308,
    "Title": "[Find Top Performing Driver](https://leetcode.com/problems/find-top-performing-driver/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-top-performing-driver.sql"
      ]
    ],
    "Time": "_O(tlogt)_",
    "Space": "_O(t)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Window Function"
  },
  {
    "Index": 3309,
    "Title": "[Maximum Possible Number by Binary Concatenation](https://leetcode.com/problems/maximum-possible-number-by-binary-concatenation/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-possible-number-by-binary-concatenation.cpp"
      ],
      [
        "Python",
        "Python/maximum-possible-number-by-binary-concatenation.py"
      ]
    ],
    "Time": "_O(n * logr * logn)_",
    "Space": "_O(nlogr)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3310,
    "Title": "[Remove Methods From Project](https://leetcode.com/problems/remove-methods-from-project/)",
    "Solution": [
      [
        "C++",
        "C++/remove-methods-from-project.cpp"
      ],
      [
        "Python",
        "Python/remove-methods-from-project.py"
      ]
    ],
    "Time": "_O(n + e)_",
    "Space": "_O(n + e)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Graph, BFS"
  },
  {
    "Index": 3311,
    "Title": "[Construct 2D Grid Matching Graph Layout](https://leetcode.com/problems/construct-2d-grid-matching-graph-layout/)",
    "Solution": [
      [
        "C++",
        "C++/construct-2d-grid-matching-graph-layout.cpp"
      ],
      [
        "Python",
        "Python/construct-2d-grid-matching-graph-layout.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Graph, Constructive Algorithms, BFS"
  },
  {
    "Index": 3312,
    "Title": "[Sorted GCD Pair Queries](https://leetcode.com/problems/sorted-gcd-pair-queries/)",
    "Solution": [
      [
        "C++",
        "C++/sorted-gcd-pair-queries.cpp"
      ],
      [
        "Python",
        "Python/sorted-gcd-pair-queries.py"
      ]
    ],
    "Time": "_O(rlogr + qlogr)_",
    "Space": "_O(r)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Number Theory, Freq Table, Prefix Sum, Binary Search"
  },
  {
    "Index": 3313,
    "Title": "[Find the Last Marked Nodes in Tree](https://leetcode.com/problems/find-the-last-marked-nodes-in-tree/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-last-marked-nodes-in-tree.cpp"
      ],
      [
        "Python",
        "Python/find-the-last-marked-nodes-in-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒, variant of [Time Taken to Mark All Nodes](https://leetcode.com/problems/time-taken-to-mark-all-nodes/)"
  },
  {
    "Index": 3314,
    "Title": "[Construct the Minimum Bitwise Array I](https://leetcode.com/problems/construct-the-minimum-bitwise-array-i/)",
    "Solution": [
      [
        "C++",
        "C++/construct-the-minimum-bitwise-array-i.cpp"
      ],
      [
        "Python",
        "Python/construct-the-minimum-bitwise-array-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3315,
    "Title": "[Construct the Minimum Bitwise Array II](https://leetcode.com/problems/construct-the-minimum-bitwise-array-ii/)",
    "Solution": [
      [
        "C++",
        "C++/construct-the-minimum-bitwise-array-ii.cpp"
      ],
      [
        "Python",
        "Python/construct-the-minimum-bitwise-array-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3316,
    "Title": "[Find Maximum Removals From Source String](https://leetcode.com/problems/find-maximum-removals-from-source-string/)",
    "Solution": [
      [
        "C++",
        "C++/find-maximum-removals-from-source-string.cpp"
      ],
      [
        "Python",
        "Python/find-maximum-removals-from-source-string.py"
      ]
    ],
    "Time": "_O(n * m)_",
    "Space": "_O(n + m)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3317,
    "Title": "[Find the Number of Possible Ways for an Event](https://leetcode.com/problems/find-the-number-of-possible-ways-for-an-event/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-number-of-possible-ways-for-an-event.cpp"
      ],
      [
        "Python",
        "Python/find-the-number-of-possible-ways-for-an-event.py"
      ]
    ],
    "Time": "precompute: _O(max_n^2 + max_y * min(max_n, max_x))_<br>runtime: _O(min(n, x))_",
    "Space": "_O(max_n^2 + max_y * min(max_n, max_x))_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "DP, Combinatorics"
  },
  {
    "Index": 3318,
    "Title": "[Find X-Sum of All K-Long Subarrays I](https://leetcode.com/problems/find-x-sum-of-all-k-long-subarrays-i/)",
    "Solution": [
      [
        "C++",
        "C++/find-x-sum-of-all-k-long-subarrays-i.cpp"
      ],
      [
        "Python",
        "Python/find-x-sum-of-all-k-long-subarrays-i.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3319,
    "Title": "[K-th Largest Perfect Subtree Size in Binary Tree](https://leetcode.com/problems/k-th-largest-perfect-subtree-size-in-binary-tree/)",
    "Solution": [
      [
        "C++",
        "C++/k-th-largest-perfect-subtree-size-in-binary-tree.cpp"
      ],
      [
        "Python",
        "Python/k-th-largest-perfect-subtree-size-in-binary-tree.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS, Quick Select"
  },
  {
    "Index": 3320,
    "Title": "[Count The Number of Winning Sequences](https://leetcode.com/problems/count-the-number-of-winning-sequences/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-number-of-winning-sequences.cpp"
      ],
      [
        "Python",
        "Python/count-the-number-of-winning-sequences.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3321,
    "Title": "[Find X-Sum of All K-Long Subarrays II](https://leetcode.com/problems/find-x-sum-of-all-k-long-subarrays-ii/)",
    "Solution": [
      [
        "C++",
        "C++/find-x-sum-of-all-k-long-subarrays-ii.cpp"
      ],
      [
        "Python",
        "Python/find-x-sum-of-all-k-long-subarrays-ii.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3322,
    "Title": "[Premier League Table Ranking III](https://leetcode.com/problems/premier-league-table-ranking-iii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/premier-league-table-ranking-iii.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Window Function"
  },
  {
    "Index": 3323,
    "Title": "[Minimize Connected Groups by Inserting Interval](https://leetcode.com/problems/minimize-connected-groups-by-inserting-interval/)",
    "Solution": [
      [
        "C++",
        "C++/minimize-connected-groups-by-inserting-interval.cpp"
      ],
      [
        "Python",
        "Python/minimize-connected-groups-by-inserting-interval.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 3324,
    "Title": "[Find the Sequence of Strings Appeared on the Screen](https://leetcode.com/problems/find-the-sequence-of-strings-appeared-on-the-screen/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-sequence-of-strings-appeared-on-the-screen.cpp"
      ],
      [
        "Python",
        "Python/find-the-sequence-of-strings-appeared-on-the-screen.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3325,
    "Title": "[Count Substrings With K-Frequency Characters I](https://leetcode.com/problems/count-substrings-with-k-frequency-characters-i/)",
    "Solution": [
      [
        "C++",
        "C++/count-substrings-with-k-frequency-characters-i.cpp"
      ],
      [
        "Python",
        "Python/count-substrings-with-k-frequency-characters-i.py"
      ]
    ],
    "Time": "_O(n + 26)_",
    "Space": "_O(26)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3326,
    "Title": "[Minimum Division Operations to Make Array Non Decreasing](https://leetcode.com/problems/minimum-division-operations-to-make-array-non-decreasing/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-division-operations-to-make-array-non-decreasing.cpp"
      ],
      [
        "Python",
        "Python/minimum-division-operations-to-make-array-non-decreasing.py"
      ]
    ],
    "Time": "precompute: _O(r)_<br>runtime: _O(n)_",
    "Space": "_O(r)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Greedy, Number Theory, `Linear Sieve of Eratosthenes`"
  },
  {
    "Index": 3327,
    "Title": "[Check if DFS Strings Are Palindromes](https://leetcode.com/problems/check-if-dfs-strings-are-palindromes/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-dfs-strings-are-palindromes.cpp"
      ],
      [
        "Python",
        "Python/check-if-dfs-strings-are-palindromes.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "DFS, `Manacher's Algorithm`"
  },
  {
    "Index": 3328,
    "Title": "[Find Cities in Each State II](https://leetcode.com/problems/find-cities-in-each-state-ii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-cities-in-each-state-ii.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 3329,
    "Title": "[Count Substrings With K-Frequency Characters II](https://leetcode.com/problems/count-substrings-with-k-frequency-characters-ii/)",
    "Solution": [
      [
        "C++",
        "C++/count-substrings-with-k-frequency-characters-ii.cpp"
      ],
      [
        "Python",
        "Python/count-substrings-with-k-frequency-characters-ii.py"
      ]
    ],
    "Time": "_O(n + 26)_",
    "Space": "_O(26)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 3330,
    "Title": "[Find the Original Typed String I](https://leetcode.com/problems/find-the-original-typed-string-i/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-original-typed-string-i.cpp"
      ],
      [
        "Python",
        "Python/find-the-original-typed-string-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3331,
    "Title": "[Find Subtree Sizes After Changes](https://leetcode.com/problems/find-subtree-sizes-after-changes/)",
    "Solution": [
      [
        "C++",
        "C++/find-subtree-sizes-after-changes.cpp"
      ],
      [
        "Python",
        "Python/find-subtree-sizes-after-changes.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "DFS, Hash Table"
  },
  {
    "Index": 3332,
    "Title": "[Maximum Points Tourist Can Earn](https://leetcode.com/problems/maximum-points-tourist-can-earn/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-points-tourist-can-earn.cpp"
      ],
      [
        "Python",
        "Python/maximum-points-tourist-can-earn.py"
      ]
    ],
    "Time": "_O(k * n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3333,
    "Title": "[Find the Original Typed String II](https://leetcode.com/problems/find-the-original-typed-string-ii/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-original-typed-string-ii.cpp"
      ],
      [
        "Python",
        "Python/find-the-original-typed-string-ii.py"
      ]
    ],
    "Time": "_O(n + k^2)_",
    "Space": "_O(n + k)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3334,
    "Title": "[Find the Maximum Factor Score of Array](https://leetcode.com/problems/find-the-maximum-factor-score-of-array/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-maximum-factor-score-of-array.cpp"
      ],
      [
        "Python",
        "Python/find-the-maximum-factor-score-of-array.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3335,
    "Title": "[Total Characters in String After Transformations I](https://leetcode.com/problems/total-characters-in-string-after-transformations-i/)",
    "Solution": [
      [
        "C++",
        "C++/total-characters-in-string-after-transformations-i.cpp"
      ],
      [
        "Python",
        "Python/total-characters-in-string-after-transformations-i.py"
      ]
    ],
    "Time": "precompute: _O(t + 26)_ <br>runtime: _O(n)_",
    "Space": "_O(t + 26)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3336,
    "Title": "[Find the Number of Subsequences With Equal GCD](https://leetcode.com/problems/find-the-number-of-subsequences-with-equal-gcd/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-number-of-subsequences-with-equal-gcd.cpp"
      ],
      [
        "Python",
        "Python/find-the-number-of-subsequences-with-equal-gcd.py"
      ]
    ],
    "Time": "precompute: _O(max_r^2 * log(max_r))_ <br> runtime: O(n + r^2)",
    "Space": "_O(max_r^2)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3337,
    "Title": "[Total Characters in String After Transformations II](https://leetcode.com/problems/total-characters-in-string-after-transformations-ii/)",
    "Solution": [
      [
        "C++",
        "C++/total-characters-in-string-after-transformations-ii.cpp"
      ],
      [
        "Python",
        "Python/total-characters-in-string-after-transformations-ii.py"
      ]
    ],
    "Time": "_O(n + 26^3 * logt)_",
    "Space": "_O(26^2)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3338,
    "Title": "[Second Highest Salary II](https://leetcode.com/problems/second-highest-salary-ii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/second-highest-salary-ii.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Window Function"
  },
  {
    "Index": 3339,
    "Title": "[Find the Number of K-Even Arrays](https://leetcode.com/problems/find-the-number-of-k-even-arrays/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-number-of-k-even-arrays.cpp"
      ],
      [
        "Python",
        "Python/find-the-number-of-k-even-arrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "DP, Stars and Bars, Combinatorics"
  },
  {
    "Index": 3340,
    "Title": "[Check Balanced String](https://leetcode.com/problems/check-balanced-string/)",
    "Solution": [
      [
        "C++",
        "C++/check-balanced-string.cpp"
      ],
      [
        "Python",
        "Python/check-balanced-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3341,
    "Title": "[Find Minimum Time to Reach Last Room I](https://leetcode.com/problems/find-minimum-time-to-reach-last-room-i/)",
    "Solution": [
      [
        "C++",
        "C++/find-minimum-time-to-reach-last-room-i.cpp"
      ],
      [
        "Python",
        "Python/find-minimum-time-to-reach-last-room-i.py"
      ]
    ],
    "Time": "_O(n * m * log(n * m))_",
    "Space": "_O(n * m)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Graph, `Dijkstra's Algorithm`"
  },
  {
    "Index": 3342,
    "Title": "[Find Minimum Time to Reach Last Room II](https://leetcode.com/problems/find-minimum-time-to-reach-last-room-ii/)",
    "Solution": [
      [
        "C++",
        "C++/find-minimum-time-to-reach-last-room-ii.cpp"
      ],
      [
        "Python",
        "Python/find-minimum-time-to-reach-last-room-ii.py"
      ]
    ],
    "Time": "_O(n * m * log(n * m))_",
    "Space": "_O(n * m)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Graph, `Dijkstra's Algorithm`"
  },
  {
    "Index": 3343,
    "Title": "[Count Number of Balanced Permutations](https://leetcode.com/problems/count-number-of-balanced-permutations/)",
    "Solution": [
      [
        "C++",
        "C++/count-number-of-balanced-permutations.cpp"
      ],
      [
        "Python",
        "Python/count-number-of-balanced-permutations.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3344,
    "Title": "[Maximum Sized Array](https://leetcode.com/problems/maximum-sized-array/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-sized-array.cpp"
      ],
      [
        "Python",
        "Python/maximum-sized-array.py"
      ]
    ],
    "Time": "precompute: O(max_s^(1/5) * log(max_s))<br>runtime: O(log(max_s))",
    "Space": "_O(max_s^(1/5))_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 3345,
    "Title": "[Smallest Divisible Digit Product I](https://leetcode.com/problems/smallest-divisible-digit-product-i/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-divisible-digit-product-i.cpp"
      ],
      [
        "Python",
        "Python/smallest-divisible-digit-product-i.py"
      ]
    ],
    "Time": "_O(logn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Brute Force"
  },
  {
    "Index": 3346,
    "Title": "[Maximum Frequency of an Element After Performing Operations I](https://leetcode.com/problems/maximum-frequency-of-an-element-after-performing-operations-i/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-frequency-of-an-element-after-performing-operations-i.cpp"
      ],
      [
        "Python",
        "Python/maximum-frequency-of-an-element-after-performing-operations-i.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3347,
    "Title": "[Maximum Frequency of an Element After Performing Operations II](https://leetcode.com/problems/maximum-frequency-of-an-element-after-performing-operations-ii/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-frequency-of-an-element-after-performing-operations-ii.cpp"
      ],
      [
        "Python",
        "Python/maximum-frequency-of-an-element-after-performing-operations-ii.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3348,
    "Title": "[Smallest Divisible Digit Product II](https://leetcode.com/problems/smallest-divisible-digit-product-ii/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-divisible-digit-product-ii.cpp"
      ],
      [
        "Python",
        "Python/smallest-divisible-digit-product-ii.py"
      ]
    ],
    "Time": "_O(n + logt)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Freq Table, Greedy, Prefix Sum, Number Theory"
  },
  {
    "Index": 3349,
    "Title": "[Adjacent Increasing Subarrays Detection I](https://leetcode.com/problems/adjacent-increasing-subarrays-detection-i/)",
    "Solution": [
      [
        "C++",
        "C++/adjacent-increasing-subarrays-detection-i.cpp"
      ],
      [
        "Python",
        "Python/adjacent-increasing-subarrays-detection-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3350,
    "Title": "[Adjacent Increasing Subarrays Detection II](https://leetcode.com/problems/adjacent-increasing-subarrays-detection-ii/)",
    "Solution": [
      [
        "C++",
        "C++/adjacent-increasing-subarrays-detection-ii.cpp"
      ],
      [
        "Python",
        "Python/adjacent-increasing-subarrays-detection-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3351,
    "Title": "[Sum of Good Subsequences](https://leetcode.com/problems/sum-of-good-subsequences/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-good-subsequences.cpp"
      ],
      [
        "Python",
        "Python/sum-of-good-subsequences.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3352,
    "Title": "[Count K-Reducible Numbers Less Than N](https://leetcode.com/problems/count-k-reducible-numbers-less-than-n/)",
    "Solution": [
      [
        "C++",
        "C++/count-k-reducible-numbers-less-than-n.cpp"
      ],
      [
        "Python",
        "Python/count-k-reducible-numbers-less-than-n.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3353,
    "Title": "[Minimum Total Operations](https://leetcode.com/problems/minimum-total-operations/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-total-operations.cpp"
      ],
      [
        "Python",
        "Python/minimum-total-operations.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": "🔒"
  },
  {
    "Index": 3354,
    "Title": "[Make Array Elements Equal to Zero](https://leetcode.com/problems/make-array-elements-equal-to-zero/)",
    "Solution": [
      [
        "C++",
        "C++/make-array-elements-equal-to-zero.cpp"
      ],
      [
        "Python",
        "Python/make-array-elements-equal-to-zero.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "[CodeChef Starters 146 - Bouncing Ball](https://www.codechef.com/problems/BOUNCE_BALL)"
  },
  {
    "Index": 3355,
    "Title": "[Zero Array Transformation I](https://leetcode.com/problems/zero-array-transformation-i/)",
    "Solution": [
      [
        "C++",
        "C++/zero-array-transformation-i.cpp"
      ],
      [
        "Python",
        "Python/zero-array-transformation-i.py"
      ]
    ],
    "Time": "_O(n + q)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3356,
    "Title": "[Zero Array Transformation II](https://leetcode.com/problems/zero-array-transformation-ii/)",
    "Solution": [
      [
        "C++",
        "C++/zero-array-transformation-ii.cpp"
      ],
      [
        "Python",
        "Python/zero-array-transformation-ii.py"
      ]
    ],
    "Time": "_O((n + q) * logn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3357,
    "Title": "[Minimize the Maximum Adjacent Element Difference](https://leetcode.com/problems/minimize-the-maximum-adjacent-element-difference/)",
    "Solution": [
      [
        "C++",
        "C++/minimize-the-maximum-adjacent-element-difference.cpp"
      ],
      [
        "Python",
        "Python/minimize-the-maximum-adjacent-element-difference.py"
      ]
    ],
    "Time": "_O(nlogr)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3358,
    "Title": "[Books with NULL Ratings](https://leetcode.com/problems/books-with-null-ratings/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/books-with-null-ratings.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 3359,
    "Title": "[Find Sorted Submatrices With Maximum Element at Most K](https://leetcode.com/problems/find-sorted-submatrices-with-maximum-element-at-most-k/)",
    "Solution": [
      [
        "C++",
        "C++/find-sorted-submatrices-with-maximum-element-at-most-k.cpp"
      ],
      [
        "Python",
        "Python/find-sorted-submatrices-with-maximum-element-at-most-k.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(m)_",
    "Difficulty": "Hard",
    "Tag": "🔒, variant of [Count Submatrices With All Ones](https://leetcode.com/problems/count-submatrices-with-all-ones/)"
  },
  {
    "Index": 3360,
    "Title": "[Stone Removal Game](https://leetcode.com/problems/stone-removal-game/)",
    "Solution": [
      [
        "C++",
        "C++/stone-removal-game.cpp"
      ],
      [
        "Python",
        "Python/stone-removal-game.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Math"
  },
  {
    "Index": 3361,
    "Title": "[Shift Distance Between Two Strings](https://leetcode.com/problems/shift-distance-between-two-strings/)",
    "Solution": [
      [
        "C++",
        "C++/shift-distance-between-two-strings.cpp"
      ],
      [
        "Python",
        "Python/shift-distance-between-two-strings.py"
      ]
    ],
    "Time": "_O(n + 26)_",
    "Space": "_O(26)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3362,
    "Title": "[Zero Array Transformation III](https://leetcode.com/problems/zero-array-transformation-iii/)",
    "Solution": [
      [
        "C++",
        "C++/zero-array-transformation-iii.cpp"
      ],
      [
        "Python",
        "Python/zero-array-transformation-iii.py"
      ]
    ],
    "Time": "_O(n + qlogq)_",
    "Space": "_O(q)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3363,
    "Title": "[Find the Maximum Number of Fruits Collected](https://leetcode.com/problems/find-the-maximum-number-of-fruits-collected/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-maximum-number-of-fruits-collected.cpp"
      ],
      [
        "Python",
        "Python/find-the-maximum-number-of-fruits-collected.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3364,
    "Title": "[Minimum Positive Sum Subarray](https://leetcode.com/problems/minimum-positive-sum-subarray/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-positive-sum-subarray.cpp"
      ],
      [
        "Python",
        "Python/minimum-positive-sum-subarray.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3365,
    "Title": "[Rearrange K Substrings to Form Target String](https://leetcode.com/problems/rearrange-k-substrings-to-form-target-string/)",
    "Solution": [
      [
        "C++",
        "C++/rearrange-k-substrings-to-form-target-string.cpp"
      ],
      [
        "Python",
        "Python/rearrange-k-substrings-to-form-target-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3366,
    "Title": "[Minimum Array Sum](https://leetcode.com/problems/minimum-array-sum/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-array-sum.cpp"
      ],
      [
        "Python",
        "Python/minimum-array-sum.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3367,
    "Title": "[Maximize Sum of Weights after Edge Removals](https://leetcode.com/problems/maximize-sum-of-weights-after-edge-removals/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-sum-of-weights-after-edge-removals.cpp"
      ],
      [
        "Python",
        "Python/maximize-sum-of-weights-after-edge-removals.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "DFS, Quick Select"
  },
  {
    "Index": 3368,
    "Title": "[First Letter Capitalization](https://leetcode.com/problems/first-letter-capitalization/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/first-letter-capitalization.sql"
      ]
    ],
    "Time": "_O(n * l^2 + (n * l) * log(n * l))_",
    "Space": "_O(n * l^2)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Recursive CTE"
  },
  {
    "Index": 3369,
    "Title": "[Design an Array Statistics Tracker](https://leetcode.com/problems/design-an-array-statistics-tracker/)",
    "Solution": [
      [
        "C++",
        "C++/design-an-array-statistics-tracker.cpp"
      ],
      [
        "Python",
        "Python/design-an-array-statistics-tracker.py"
      ]
    ],
    "Time": "ctor: _O(1)_<br>addNumber: _O(logn)_<br>removeFirstAddedNumber: _O(logn)_<br>getMean: _O(1)_<br>getMedian: _O(1)_<br>getMode: _O(1)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 3370,
    "Title": "[Smallest Number With All Set Bits](https://leetcode.com/problems/smallest-number-with-all-set-bits/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-number-with-all-set-bits.cpp"
      ],
      [
        "Python",
        "Python/smallest-number-with-all-set-bits.py"
      ]
    ],
    "Time": "_O(1)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3371,
    "Title": "[Identify the Largest Outlier in an Array](https://leetcode.com/problems/identify-the-largest-outlier-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/identify-the-largest-outlier-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/identify-the-largest-outlier-in-an-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3372,
    "Title": "[Maximize the Number of Target Nodes After Connecting Trees I](https://leetcode.com/problems/maximize-the-number-of-target-nodes-after-connecting-trees-i/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-the-number-of-target-nodes-after-connecting-trees-i.cpp"
      ],
      [
        "Python",
        "Python/maximize-the-number-of-target-nodes-after-connecting-trees-i.py"
      ]
    ],
    "Time": "_O(nlogn + mlogm)_",
    "Space": "_O(n + m)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3373,
    "Title": "[Maximize the Number of Target Nodes After Connecting Trees II](https://leetcode.com/problems/maximize-the-number-of-target-nodes-after-connecting-trees-ii/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-the-number-of-target-nodes-after-connecting-trees-ii.cpp"
      ],
      [
        "Python",
        "Python/maximize-the-number-of-target-nodes-after-connecting-trees-ii.py"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(n + m)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3374,
    "Title": "[First Letter Capitalization II](https://leetcode.com/problems/first-letter-capitalization-ii/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/first-letter-capitalization-ii.sql"
      ]
    ],
    "Time": "_O(n * l^2 + (n * l) * log(n * l))_",
    "Space": "_O(n * l^2)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Recursive CTE"
  },
  {
    "Index": 3375,
    "Title": "[Minimum Operations to Make Array Values Equal to K](https://leetcode.com/problems/minimum-operations-to-make-array-values-equal-to-k/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-make-array-values-equal-to-k.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-make-array-values-equal-to-k.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Hash Table, Constructive Algorithms"
  },
  {
    "Index": 3376,
    "Title": "[Minimum Time to Break Locks I](https://leetcode.com/problems/minimum-time-to-break-locks-i/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-time-to-break-locks-i.cpp"
      ],
      [
        "Python",
        "Python/minimum-time-to-break-locks-i.py"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3377,
    "Title": "[Digit Operations to Make Two Integers Equal](https://leetcode.com/problems/digit-operations-to-make-two-integers-equal/)",
    "Solution": [
      [
        "C++",
        "C++/digit-operations-to-make-two-integers-equal.cpp"
      ],
      [
        "Python",
        "Python/digit-operations-to-make-two-integers-equal.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Graph, Number Theory, `Linear Sieve of Eratosthenes`, `Dijkstra's Algorithm`"
  },
  {
    "Index": 3378,
    "Title": "[Count Connected Components in LCM Graph](https://leetcode.com/problems/count-connected-components-in-lcm-graph/)",
    "Solution": [
      [
        "C++",
        "C++/count-connected-components-in-lcm-graph.cpp"
      ],
      [
        "Python",
        "Python/count-connected-components-in-lcm-graph.py"
      ]
    ],
    "Time": "_O(n + tlogt)_",
    "Space": "_O(t)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Number Theory, Graph, Union Find"
  },
  {
    "Index": 3379,
    "Title": "[Transformed Array](https://leetcode.com/problems/transformed-array/)",
    "Solution": [
      [
        "C++",
        "C++/transformed-array.cpp"
      ],
      [
        "Python",
        "Python/transformed-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3380,
    "Title": "[Maximum Area Rectangle With Point Constraints I](https://leetcode.com/problems/maximum-area-rectangle-with-point-constraints-i/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-area-rectangle-with-point-constraints-i.cpp"
      ],
      [
        "Python",
        "Python/maximum-area-rectangle-with-point-constraints-i.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3381,
    "Title": "[Maximum Subarray Sum With Length Divisible by K](https://leetcode.com/problems/maximum-subarray-sum-with-length-divisible-by-k/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-subarray-sum-with-length-divisible-by-k.cpp"
      ],
      [
        "Python",
        "Python/maximum-subarray-sum-with-length-divisible-by-k.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3382,
    "Title": "[Maximum Area Rectangle With Point Constraints II](https://leetcode.com/problems/maximum-area-rectangle-with-point-constraints-ii/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-area-rectangle-with-point-constraints-ii.cpp"
      ],
      [
        "Python",
        "Python/maximum-area-rectangle-with-point-constraints-ii.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3383,
    "Title": "[Minimum Runes to Add to Cast Spell](https://leetcode.com/problems/minimum-runes-to-add-to-cast-spell/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-runes-to-add-to-cast-spell.cpp"
      ],
      [
        "Python",
        "Python/minimum-runes-to-add-to-cast-spell.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Graph, `Tarjan's Strongly Connected Components Algorithm`, SCC"
  },
  {
    "Index": 3384,
    "Title": "[Team Dominance by Pass Success](https://leetcode.com/problems/team-dominance-by-pass-success/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/team-dominance-by-pass-success.sql"
      ]
    ],
    "Time": "_O(plogp + t)_",
    "Space": "_O(p + t)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": 0
  },
  {
    "Index": 3385,
    "Title": "[Minimum Time to Break Locks II](https://leetcode.com/problems/minimum-time-to-break-locks-ii/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-time-to-break-locks-ii.cpp"
      ],
      [
        "Python",
        "Python/minimum-time-to-break-locks-ii.py"
      ]
    ],
    "Time": "_O(n^3)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 3386,
    "Title": "[Button with Longest Push Time](https://leetcode.com/problems/button-with-longest-push-time/)",
    "Solution": [
      [
        "C++",
        "C++/button-with-longest-push-time.cpp"
      ],
      [
        "Python",
        "Python/button-with-longest-push-time.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3387,
    "Title": "[Maximize Amount After Two Days of Conversions](https://leetcode.com/problems/maximize-amount-after-two-days-of-conversions/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-amount-after-two-days-of-conversions.cpp"
      ],
      [
        "Python",
        "Python/maximize-amount-after-two-days-of-conversions.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "`Bellman-Ford Algorithm`, BFS"
  },
  {
    "Index": 3388,
    "Title": "[Count Beautiful Splits in an Array](https://leetcode.com/problems/count-beautiful-splits-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/count-beautiful-splits-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/count-beautiful-splits-in-an-array.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3389,
    "Title": "[Minimum Operations to Make Character Frequencies Equal](https://leetcode.com/problems/minimum-operations-to-make-character-frequencies-equal/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-make-character-frequencies-equal.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-make-character-frequencies-equal.py"
      ]
    ],
    "Time": "_O(26 * n)_",
    "Space": "_O(26)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3390,
    "Title": "[Longest Team Pass Streak](https://leetcode.com/problems/longest-team-pass-streak/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/longest-team-pass-streak.sql"
      ]
    ],
    "Time": "_O(plogp + t)_",
    "Space": "_O(p + t)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Recursive CTE, Window Function"
  },
  {
    "Index": 3391,
    "Title": "[Design a 3D Binary Matrix with Efficient Layer Tracking](https://leetcode.com/problems/design-a-3d-binary-matrix-with-efficient-layer-tracking/)",
    "Solution": [
      [
        "C++",
        "C++/design-a-3d-binary-matrix-with-efficient-layer-tracking.cpp"
      ],
      [
        "Python",
        "Python/design-a-3d-binary-matrix-with-efficient-layer-tracking.py"
      ]
    ],
    "Time": "ctor: _O(1)_<br>setCell: _O(logn)_<br>unsetCell: _O(logn)_<br>largestMatrix: _O(logn)_",
    "Space": "_O(n^3)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 3392,
    "Title": "[Count Subarrays of Length Three With a Condition](https://leetcode.com/problems/count-subarrays-of-length-three-with-a-condition/)",
    "Solution": [
      [
        "C++",
        "C++/count-subarrays-of-length-three-with-a-condition.cpp"
      ],
      [
        "Python",
        "Python/count-subarrays-of-length-three-with-a-condition.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3393,
    "Title": "[Count Paths With the Given XOR Value](https://leetcode.com/problems/count-paths-with-the-given-xor-value/)",
    "Solution": [
      [
        "C++",
        "C++/count-paths-with-the-given-xor-value.cpp"
      ],
      [
        "Python",
        "Python/count-paths-with-the-given-xor-value.py"
      ]
    ],
    "Time": "_O(m * n * r)_",
    "Space": "_O(n * r)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3394,
    "Title": "[Check if Grid can be Cut into Sections](https://leetcode.com/problems/check-if-grid-can-be-cut-into-sections/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-grid-can-be-cut-into-sections.cpp"
      ],
      [
        "Python",
        "Python/check-if-grid-can-be-cut-into-sections.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3395,
    "Title": "[Subsequences with a Unique Middle Mode I](https://leetcode.com/problems/subsequences-with-a-unique-middle-mode-i/)",
    "Solution": [
      [
        "C++",
        "C++/subsequences-with-a-unique-middle-mode-i.cpp"
      ],
      [
        "Python",
        "Python/subsequences-with-a-unique-middle-mode-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Freq Table, Prefix Sum, Combinatorics"
  },
  {
    "Index": 3396,
    "Title": "[Minimum Number of Operations to Make Elements in Array Distinct](https://leetcode.com/problems/minimum-number-of-operations-to-make-elements-in-array-distinct/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-number-of-operations-to-make-elements-in-array-distinct.cpp"
      ],
      [
        "Python",
        "Python/minimum-number-of-operations-to-make-elements-in-array-distinct.py"
      ]
    ],
    "Time": "_O(n + r)_",
    "Space": "_O(r)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3397,
    "Title": "[Maximum Number of Distinct Elements After Operations](https://leetcode.com/problems/maximum-number-of-distinct-elements-after-operations/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-distinct-elements-after-operations.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-distinct-elements-after-operations.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3398,
    "Title": "[Smallest Substring With Identical Characters I](https://leetcode.com/problems/smallest-substring-with-identical-characters-i/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-substring-with-identical-characters-i.cpp"
      ],
      [
        "Python",
        "Python/smallest-substring-with-identical-characters-i.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3399,
    "Title": "[Smallest Substring With Identical Characters II](https://leetcode.com/problems/smallest-substring-with-identical-characters-ii/)",
    "Solution": [
      [
        "C++",
        "C++/smallest-substring-with-identical-characters-ii.cpp"
      ],
      [
        "Python",
        "Python/smallest-substring-with-identical-characters-ii.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3400,
    "Title": "[Maximum Number of Matching Indices After Right Shifts](https://leetcode.com/problems/maximum-number-of-matching-indices-after-right-shifts/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-number-of-matching-indices-after-right-shifts.cpp"
      ],
      [
        "Python",
        "Python/maximum-number-of-matching-indices-after-right-shifts.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 3401,
    "Title": "[Find Circular Gift Exchange Chains](https://leetcode.com/problems/find-circular-gift-exchange-chains/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-circular-gift-exchange-chains.sql"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Recursive CTE, Window Function"
  },
  {
    "Index": 3402,
    "Title": "[Minimum Operations to Make Columns Strictly Increasing](https://leetcode.com/problems/minimum-operations-to-make-columns-strictly-increasing/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-make-columns-strictly-increasing.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-make-columns-strictly-increasing.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3403,
    "Title": "[Find the Lexicographically Largest String From the Box I](https://leetcode.com/problems/find-the-lexicographically-largest-string-from-the-box-i/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-lexicographically-largest-string-from-the-box-i.cpp"
      ],
      [
        "Python",
        "Python/find-the-lexicographically-largest-string-from-the-box-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3404,
    "Title": "[Count Special Subsequences](https://leetcode.com/problems/count-special-subsequences/)",
    "Solution": [
      [
        "C++",
        "C++/count-special-subsequences.cpp"
      ],
      [
        "Python",
        "Python/count-special-subsequences.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3405,
    "Title": "[Count the Number of Arrays with K Matching Adjacent Elements](https://leetcode.com/problems/count-the-number-of-arrays-with-k-matching-adjacent-elements/)",
    "Solution": [
      [
        "C++",
        "C++/count-the-number-of-arrays-with-k-matching-adjacent-elements.cpp"
      ],
      [
        "Python",
        "Python/count-the-number-of-arrays-with-k-matching-adjacent-elements.py"
      ]
    ],
    "Time": "_O(n + logm)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Combinatorics, Fast Exponentiation"
  },
  {
    "Index": 3406,
    "Title": "[Find the Lexicographically Largest String From the Box II](https://leetcode.com/problems/find-the-lexicographically-largest-string-from-the-box-ii/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-lexicographically-largest-string-from-the-box-ii.cpp"
      ],
      [
        "Python",
        "Python/find-the-lexicographically-largest-string-from-the-box-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": "🔒"
  },
  {
    "Index": 3407,
    "Title": "[Substring Matching Pattern](https://leetcode.com/problems/substring-matching-pattern/)",
    "Solution": [
      [
        "C++",
        "C++/substring-matching-pattern.cpp"
      ],
      [
        "Python",
        "Python/substring-matching-pattern.py"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(m)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3408,
    "Title": "[Design Task Manager](https://leetcode.com/problems/design-task-manager/)",
    "Solution": [
      [
        "C++",
        "C++/design-task-manager.cpp"
      ],
      [
        "Python",
        "Python/design-task-manager.py"
      ]
    ],
    "Time": "ctor: _O(tlogt)_<br>add: _O(logt)_<br>edit: _O(logt)_<br>rmv: _O(logt)_<br>execTop: _O(logt)_",
    "Space": "_O(t)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3409,
    "Title": "[Longest Subsequence With Decreasing Adjacent Difference](https://leetcode.com/problems/longest-subsequence-with-decreasing-adjacent-difference/)",
    "Solution": [
      [
        "C++",
        "C++/longest-subsequence-with-decreasing-adjacent-difference.cpp"
      ],
      [
        "Python",
        "Python/longest-subsequence-with-decreasing-adjacent-difference.py"
      ]
    ],
    "Time": "_O(r^2 + n * r)_",
    "Space": "_O(r^2)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3410,
    "Title": "[Maximize Subarray Sum After Removing All Occurrences of One Element](https://leetcode.com/problems/maximize-subarray-sum-after-removing-all-occurrences-of-one-element/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-subarray-sum-after-removing-all-occurrences-of-one-element.cpp"
      ],
      [
        "Python",
        "Python/maximize-subarray-sum-after-removing-all-occurrences-of-one-element.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3411,
    "Title": "[Maximum Subarray With Equal Products](https://leetcode.com/problems/maximum-subarray-with-equal-products/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-subarray-with-equal-products.cpp"
      ],
      [
        "Python",
        "Python/maximum-subarray-with-equal-products.py"
      ]
    ],
    "Time": "precompute: _O(r * log(logr))_<br>runtime: _O(n * log(logr))_",
    "Space": "_O(r * log(logr))_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Number Theory, `Linear Sieve of Eratosthenes`, Hash Table"
  },
  {
    "Index": 3412,
    "Title": "[Find Mirror Score of a String](https://leetcode.com/problems/find-mirror-score-of-a-string/)",
    "Solution": [
      [
        "C++",
        "C++/find-mirror-score-of-a-string.cpp"
      ],
      [
        "Python",
        "Python/find-mirror-score-of-a-string.py"
      ]
    ],
    "Time": "_O(n + 26)_",
    "Space": "_O(n + 26)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3413,
    "Title": "[Maximum Coins From K Consecutive Bags](https://leetcode.com/problems/maximum-coins-from-k-consecutive-bags/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-coins-from-k-consecutive-bags.cpp"
      ],
      [
        "Python",
        "Python/maximum-coins-from-k-consecutive-bags.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3414,
    "Title": "[Maximum Score of Non-overlapping Intervals](https://leetcode.com/problems/maximum-score-of-non-overlapping-intervals/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-score-of-non-overlapping-intervals.cpp"
      ],
      [
        "Python",
        "Python/maximum-score-of-non-overlapping-intervals.py"
      ]
    ],
    "Time": "_O(nlogn + n * k^2)_",
    "Space": "_O(n * k^2)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3415,
    "Title": "[Find Products with Three Consecutive Digits](https://leetcode.com/problems/find-products-with-three-consecutive-digits/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-products-with-three-consecutive-digits.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒",
    "Note": "Regular Expression"
  },
  {
    "Index": 3416,
    "Title": "[Subsequences with a Unique Middle Mode II](https://leetcode.com/problems/subsequences-with-a-unique-middle-mode-ii/)",
    "Solution": [
      [
        "C++",
        "C++/subsequences-with-a-unique-middle-mode-ii.cpp"
      ],
      [
        "Python",
        "Python/subsequences-with-a-unique-middle-mode-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": "🔒",
    "Note": "Freq Table, Prefix Sum, Combinatorics"
  },
  {
    "Index": 3417,
    "Title": "[Zigzag Grid Traversal With Skip](https://leetcode.com/problems/zigzag-grid-traversal-with-skip/)",
    "Solution": [
      [
        "C++",
        "C++/zigzag-grid-traversal-with-skip.cpp"
      ],
      [
        "Python",
        "Python/zigzag-grid-traversal-with-skip.py"
      ]
    ],
    "Time": "_O(n * m)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3418,
    "Title": "[Maximum Amount of Money Robot Can Earn](https://leetcode.com/problems/maximum-amount-of-money-robot-can-earn/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-amount-of-money-robot-can-earn.cpp"
      ],
      [
        "Python",
        "Python/maximum-amount-of-money-robot-can-earn.py"
      ]
    ],
    "Time": "_O(m * n)_",
    "Space": "_O(min(m, n))_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3419,
    "Title": "[Minimize the Maximum Edge Weight of Graph](https://leetcode.com/problems/minimize-the-maximum-edge-weight-of-graph/)",
    "Solution": [
      [
        "C++",
        "C++/minimize-the-maximum-edge-weight-of-graph.cpp"
      ],
      [
        "Python",
        "Python/minimize-the-maximum-edge-weight-of-graph.py"
      ]
    ],
    "Time": "_O(nlogn + e)_",
    "Space": "_O(n + e)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Graph, `Dijkstra's Algorithm`, `Prim's Algorithm`, Binary Search, BFS"
  },
  {
    "Index": 3420,
    "Title": "[Count Non-Decreasing Subarrays After K Operations](https://leetcode.com/problems/count-non-decreasing-subarrays-after-k-operations/)",
    "Solution": [
      [
        "C++",
        "C++/count-non-decreasing-subarrays-after-k-operations.cpp"
      ],
      [
        "Python",
        "Python/count-non-decreasing-subarrays-after-k-operations.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3421,
    "Title": "[Find Students Who Improved](https://leetcode.com/problems/find-students-who-improved/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-students-who-improved.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Window Function"
  },
  {
    "Index": 3422,
    "Title": "[Minimum Operations to Make Subarray Elements Equal](https://leetcode.com/problems/minimum-operations-to-make-subarray-elements-equal/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-operations-to-make-subarray-elements-equal.cpp"
      ],
      [
        "Python",
        "Python/minimum-operations-to-make-subarray-elements-equal.py"
      ]
    ],
    "Time": "_O(nlogk)_",
    "Space": "_O(k)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 3423,
    "Title": "[Maximum Difference Between Adjacent Elements in a Circular Array](https://leetcode.com/problems/zmaximum-difference-between-adjacent-elements-in-a-circular-array/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-difference-between-adjacent-elements-in-a-circular-array.cpp"
      ],
      [
        "Python",
        "Python/maximum-difference-between-adjacent-elements-in-a-circular-array.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3424,
    "Title": "[Minimum Cost to Make Arrays Identical](https://leetcode.com/problems/minimum-cost-to-make-arrays-identical/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-to-make-arrays-identical.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-to-make-arrays-identical.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3425,
    "Title": "[Longest Special Path](https://leetcode.com/problems/longest-special-path/)",
    "Solution": [
      [
        "C++",
        "C++/longest-special-path.cpp"
      ],
      [
        "Python",
        "Python/longest-special-path.py"
      ]
    ],
    "Time": "_O(n + e)_",
    "Space": "_O(n + e)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3426,
    "Title": "[Manhattan Distances of All Arrangements of Pieces](https://leetcode.com/problems/manhattan-distances-of-all-arrangements-of-pieces/)",
    "Solution": [
      [
        "C++",
        "C++/manhattan-distances-of-all-arrangements-of-pieces.cpp"
      ],
      [
        "Python",
        "Python/manhattan-distances-of-all-arrangements-of-pieces.py"
      ]
    ],
    "Time": "precompute: _O(max(m * n))_<br>runtime: _O(1)_",
    "Space": "_O(max(m * n))_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Combinatorics"
  },
  {
    "Index": 3427,
    "Title": "[Sum of Variable Length Subarrays](https://leetcode.com/problems/sum-of-variable-length-subarrays/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-variable-length-subarrays.cpp"
      ],
      [
        "Python",
        "Python/sum-of-variable-length-subarrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3428,
    "Title": "[Maximum and Minimum Sums of at Most Size K Subsequences](https://leetcode.com/problems/maximum-and-minimum-sums-of-at-most-size-k-subsequences/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-and-minimum-sums-of-at-most-size-k-subsequences.cpp"
      ],
      [
        "Python",
        "Python/maximum-and-minimum-sums-of-at-most-size-k-subsequences.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Sort, Combinatorics, Two Pointers, Sliding Window"
  },
  {
    "Index": 3429,
    "Title": "[Paint House IV](https://leetcode.com/problems/paint-house-iv/)",
    "Solution": [
      [
        "C++",
        "C++/paint-house-iv.cpp"
      ],
      [
        "Python",
        "Python/paint-house-iv.py"
      ]
    ],
    "Time": "_O(n * l^4)_",
    "Space": "_O(l^2)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3430,
    "Title": "[Maximum and Minimum Sums of at Most Size K Subarrays](https://leetcode.com/problems/maximum-and-minimum-sums-of-at-most-size-k-subarrays/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-and-minimum-sums-of-at-most-size-k-subarrays.cpp"
      ],
      [
        "Python",
        "Python/maximum-and-minimum-sums-of-at-most-size-k-subarrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(k)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3431,
    "Title": "[Minimum Unlocked Indices to Sort Nums](https://leetcode.com/problems/minimum-unlocked-indices-to-sort-nums/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-unlocked-indices-to-sort-nums.cpp"
      ],
      [
        "Python",
        "Python/minimum-unlocked-indices-to-sort-nums.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3432,
    "Title": "[Count Partitions with Even Sum Difference](https://leetcode.com/problems/count-partitions-with-even-sum-difference/)",
    "Solution": [
      [
        "C++",
        "C++/count-partitions-with-even-sum-difference.cpp"
      ],
      [
        "Python",
        "Python/count-partitions-with-even-sum-difference.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3433,
    "Title": "[Count Mentions Per User](https://leetcode.com/problems/count-mentions-per-user/)",
    "Solution": [
      [
        "C++",
        "C++/count-mentions-per-user.cpp"
      ],
      [
        "Python",
        "Python/count-mentions-per-user.py"
      ]
    ],
    "Time": "_O(eloge + e * n)_",
    "Space": "_O(e + n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3434,
    "Title": "[Maximum Frequency After Subarray Operation](https://leetcode.com/problems/maximum-frequency-after-subarray-operation/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-frequency-after-subarray-operation.cpp"
      ],
      [
        "Python",
        "Python/maximum-frequency-after-subarray-operation.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3435,
    "Title": "[Frequencies of Shortest Supersequences](https://leetcode.com/problems/frequencies-of-shortest-supersequences/)",
    "Solution": [
      [
        "C++",
        "C++/frequencies-of-shortest-supersequences.cpp"
      ],
      [
        "Python",
        "Python/frequencies-of-shortest-supersequences.py"
      ]
    ],
    "Time": "_O(n + k^2 * 2^k)_",
    "Space": "_O(k^2)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Bitmasks, Graph, Topological Sort"
  },
  {
    "Index": 3436,
    "Title": "[Find Valid Emails](https://leetcode.com/problems/find-valid-emails/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-valid-emails.sql"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Regular Expression"
  },
  {
    "Index": 3437,
    "Title": "[Permutations III](https://leetcode.com/problems/permutations-iii/)",
    "Solution": [
      [
        "C++",
        "C++/permutations-iii.cpp"
      ],
      [
        "Python",
        "Python/permutations-iii.py"
      ]
    ],
    "Time": "_O(n * n!)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 3438,
    "Title": "[Find Valid Pair of Adjacent Digits in String](https://leetcode.com/problems/find-valid-pair-of-adjacent-digits-in-string/)",
    "Solution": [
      [
        "C++",
        "C++/find-valid-pair-of-adjacent-digits-in-string.cpp"
      ],
      [
        "Python",
        "Python/find-valid-pair-of-adjacent-digits-in-string.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3439,
    "Title": "[Reschedule Meetings for Maximum Free Time I](https://leetcode.com/problems/reschedule-meetings-for-maximum-free-time-i/)",
    "Solution": [
      [
        "C++",
        "C++/reschedule-meetings-for-maximum-free-time-i.cpp"
      ],
      [
        "Python",
        "Python/reschedule-meetings-for-maximum-free-time-i.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3440,
    "Title": "[Reschedule Meetings for Maximum Free Time II](https://leetcode.com/problems/reschedule-meetings-for-maximum-free-time-ii/)",
    "Solution": [
      [
        "C++",
        "C++/reschedule-meetings-for-maximum-free-time-ii.cpp"
      ],
      [
        "Python",
        "Python/reschedule-meetings-for-maximum-free-time-ii.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3441,
    "Title": "[Minimum Cost Good Caption](https://leetcode.com/problems/minimum-cost-good-caption/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-cost-good-caption.cpp"
      ],
      [
        "Python",
        "Python/minimum-cost-good-caption.py"
      ]
    ],
    "Time": "_O(26 * n)_",
    "Space": "_O(26 * n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3442,
    "Title": "[Maximum Difference Between Even and Odd Frequency I](https://leetcode.com/problems/maximum-difference-between-even-and-odd-frequency-i/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-difference-between-even-and-odd-frequency-i.cpp"
      ],
      [
        "Python",
        "Python/maximum-difference-between-even-and-odd-frequency-i.py"
      ]
    ],
    "Time": "_O(n + 26)_",
    "Space": "_O(26)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3443,
    "Title": "[Maximum Manhattan Distance After K Changes](https://leetcode.com/problems/maximum-manhattan-distance-after-k-changes/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-manhattan-distance-after-k-changes.cpp"
      ],
      [
        "Python",
        "Python/maximum-manhattan-distance-after-k-changes.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3444,
    "Title": "[Minimum Increments for Target Multiples in an Array](https://leetcode.com/problems/minimum-increments-for-target-multiples-in-an-array/)",
    "Solution": [
      [
        "C++",
        "C++/minimum-increments-for-target-multiples-in-an-array.cpp"
      ],
      [
        "Python",
        "Python/minimum-increments-for-target-multiples-in-an-array.py"
      ]
    ],
    "Time": "_O(logr * m * 2^m + n * 3^m)_",
    "Space": "_O(2^m)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3445,
    "Title": "[Maximum Difference Between Even and Odd Frequency II](https://leetcode.com/problems/maximum-difference-between-even-and-odd-frequency-ii/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-difference-between-even-and-odd-frequency-ii.cpp"
      ],
      [
        "Python",
        "Python/maximum-difference-between-even-and-odd-frequency-ii.py"
      ]
    ],
    "Time": "_O(d^2 * n)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3446,
    "Title": "[Sort Matrix by Diagonals](https://leetcode.com/problems/sort-matrix-by-diagonals/)",
    "Solution": [
      [
        "C++",
        "C++/sort-matrix-by-diagonals.cpp"
      ],
      [
        "Python",
        "Python/sort-matrix-by-diagonals.py"
      ]
    ],
    "Time": "_O(n^2 * logn)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3447,
    "Title": "[Assign Elements to Groups with Constraints](https://leetcode.com/problems/assign-elements-to-groups-with-constraints/)",
    "Solution": [
      [
        "C++",
        "C++/assign-elements-to-groups-with-constraints.cpp"
      ],
      [
        "Python",
        "Python/assign-elements-to-groups-with-constraints.py"
      ]
    ],
    "Time": "_O(m + r * logn)_",
    "Space": "_O(r)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Hash Table, Number Theory"
  },
  {
    "Index": 3448,
    "Title": "[Count Substrings Divisible By Last Digit](https://leetcode.com/problems/count-substrings-divisible-by-last-digit/)",
    "Solution": [
      [
        "C++",
        "C++/count-substrings-divisible-by-last-digit.cpp"
      ],
      [
        "Python",
        "Python/count-substrings-divisible-by-last-digit.py"
      ]
    ],
    "Time": "_O(d * n)_",
    "Space": "_O(d)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "DP, Case Works, Math, Freq Table"
  },
  {
    "Index": 3449,
    "Title": "[Maximize the Minimum Game Score](https://leetcode.com/problems/maximize-the-minimum-game-score/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-the-minimum-game-score.cpp"
      ],
      [
        "Python",
        "Python/maximize-the-minimum-game-score.py"
      ]
    ],
    "Time": "_O(n * log(m * r))_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3450,
    "Title": "[Maximum Students on a Single Bench](https://leetcode.com/problems/maximum-students-on-a-single-bench/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-students-on-a-single-bench.cpp"
      ],
      [
        "Python",
        "Python/maximum-students-on-a-single-bench.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": "🔒"
  },
  {
    "Index": 3451,
    "Title": "[Find Invalid IP Addresses](https://leetcode.com/problems/find-invalid-ip-addresses/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-invalid-ip-addresses.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Regular Expression"
  },
  {
    "Index": 3452,
    "Title": "[Sum of Good Numbers](https://leetcode.com/problems/sum-of-good-numbers/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-good-numbers.cpp"
      ],
      [
        "Python",
        "Python/sum-of-good-numbers.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3453,
    "Title": "[Separate Squares I](https://leetcode.com/problems/separate-squares-i/)",
    "Solution": [
      [
        "C++",
        "C++/separate-squares-i.cpp"
      ],
      [
        "Python",
        "Python/separate-squares-i.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3454,
    "Title": "[Separate Squares II](https://leetcode.com/problems/separate-squares-ii/)",
    "Solution": [
      [
        "C++",
        "C++/separate-squares-ii.cpp"
      ],
      [
        "Python",
        "Python/separate-squares-ii.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3455,
    "Title": "[Shortest Matching Substring](https://leetcode.com/problems/shortest-matching-substring/)",
    "Solution": [
      [
        "C++",
        "C++/shortest-matching-substring.cpp"
      ],
      [
        "Python",
        "Python/shortest-matching-substring.py"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(n + m)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3456,
    "Title": "[Find Special Substring of Length K](https://leetcode.com/problems/find-special-substring-of-length-k/)",
    "Solution": [
      [
        "C++",
        "C++/find-special-substring-of-length-k.cpp"
      ],
      [
        "Python",
        "Python/find-special-substring-of-length-k.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3457,
    "Title": "[Eat Pizzas!](https://leetcode.com/problems/eat-pizzas/)",
    "Solution": [
      [
        "C++",
        "C++/eat-pizzas.cpp"
      ],
      [
        "Python",
        "Python/eat-pizzas.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3458,
    "Title": "[Select K Disjoint Special Substrings](https://leetcode.com/problems/select-k-disjoint-special-substrings/)",
    "Solution": [
      [
        "C++",
        "C++/select-k-disjoint-special-substrings.cpp"
      ],
      [
        "Python",
        "Python/select-k-disjoint-special-substrings.py"
      ]
    ],
    "Time": "_O(n + 26^3)_",
    "Space": "_O(26)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3459,
    "Title": "[Length of Longest V-Shaped Diagonal Segment](https://leetcode.com/problems/length-of-longest-v-shaped-diagonal-segment/)",
    "Solution": [
      [
        "C++",
        "C++/length-of-longest-v-shaped-diagonal-segment.cpp"
      ],
      [
        "Python",
        "Python/length-of-longest-v-shaped-diagonal-segment.py"
      ]
    ],
    "Time": "_O(n * m)_",
    "Space": "_O(n * m)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3460,
    "Title": "[Longest Common Prefix After at Most One Removal](https://leetcode.com/problems/longest-common-prefix-after-at-most-one-removal/)",
    "Solution": [
      [
        "C++",
        "C++/longest-common-prefix-after-at-most-one-removal.cpp"
      ],
      [
        "Python",
        "Python/longest-common-prefix-after-at-most-one-removal.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 3461,
    "Title": "[Check If Digits Are Equal in String After Operations I](https://leetcode.com/problems/check-if-digits-are-equal-in-string-after-operations-i/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-digits-are-equal-in-string-after-operations-i.cpp"
      ],
      [
        "Python",
        "Python/check-if-digits-are-equal-in-string-after-operations-i.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3462,
    "Title": "[Maximum Sum With at Most K Elements](https://leetcode.com/problems/maximum-sum-with-at-most-k-elements/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-sum-with-at-most-k-elements.cpp"
      ],
      [
        "Python",
        "Python/maximum-sum-with-at-most-k-elements.py"
      ]
    ],
    "Time": "_O(n * m)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3463,
    "Title": "[Check If Digits Are Equal in String After Operations II](https://leetcode.com/problems/check-if-digits-are-equal-in-string-after-operations-ii/)",
    "Solution": [
      [
        "C++",
        "C++/check-if-digits-are-equal-in-string-after-operations-ii.cpp"
      ],
      [
        "Python",
        "Python/check-if-digits-are-equal-in-string-after-operations-ii.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(1)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3464,
    "Title": "[Maximize the Distance Between Points on a Square](https://leetcode.com/problems/maximize-the-distance-between-points-on-a-square/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-the-distance-between-points-on-a-square.cpp"
      ],
      [
        "Python",
        "Python/maximize-the-distance-between-points-on-a-square.py"
      ]
    ],
    "Time": "_O(nlogn + nlogs)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3465,
    "Title": "[Find Products with Valid Serial Numbers](https://leetcode.com/problems/find-products-with-valid-serial-numbers/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/find-products-with-valid-serial-numbers.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0,
    "Note": "Regular Expression"
  },
  {
    "Index": 3466,
    "Title": "[Maximum Coin Collection](https://leetcode.com/problems/maximum-coin-collection/)",
    "Solution": [
      [
        "C++",
        "C++/maximum-coin-collection.cpp"
      ],
      [
        "Python",
        "Python/maximum-coin-collection.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 3467,
    "Title": "[Transform Array by Parity](https://leetcode.com/problems/transform-array-by-parity/)",
    "Solution": [
      [
        "C++",
        "C++/transform-array-by-parity.cpp"
      ],
      [
        "Python",
        "Python/transform-array-by-parity.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3468,
    "Title": "[Find the Number of Copy Arrays](https://leetcode.com/problems/find-the-number-of-copy-arrays/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-number-of-copy-arrays.cpp"
      ],
      [
        "Python",
        "Python/find-the-number-of-copy-arrays.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(1)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3469,
    "Title": "[Find Minimum Cost to Remove Array Elements](https://leetcode.com/problems/find-minimum-cost-to-remove-array-elements/)",
    "Solution": [
      [
        "C++",
        "C++/find-minimum-cost-to-remove-array-elements.cpp"
      ],
      [
        "Python",
        "Python/find-minimum-cost-to-remove-array-elements.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3470,
    "Title": "[Permutations IV](https://leetcode.com/problems/permutations-iv/)",
    "Solution": [
      [
        "C++",
        "C++/permutations-iv.cpp"
      ],
      [
        "Python",
        "Python/permutations-iv.py"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Combinatorics"
  },
  {
    "Index": 3471,
    "Title": "[Find the Largest Almost Missing Integer](https://leetcode.com/problems/find-the-largest-almost-missing-integer/)",
    "Solution": [
      [
        "C++",
        "C++/find-the-largest-almost-missing-integer.cpp"
      ],
      [
        "Python",
        "Python/find-the-largest-almost-missing-integer.py"
      ]
    ],
    "Time": "_O(n)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3472,
    "Title": "[Longest Palindromic Subsequence After at Most K Operations](https://leetcode.com/problems/longest-palindromic-subsequence-after-at-most-k-operations/)",
    "Solution": [
      [
        "C++",
        "C++/longest-palindromic-subsequence-after-at-most-k-operations.cpp"
      ],
      [
        "Python",
        "Python/longest-palindromic-subsequence-after-at-most-k-operations.py"
      ]
    ],
    "Time": "_O(n^2 * k)_",
    "Space": "_O(n^2 * k)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3473,
    "Title": "[Sum of K Subarrays With Length at Least M](https://leetcode.com/problems/sum-of-k-subarrays-with-length-at-least-m/)",
    "Solution": [
      [
        "C++",
        "C++/sum-of-k-subarrays-with-length-at-least-m.cpp"
      ],
      [
        "Python",
        "Python/sum-of-k-subarrays-with-length-at-least-m.py"
      ]
    ],
    "Time": "_O(k * n)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3474,
    "Title": "[Lexicographically Smallest Generated String](https://leetcode.com/problems/lexicographically-smallest-generated-string/)",
    "Solution": [
      [
        "C++",
        "C++/lexicographically-smallest-generated-string.cpp"
      ],
      [
        "Python",
        "Python/lexicographically-smallest-generated-string.py"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(n + m)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3475,
    "Title": "[DNA Pattern Recognition](https://leetcode.com/problems/dna-pattern-recognition/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/dna-pattern-recognition.sql"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0,
    "Note": "Regular Expression"
  },
  {
    "Index": 3476,
    "Title": "[Maximize Profit from Task Assignment](https://leetcode.com/problems/maximize-profit-from-task-assignment/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-profit-from-task-assignment.cpp"
      ],
      [
        "Python",
        "Python/maximize-profit-from-task-assignment.py"
      ]
    ],
    "Time": "_O(n + tlogt)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": "🔒"
  },
  {
    "Index": 3477,
    "Title": "[Fruits Into Baskets II](https://leetcode.com/problems/fruits-into-baskets-ii/)",
    "Solution": [
      [
        "C++",
        "C++/fruits-into-baskets-ii.cpp"
      ],
      [
        "Python",
        "Python/fruits-into-baskets-ii.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Easy",
    "Tag": 0
  },
  {
    "Index": 3478,
    "Title": "[Choose K Elements With Maximum Sum](https://leetcode.com/problems/choose-k-elements-with-maximum-sum/)",
    "Solution": [
      [
        "C++",
        "C++/choose-k-elements-with-maximum-sum.cpp"
      ],
      [
        "Python",
        "Python/choose-k-elements-with-maximum-sum.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3479,
    "Title": "[Fruits Into Baskets III](https://leetcode.com/problems/fruits-into-baskets-iii/)",
    "Solution": [
      [
        "C++",
        "C++/fruits-into-baskets-iii.cpp"
      ],
      [
        "Python",
        "Python/fruits-into-baskets-iii.py"
      ]
    ],
    "Time": "_O(nlogn)_",
    "Space": "_O(n)_",
    "Difficulty": "Medium",
    "Tag": 0
  },
  {
    "Index": 3480,
    "Title": "[Maximize Subarrays After Removing One Conflicting Pair](https://leetcode.com/problems/maximize-subarrays-after-removing-one-conflicting-pair/)",
    "Solution": [
      [
        "C++",
        "C++/maximize-subarrays-after-removing-one-conflicting-pair.cpp"
      ],
      [
        "Python",
        "Python/maximize-subarrays-after-removing-one-conflicting-pair.py"
      ]
    ],
    "Time": "_O(n + m)_",
    "Space": "_O(n + m)_",
    "Difficulty": "Hard",
    "Tag": 0
  },
  {
    "Index": 3481,
    "Title": "[Apply Substitutions](https://leetcode.com/problems/apply-substitutions/)",
    "Solution": [
      [
        "C++",
        "C++/apply-substitutions.cpp"
      ],
      [
        "Python",
        "Python/apply-substitutions.py"
      ]
    ],
    "Time": "_O(r * 2^r)_",
    "Space": "_O(r * 2^r)_",
    "Difficulty": "Medium",
    "Tag": "🔒",
    "Note": "Graph, Topological Sort, Memoization"
  },
  {
    "Index": 3482,
    "Title": "[Analyze Organization Hierarchy](https://leetcode.com/problems/analyze-organization-hierarchy/)",
    "Solution": [
      [
        "MySQL",
        "MySQL/analyze-organization-hierarchy.sql"
      ]
    ],
    "Time": "_O(n^2)_",
    "Space": "_O(n^2)_",
    "Difficulty": "Hard",
    "Tag": 0,
    "Note": "Recursive CTE, BFS"
  }
]